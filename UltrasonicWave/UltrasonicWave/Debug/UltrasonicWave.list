
UltrasonicWave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a8  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800348c  0800348c  0000448c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034b8  080034b8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080034b8  080034b8  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034b8  080034b8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034b8  080034b8  000044b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034bc  080034bc  000044bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080034c0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  080034cc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080034cc  000051c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4b2  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022fd  00000000  00000000  000124e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  000147e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a19  00000000  00000000  000154e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f48  00000000  00000000  00015ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101a1  00000000  00000000  00017e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000989cb  00000000  00000000  00027fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c09ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000358c  00000000  00000000  000c09f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000c3f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003474 	.word	0x08003474

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08003474 	.word	0x08003474

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	@ 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000492:	2afd      	cmp	r2, #253	@ 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	@ 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	@ 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	@ 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <motorInit>:
extern int yaw;
extern  float current_pitch, current_roll, current_yaw;

//start PWM timer
void motorInit()
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80006e4:	2100      	movs	r1, #0
 80006e6:	4808      	ldr	r0, [pc, #32]	@ (8000708 <motorInit+0x28>)
 80006e8:	f001 fdbe 	bl	8002268 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80006ec:	2104      	movs	r1, #4
 80006ee:	4806      	ldr	r0, [pc, #24]	@ (8000708 <motorInit+0x28>)
 80006f0:	f001 fdba 	bl	8002268 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80006f4:	2108      	movs	r1, #8
 80006f6:	4804      	ldr	r0, [pc, #16]	@ (8000708 <motorInit+0x28>)
 80006f8:	f001 fdb6 	bl	8002268 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80006fc:	210c      	movs	r1, #12
 80006fe:	4802      	ldr	r0, [pc, #8]	@ (8000708 <motorInit+0x28>)
 8000700:	f001 fdb2 	bl	8002268 <HAL_TIM_PWM_Start>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000e4 	.word	0x200000e4

0800070c <motorBreak>:
//	setMotorSpeed(&htim4, TIM_CHANNEL_3, speed);
//	setMotorSpeed(&htim4, TIM_CHANNEL_4, speed);
//}

void motorBreak()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEFT_MOTOR_GO_GPIO_Port, LEFT_MOTOR_GO_Pin, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000716:	4814      	ldr	r0, [pc, #80]	@ (8000768 <motorBreak+0x5c>)
 8000718:	f001 f83f 	bl	800179a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT2_MOTOR_GO_GPIO_Port, LEFT2_MOTOR_GO_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000722:	4811      	ldr	r0, [pc, #68]	@ (8000768 <motorBreak+0x5c>)
 8000724:	f001 f839 	bl	800179a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_GO_GPIO_Port, RIGHT_MOTOR_GO_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800072e:	480e      	ldr	r0, [pc, #56]	@ (8000768 <motorBreak+0x5c>)
 8000730:	f001 f833 	bl	800179a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT2_MOTOR_GO_GPIO_Port, RIGHT2_MOTOR_GO_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800073a:	480b      	ldr	r0, [pc, #44]	@ (8000768 <motorBreak+0x5c>)
 800073c:	f001 f82d 	bl	800179a <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 7200);
 8000740:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <motorBreak+0x60>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8000748:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 7200);
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <motorBreak+0x60>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8000752:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <motorBreak+0x60>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2200      	movs	r2, #0
 800075a:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 800075c:	4b03      	ldr	r3, [pc, #12]	@ (800076c <motorBreak+0x60>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2200      	movs	r2, #0
 8000762:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40010c00 	.word	0x40010c00
 800076c:	200000e4 	.word	0x200000e4

08000770 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000784:	4b42      	ldr	r3, [pc, #264]	@ (8000890 <MX_GPIO_Init+0x120>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a41      	ldr	r2, [pc, #260]	@ (8000890 <MX_GPIO_Init+0x120>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b3f      	ldr	r3, [pc, #252]	@ (8000890 <MX_GPIO_Init+0x120>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0320 	and.w	r3, r3, #32
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079c:	4b3c      	ldr	r3, [pc, #240]	@ (8000890 <MX_GPIO_Init+0x120>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a3b      	ldr	r2, [pc, #236]	@ (8000890 <MX_GPIO_Init+0x120>)
 80007a2:	f043 0310 	orr.w	r3, r3, #16
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b39      	ldr	r3, [pc, #228]	@ (8000890 <MX_GPIO_Init+0x120>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0310 	and.w	r3, r3, #16
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b4:	4b36      	ldr	r3, [pc, #216]	@ (8000890 <MX_GPIO_Init+0x120>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a35      	ldr	r2, [pc, #212]	@ (8000890 <MX_GPIO_Init+0x120>)
 80007ba:	f043 0304 	orr.w	r3, r3, #4
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <MX_GPIO_Init+0x120>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007cc:	4b30      	ldr	r3, [pc, #192]	@ (8000890 <MX_GPIO_Init+0x120>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a2f      	ldr	r2, [pc, #188]	@ (8000890 <MX_GPIO_Init+0x120>)
 80007d2:	f043 0308 	orr.w	r3, r3, #8
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000890 <MX_GPIO_Init+0x120>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f003 0308 	and.w	r3, r3, #8
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_PIN_GPIO_Port, TRIG_PIN_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2101      	movs	r1, #1
 80007e8:	482a      	ldr	r0, [pc, #168]	@ (8000894 <MX_GPIO_Init+0x124>)
 80007ea:	f000 ffd6 	bl	800179a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEFT_MOTOR_GO_Pin|LEFT2_MOTOR_GO_Pin|RIGHT_MOTOR_GO_Pin|RIGHT2_MOTOR_GO_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80007f4:	4828      	ldr	r0, [pc, #160]	@ (8000898 <MX_GPIO_Init+0x128>)
 80007f6:	f000 ffd0 	bl	800179a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEE_GPIO_Port, BEE_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000800:	4826      	ldr	r0, [pc, #152]	@ (800089c <MX_GPIO_Init+0x12c>)
 8000802:	f000 ffca 	bl	800179a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_PIN_Pin;
 8000806:	2301      	movs	r3, #1
 8000808:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800080e:	2302      	movs	r3, #2
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_PIN_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	4619      	mov	r1, r3
 800081c:	481d      	ldr	r0, [pc, #116]	@ (8000894 <MX_GPIO_Init+0x124>)
 800081e:	f000 fe11 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_PIN_Pin;
 8000822:	2302      	movs	r3, #2
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000826:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <MX_GPIO_Init+0x130>)
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_PIN_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	4619      	mov	r1, r3
 8000834:	4817      	ldr	r0, [pc, #92]	@ (8000894 <MX_GPIO_Init+0x124>)
 8000836:	f000 fe05 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_MOTOR_GO_Pin|LEFT2_MOTOR_GO_Pin|RIGHT_MOTOR_GO_Pin|RIGHT2_MOTOR_GO_Pin;
 800083a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800083e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2302      	movs	r3, #2
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	4619      	mov	r1, r3
 8000852:	4811      	ldr	r0, [pc, #68]	@ (8000898 <MX_GPIO_Init+0x128>)
 8000854:	f000 fdf6 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEE_Pin;
 8000858:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800085c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000862:	2301      	movs	r3, #1
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000866:	2303      	movs	r3, #3
 8000868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BEE_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	4619      	mov	r1, r3
 8000870:	480a      	ldr	r0, [pc, #40]	@ (800089c <MX_GPIO_Init+0x12c>)
 8000872:	f000 fde7 	bl	8001444 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2101      	movs	r1, #1
 800087a:	2007      	movs	r0, #7
 800087c:	f000 fdab 	bl	80013d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000880:	2007      	movs	r0, #7
 8000882:	f000 fdc4 	bl	800140e <HAL_NVIC_EnableIRQ>

}
 8000886:	bf00      	nop
 8000888:	3720      	adds	r7, #32
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000
 8000894:	40011000 	.word	0x40011000
 8000898:	40010c00 	.word	0x40010c00
 800089c:	40010800 	.word	0x40010800
 80008a0:	10110000 	.word	0x10110000

080008a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a8:	f000 fc38 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ac:	f000 f834 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b0:	f7ff ff5e 	bl	8000770 <MX_GPIO_Init>
  MX_TIM5_Init();
 80008b4:	f000 fa6a 	bl	8000d8c <MX_TIM5_Init>
  MX_TIM2_Init();
 80008b8:	f000 f982 	bl	8000bc0 <MX_TIM2_Init>
  MX_TIM1_Init();
 80008bc:	f000 f92e 	bl	8000b1c <MX_TIM1_Init>
  MX_TIM4_Init();
 80008c0:	f000 f9ca 	bl	8000c58 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80008c4:	f000 fb8e 	bl	8000fe4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, rxBuffer, 1);
 80008c8:	2201      	movs	r2, #1
 80008ca:	490f      	ldr	r1, [pc, #60]	@ (8000908 <main+0x64>)
 80008cc:	480f      	ldr	r0, [pc, #60]	@ (800090c <main+0x68>)
 80008ce:	f002 fcb9 	bl	8003244 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80008d2:	2100      	movs	r1, #0
 80008d4:	480e      	ldr	r0, [pc, #56]	@ (8000910 <main+0x6c>)
 80008d6:	f001 fcc7 	bl	8002268 <HAL_TIM_PWM_Start>
  motorInit();
 80008da:	f7ff ff01 	bl	80006e0 <motorInit>
  motorBreak();
 80008de:	f7ff ff15 	bl	800070c <motorBreak>
	HAL_GPIO_WritePin(BEE_GPIO_Port, BEE_Pin, RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008e8:	480a      	ldr	r0, [pc, #40]	@ (8000914 <main+0x70>)
 80008ea:	f000 ff56 	bl	800179a <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 80008ee:	f241 3088 	movw	r0, #5000	@ 0x1388
 80008f2:	f000 fc75 	bl	80011e0 <HAL_Delay>
	HAL_GPIO_WritePin(BEE_GPIO_Port, BEE_Pin, SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008fc:	4805      	ldr	r0, [pc, #20]	@ (8000914 <main+0x70>)
 80008fe:	f000 ff4c 	bl	800179a <HAL_GPIO_WritePin>
//  int Q_temp,L_temp,R_temp;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000902:	bf00      	nop
 8000904:	e7fd      	b.n	8000902 <main+0x5e>
 8000906:	bf00      	nop
 8000908:	2000002c 	.word	0x2000002c
 800090c:	20000174 	.word	0x20000174
 8000910:	2000012c 	.word	0x2000012c
 8000914:	40010800 	.word	0x40010800

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b090      	sub	sp, #64	@ 0x40
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0318 	add.w	r3, r7, #24
 8000922:	2228      	movs	r2, #40	@ 0x28
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f002 fd78 	bl	800341c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800093a:	2301      	movs	r3, #1
 800093c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800093e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000942:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000948:	2301      	movs	r3, #1
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2302      	movs	r3, #2
 800094e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000950:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000954:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000956:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800095a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095c:	f107 0318 	add.w	r3, r7, #24
 8000960:	4618      	mov	r0, r3
 8000962:	f000 ff4b 	bl	80017fc <HAL_RCC_OscConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800096c:	f000 f819 	bl	80009a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000970:	230f      	movs	r3, #15
 8000972:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000974:	2302      	movs	r3, #2
 8000976:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000980:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2102      	movs	r1, #2
 800098a:	4618      	mov	r0, r3
 800098c:	f001 f9b8 	bl	8001d00 <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000996:	f000 f804 	bl	80009a2 <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3740      	adds	r7, #64	@ 0x40
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a6:	b672      	cpsid	i
}
 80009a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009aa:	bf00      	nop
 80009ac:	e7fd      	b.n	80009aa <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009b6:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <HAL_MspInit+0x60>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	4a15      	ldr	r2, [pc, #84]	@ (8000a10 <HAL_MspInit+0x60>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6193      	str	r3, [r2, #24]
 80009c2:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <HAL_MspInit+0x60>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <HAL_MspInit+0x60>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a10 <HAL_MspInit+0x60>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d8:	61d3      	str	r3, [r2, #28]
 80009da:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <HAL_MspInit+0x60>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80009e6:	2005      	movs	r0, #5
 80009e8:	f000 fcea 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ec:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <HAL_MspInit+0x64>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4a04      	ldr	r2, [pc, #16]	@ (8000a14 <HAL_MspInit+0x64>)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40010000 	.word	0x40010000

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <NMI_Handler+0x4>

08000a20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <MemManage_Handler+0x4>

08000a30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a68:	f000 fb9e 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECHO_PIN_Pin);
 8000a74:	2002      	movs	r0, #2
 8000a76:	f000 fea9 	bl	80017cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a84:	4802      	ldr	r0, [pc, #8]	@ (8000a90 <TIM4_IRQHandler+0x10>)
 8000a86:	f001 fca9 	bl	80023dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200000e4 	.word	0x200000e4

08000a94 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d127      	bne.n	8000af4 <HAL_GPIO_EXTI_Callback+0x60>
	case ECHO_PIN_Pin:
		TIM2->CNT = 0;
 8000aa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(&htim2);  // 启动定时2
 8000aac:	4814      	ldr	r0, [pc, #80]	@ (8000b00 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000aae:	f001 fb05 	bl	80020bc <HAL_TIM_Base_Start>
//
		// 等待 ECHO_PIN 为低电平
		while (HAL_GPIO_ReadPin(ECHO_PIN_GPIO_Port, ECHO_PIN_Pin));
 8000ab2:	bf00      	nop
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	4813      	ldr	r0, [pc, #76]	@ (8000b04 <HAL_GPIO_EXTI_Callback+0x70>)
 8000ab8:	f000 fe58 	bl	800176c <HAL_GPIO_ReadPin>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1f8      	bne.n	8000ab4 <HAL_GPIO_EXTI_Callback+0x20>

		HAL_TIM_Base_Stop(&htim2);  // 停止定时2
 8000ac2:	480f      	ldr	r0, [pc, #60]	@ (8000b00 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000ac4:	f001 fb52 	bl	800216c <HAL_TIM_Base_Stop>

		// 获取定时器计数，计算距离
		ultrasonicWaveDist = (int)(TIM2->CNT) * 0.034f / 2.0f;
 8000ac8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fc62 	bl	8000398 <__aeabi_i2f>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	490c      	ldr	r1, [pc, #48]	@ (8000b08 <HAL_GPIO_EXTI_Callback+0x74>)
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fcb1 	bl	8000440 <__aeabi_fmul>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fd5f 	bl	80005a8 <__aeabi_fdiv>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <HAL_GPIO_EXTI_Callback+0x78>)
 8000af0:	601a      	str	r2, [r3, #0]

		break;
 8000af2:	e000      	b.n	8000af6 <HAL_GPIO_EXTI_Callback+0x62>

	default:
		break;
 8000af4:	bf00      	nop
	}
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000009c 	.word	0x2000009c
 8000b04:	40011000 	.word	0x40011000
 8000b08:	3d0b4396 	.word	0x3d0b4396
 8000b0c:	20000028 	.word	0x20000028

08000b10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <MX_TIM1_Init+0x9c>)
 8000b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8000bbc <MX_TIM1_Init+0xa0>)
 8000b3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b40:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <MX_TIM1_Init+0x9c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b46:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <MX_TIM1_Init+0x9c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <MX_TIM1_Init+0x9c>)
 8000b4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b54:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <MX_TIM1_Init+0x9c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <MX_TIM1_Init+0x9c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b60:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <MX_TIM1_Init+0x9c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b66:	4814      	ldr	r0, [pc, #80]	@ (8000bb8 <MX_TIM1_Init+0x9c>)
 8000b68:	f001 fa58 	bl	800201c <HAL_TIM_Base_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b72:	f7ff ff16 	bl	80009a2 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	4619      	mov	r1, r3
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <MX_TIM1_Init+0x9c>)
 8000b86:	f001 fea2 	bl	80028ce <HAL_TIM_SlaveConfigSynchro>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b90:	f7ff ff07 	bl	80009a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_TIM1_Init+0x9c>)
 8000ba2:	f002 fa81 	bl	80030a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000bac:	f7ff fef9 	bl	80009a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	3720      	adds	r7, #32
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000054 	.word	0x20000054
 8000bbc:	40012c00 	.word	0x40012c00

08000bc0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c54 <MX_TIM2_Init+0x94>)
 8000bde:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000be2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <MX_TIM2_Init+0x94>)
 8000be6:	2247      	movs	r2, #71	@ 0x47
 8000be8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <MX_TIM2_Init+0x94>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <MX_TIM2_Init+0x94>)
 8000bf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bf6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf8:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <MX_TIM2_Init+0x94>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <MX_TIM2_Init+0x94>)
 8000c00:	2280      	movs	r2, #128	@ 0x80
 8000c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c04:	4813      	ldr	r0, [pc, #76]	@ (8000c54 <MX_TIM2_Init+0x94>)
 8000c06:	f001 fa09 	bl	800201c <HAL_TIM_Base_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c10:	f7ff fec7 	bl	80009a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <MX_TIM2_Init+0x94>)
 8000c22:	f001 fd8d 	bl	8002740 <HAL_TIM_ConfigClockSource>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c2c:	f7ff feb9 	bl	80009a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c30:	2300      	movs	r3, #0
 8000c32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <MX_TIM2_Init+0x94>)
 8000c3e:	f002 fa33 	bl	80030a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c48:	f7ff feab 	bl	80009a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000009c 	.word	0x2000009c

08000c58 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	@ 0x38
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	f107 0320 	add.w	r3, r7, #32
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	615a      	str	r2, [r3, #20]
 8000c86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c88:	4b3e      	ldr	r3, [pc, #248]	@ (8000d84 <MX_TIM4_Init+0x12c>)
 8000c8a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d88 <MX_TIM4_Init+0x130>)
 8000c8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c8e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d84 <MX_TIM4_Init+0x12c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	4b3b      	ldr	r3, [pc, #236]	@ (8000d84 <MX_TIM4_Init+0x12c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7199;
 8000c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d84 <MX_TIM4_Init+0x12c>)
 8000c9c:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000ca0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca2:	4b38      	ldr	r3, [pc, #224]	@ (8000d84 <MX_TIM4_Init+0x12c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ca8:	4b36      	ldr	r3, [pc, #216]	@ (8000d84 <MX_TIM4_Init+0x12c>)
 8000caa:	2280      	movs	r2, #128	@ 0x80
 8000cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cae:	4835      	ldr	r0, [pc, #212]	@ (8000d84 <MX_TIM4_Init+0x12c>)
 8000cb0:	f001 f9b4 	bl	800201c <HAL_TIM_Base_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000cba:	f7ff fe72 	bl	80009a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cc4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	482e      	ldr	r0, [pc, #184]	@ (8000d84 <MX_TIM4_Init+0x12c>)
 8000ccc:	f001 fd38 	bl	8002740 <HAL_TIM_ConfigClockSource>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000cd6:	f7ff fe64 	bl	80009a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cda:	482a      	ldr	r0, [pc, #168]	@ (8000d84 <MX_TIM4_Init+0x12c>)
 8000cdc:	f001 fa6c 	bl	80021b8 <HAL_TIM_PWM_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000ce6:	f7ff fe5c 	bl	80009a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cf2:	f107 0320 	add.w	r3, r7, #32
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4822      	ldr	r0, [pc, #136]	@ (8000d84 <MX_TIM4_Init+0x12c>)
 8000cfa:	f002 f9d5 	bl	80030a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d04:	f7ff fe4d 	bl	80009a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000d08:	2370      	movs	r3, #112	@ 0x70
 8000d0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4819      	ldr	r0, [pc, #100]	@ (8000d84 <MX_TIM4_Init+0x12c>)
 8000d20:	f001 fc4c 	bl	80025bc <HAL_TIM_PWM_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000d2a:	f7ff fe3a 	bl	80009a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	2204      	movs	r2, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	4813      	ldr	r0, [pc, #76]	@ (8000d84 <MX_TIM4_Init+0x12c>)
 8000d36:	f001 fc41 	bl	80025bc <HAL_TIM_PWM_ConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000d40:	f7ff fe2f 	bl	80009a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d44:	2360      	movs	r3, #96	@ 0x60
 8000d46:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2208      	movs	r2, #8
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480d      	ldr	r0, [pc, #52]	@ (8000d84 <MX_TIM4_Init+0x12c>)
 8000d50:	f001 fc34 	bl	80025bc <HAL_TIM_PWM_ConfigChannel>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8000d5a:	f7ff fe22 	bl	80009a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	220c      	movs	r2, #12
 8000d62:	4619      	mov	r1, r3
 8000d64:	4807      	ldr	r0, [pc, #28]	@ (8000d84 <MX_TIM4_Init+0x12c>)
 8000d66:	f001 fc29 	bl	80025bc <HAL_TIM_PWM_ConfigChannel>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 8000d70:	f7ff fe17 	bl	80009a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d74:	4803      	ldr	r0, [pc, #12]	@ (8000d84 <MX_TIM4_Init+0x12c>)
 8000d76:	f000 f8df 	bl	8000f38 <HAL_TIM_MspPostInit>

}
 8000d7a:	bf00      	nop
 8000d7c:	3738      	adds	r7, #56	@ 0x38
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200000e4 	.word	0x200000e4
 8000d88:	40000800 	.word	0x40000800

08000d8c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08e      	sub	sp, #56	@ 0x38
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	f107 0320 	add.w	r3, r7, #32
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8000e70 <MX_TIM5_Init+0xe4>)
 8000dbe:	4a2d      	ldr	r2, [pc, #180]	@ (8000e74 <MX_TIM5_Init+0xe8>)
 8000dc0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 143;
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e70 <MX_TIM5_Init+0xe4>)
 8000dc4:	228f      	movs	r2, #143	@ 0x8f
 8000dc6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b29      	ldr	r3, [pc, #164]	@ (8000e70 <MX_TIM5_Init+0xe4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 8000dce:	4b28      	ldr	r3, [pc, #160]	@ (8000e70 <MX_TIM5_Init+0xe4>)
 8000dd0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000dd4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd6:	4b26      	ldr	r3, [pc, #152]	@ (8000e70 <MX_TIM5_Init+0xe4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ddc:	4b24      	ldr	r3, [pc, #144]	@ (8000e70 <MX_TIM5_Init+0xe4>)
 8000dde:	2280      	movs	r2, #128	@ 0x80
 8000de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000de2:	4823      	ldr	r0, [pc, #140]	@ (8000e70 <MX_TIM5_Init+0xe4>)
 8000de4:	f001 f91a 	bl	800201c <HAL_TIM_Base_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000dee:	f7ff fdd8 	bl	80009a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000df8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	481c      	ldr	r0, [pc, #112]	@ (8000e70 <MX_TIM5_Init+0xe4>)
 8000e00:	f001 fc9e 	bl	8002740 <HAL_TIM_ConfigClockSource>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000e0a:	f7ff fdca 	bl	80009a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e0e:	4818      	ldr	r0, [pc, #96]	@ (8000e70 <MX_TIM5_Init+0xe4>)
 8000e10:	f001 f9d2 	bl	80021b8 <HAL_TIM_PWM_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000e1a:	f7ff fdc2 	bl	80009a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e26:	f107 0320 	add.w	r3, r7, #32
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4810      	ldr	r0, [pc, #64]	@ (8000e70 <MX_TIM5_Init+0xe4>)
 8000e2e:	f002 f93b 	bl	80030a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000e38:	f7ff fdb3 	bl	80009a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e3c:	2360      	movs	r3, #96	@ 0x60
 8000e3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	4619      	mov	r1, r3
 8000e52:	4807      	ldr	r0, [pc, #28]	@ (8000e70 <MX_TIM5_Init+0xe4>)
 8000e54:	f001 fbb2 	bl	80025bc <HAL_TIM_PWM_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000e5e:	f7ff fda0 	bl	80009a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000e62:	4803      	ldr	r0, [pc, #12]	@ (8000e70 <MX_TIM5_Init+0xe4>)
 8000e64:	f000 f868 	bl	8000f38 <HAL_TIM_MspPostInit>

}
 8000e68:	bf00      	nop
 8000e6a:	3738      	adds	r7, #56	@ 0x38
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	2000012c 	.word	0x2000012c
 8000e74:	40000c00 	.word	0x40000c00

08000e78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a28      	ldr	r2, [pc, #160]	@ (8000f28 <HAL_TIM_Base_MspInit+0xb0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d10c      	bne.n	8000ea4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e8a:	4b28      	ldr	r3, [pc, #160]	@ (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	4a27      	ldr	r2, [pc, #156]	@ (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000e90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e94:	6193      	str	r3, [r2, #24]
 8000e96:	4b25      	ldr	r3, [pc, #148]	@ (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000ea2:	e03c      	b.n	8000f1e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM2)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000eac:	d10c      	bne.n	8000ec8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eae:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	61d3      	str	r3, [r2, #28]
 8000eba:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
}
 8000ec6:	e02a      	b.n	8000f1e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a18      	ldr	r2, [pc, #96]	@ (8000f30 <HAL_TIM_Base_MspInit+0xb8>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d114      	bne.n	8000efc <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ed2:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a15      	ldr	r2, [pc, #84]	@ (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	61d3      	str	r3, [r2, #28]
 8000ede:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2101      	movs	r1, #1
 8000eee:	201e      	movs	r0, #30
 8000ef0:	f000 fa71 	bl	80013d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ef4:	201e      	movs	r0, #30
 8000ef6:	f000 fa8a 	bl	800140e <HAL_NVIC_EnableIRQ>
}
 8000efa:	e010      	b.n	8000f1e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM5)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0c      	ldr	r2, [pc, #48]	@ (8000f34 <HAL_TIM_Base_MspInit+0xbc>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d10b      	bne.n	8000f1e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a08      	ldr	r2, [pc, #32]	@ (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	61d3      	str	r3, [r2, #28]
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <HAL_TIM_Base_MspInit+0xb4>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40012c00 	.word	0x40012c00
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40000800 	.word	0x40000800
 8000f34:	40000c00 	.word	0x40000c00

08000f38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a1f      	ldr	r2, [pc, #124]	@ (8000fd0 <HAL_TIM_MspPostInit+0x98>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d119      	bne.n	8000f8c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <HAL_TIM_MspPostInit+0x9c>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd4 <HAL_TIM_MspPostInit+0x9c>)
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <HAL_TIM_MspPostInit+0x9c>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000f70:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000f74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	4619      	mov	r1, r3
 8000f84:	4814      	ldr	r0, [pc, #80]	@ (8000fd8 <HAL_TIM_MspPostInit+0xa0>)
 8000f86:	f000 fa5d 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000f8a:	e01c      	b.n	8000fc6 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM5)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a12      	ldr	r2, [pc, #72]	@ (8000fdc <HAL_TIM_MspPostInit+0xa4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d117      	bne.n	8000fc6 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <HAL_TIM_MspPostInit+0x9c>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd4 <HAL_TIM_MspPostInit+0x9c>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6193      	str	r3, [r2, #24]
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <HAL_TIM_MspPostInit+0x9c>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4807      	ldr	r0, [pc, #28]	@ (8000fe0 <HAL_TIM_MspPostInit+0xa8>)
 8000fc2:	f000 fa3f 	bl	8001444 <HAL_GPIO_Init>
}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40000800 	.word	0x40000800
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40010c00 	.word	0x40010c00
 8000fdc:	40000c00 	.word	0x40000c00
 8000fe0:	40010800 	.word	0x40010800

08000fe4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <MX_USART3_UART_Init+0x4c>)
 8000fea:	4a12      	ldr	r2, [pc, #72]	@ (8001034 <MX_USART3_UART_Init+0x50>)
 8000fec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000fee:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <MX_USART3_UART_Init+0x4c>)
 8000ff0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ff4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MX_USART3_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <MX_USART3_UART_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <MX_USART3_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001008:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <MX_USART3_UART_Init+0x4c>)
 800100a:	220c      	movs	r2, #12
 800100c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <MX_USART3_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <MX_USART3_UART_Init+0x4c>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800101a:	4805      	ldr	r0, [pc, #20]	@ (8001030 <MX_USART3_UART_Init+0x4c>)
 800101c:	f002 f8c2 	bl	80031a4 <HAL_UART_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001026:	f7ff fcbc 	bl	80009a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000174 	.word	0x20000174
 8001034:	40004800 	.word	0x40004800

08001038 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a1c      	ldr	r2, [pc, #112]	@ (80010c4 <HAL_UART_MspInit+0x8c>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d131      	bne.n	80010bc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001058:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <HAL_UART_MspInit+0x90>)
 800105a:	69db      	ldr	r3, [r3, #28]
 800105c:	4a1a      	ldr	r2, [pc, #104]	@ (80010c8 <HAL_UART_MspInit+0x90>)
 800105e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001062:	61d3      	str	r3, [r2, #28]
 8001064:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <HAL_UART_MspInit+0x90>)
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001070:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <HAL_UART_MspInit+0x90>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a14      	ldr	r2, [pc, #80]	@ (80010c8 <HAL_UART_MspInit+0x90>)
 8001076:	f043 0308 	orr.w	r3, r3, #8
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <HAL_UART_MspInit+0x90>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001088:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800108c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	4619      	mov	r1, r3
 800109c:	480b      	ldr	r0, [pc, #44]	@ (80010cc <HAL_UART_MspInit+0x94>)
 800109e:	f000 f9d1 	bl	8001444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4619      	mov	r1, r3
 80010b6:	4805      	ldr	r0, [pc, #20]	@ (80010cc <HAL_UART_MspInit+0x94>)
 80010b8:	f000 f9c4 	bl	8001444 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010bc:	bf00      	nop
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40004800 	.word	0x40004800
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40010c00 	.word	0x40010c00

080010d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010d0:	f7ff fd1e 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d4:	480b      	ldr	r0, [pc, #44]	@ (8001104 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010d6:	490c      	ldr	r1, [pc, #48]	@ (8001108 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010d8:	4a0c      	ldr	r2, [pc, #48]	@ (800110c <LoopFillZerobss+0x16>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a09      	ldr	r2, [pc, #36]	@ (8001110 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010ec:	4c09      	ldr	r4, [pc, #36]	@ (8001114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010fa:	f002 f997 	bl	800342c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010fe:	f7ff fbd1 	bl	80008a4 <main>
  bx lr
 8001102:	4770      	bx	lr
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001108:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800110c:	080034c0 	.word	0x080034c0
  ldr r2, =_sbss
 8001110:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001114:	200001c0 	.word	0x200001c0

08001118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC1_2_IRQHandler>
	...

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <HAL_Init+0x28>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	@ (8001144 <HAL_Init+0x28>)
 8001126:	f043 0310 	orr.w	r3, r3, #16
 800112a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f947 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f808 	bl	8001148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff fc3a 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40022000 	.word	0x40022000

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001150:	4b12      	ldr	r3, [pc, #72]	@ (800119c <HAL_InitTick+0x54>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <HAL_InitTick+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f95f 	bl	800142a <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f000 f927 	bl	80013d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	@ (80011a4 <HAL_InitTick+0x5c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000004 	.word	0x20000004

080011a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <HAL_IncTick+0x1c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b05      	ldr	r3, [pc, #20]	@ (80011c8 <HAL_IncTick+0x20>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a03      	ldr	r2, [pc, #12]	@ (80011c8 <HAL_IncTick+0x20>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	20000008 	.word	0x20000008
 80011c8:	200001bc 	.word	0x200001bc

080011cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b02      	ldr	r3, [pc, #8]	@ (80011dc <HAL_GetTick+0x10>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	200001bc 	.word	0x200001bc

080011e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff fff0 	bl	80011cc <HAL_GetTick>
 80011ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f8:	d005      	beq.n	8001206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <HAL_Delay+0x44>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001206:	bf00      	nop
 8001208:	f7ff ffe0 	bl	80011cc <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d8f7      	bhi.n	8001208 <HAL_Delay+0x28>
  {
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008

08001228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001238:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001244:	4013      	ands	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001250:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125a:	4a04      	ldr	r2, [pc, #16]	@ (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	60d3      	str	r3, [r2, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001274:	4b04      	ldr	r3, [pc, #16]	@ (8001288 <__NVIC_GetPriorityGrouping+0x18>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	f003 0307 	and.w	r3, r3, #7
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0b      	blt.n	80012b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 021f 	and.w	r2, r3, #31
 80012a4:	4906      	ldr	r1, [pc, #24]	@ (80012c0 <__NVIC_EnableIRQ+0x34>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	2001      	movs	r0, #1
 80012ae:	fa00 f202 	lsl.w	r2, r0, r2
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	@ (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	@ (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	@ 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
         );
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	@ 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f7ff ff90 	bl	80012c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	@ (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff2d 	bl	8001228 <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff42 	bl	8001270 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff90 	bl	8001318 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5f 	bl	80012c4 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff35 	bl	800128c <__NVIC_EnableIRQ>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffa2 	bl	800137c <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b08b      	sub	sp, #44	@ 0x2c
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001456:	e179      	b.n	800174c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001458:	2201      	movs	r2, #1
 800145a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	429a      	cmp	r2, r3
 8001472:	f040 8168 	bne.w	8001746 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4a96      	ldr	r2, [pc, #600]	@ (80016d4 <HAL_GPIO_Init+0x290>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d05e      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 8001480:	4a94      	ldr	r2, [pc, #592]	@ (80016d4 <HAL_GPIO_Init+0x290>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d875      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 8001486:	4a94      	ldr	r2, [pc, #592]	@ (80016d8 <HAL_GPIO_Init+0x294>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d058      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 800148c:	4a92      	ldr	r2, [pc, #584]	@ (80016d8 <HAL_GPIO_Init+0x294>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d86f      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 8001492:	4a92      	ldr	r2, [pc, #584]	@ (80016dc <HAL_GPIO_Init+0x298>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d052      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 8001498:	4a90      	ldr	r2, [pc, #576]	@ (80016dc <HAL_GPIO_Init+0x298>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d869      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 800149e:	4a90      	ldr	r2, [pc, #576]	@ (80016e0 <HAL_GPIO_Init+0x29c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d04c      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 80014a4:	4a8e      	ldr	r2, [pc, #568]	@ (80016e0 <HAL_GPIO_Init+0x29c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d863      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 80014aa:	4a8e      	ldr	r2, [pc, #568]	@ (80016e4 <HAL_GPIO_Init+0x2a0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d046      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 80014b0:	4a8c      	ldr	r2, [pc, #560]	@ (80016e4 <HAL_GPIO_Init+0x2a0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d85d      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 80014b6:	2b12      	cmp	r3, #18
 80014b8:	d82a      	bhi.n	8001510 <HAL_GPIO_Init+0xcc>
 80014ba:	2b12      	cmp	r3, #18
 80014bc:	d859      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 80014be:	a201      	add	r2, pc, #4	@ (adr r2, 80014c4 <HAL_GPIO_Init+0x80>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	0800153f 	.word	0x0800153f
 80014c8:	08001519 	.word	0x08001519
 80014cc:	0800152b 	.word	0x0800152b
 80014d0:	0800156d 	.word	0x0800156d
 80014d4:	08001573 	.word	0x08001573
 80014d8:	08001573 	.word	0x08001573
 80014dc:	08001573 	.word	0x08001573
 80014e0:	08001573 	.word	0x08001573
 80014e4:	08001573 	.word	0x08001573
 80014e8:	08001573 	.word	0x08001573
 80014ec:	08001573 	.word	0x08001573
 80014f0:	08001573 	.word	0x08001573
 80014f4:	08001573 	.word	0x08001573
 80014f8:	08001573 	.word	0x08001573
 80014fc:	08001573 	.word	0x08001573
 8001500:	08001573 	.word	0x08001573
 8001504:	08001573 	.word	0x08001573
 8001508:	08001521 	.word	0x08001521
 800150c:	08001535 	.word	0x08001535
 8001510:	4a75      	ldr	r2, [pc, #468]	@ (80016e8 <HAL_GPIO_Init+0x2a4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d013      	beq.n	800153e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001516:	e02c      	b.n	8001572 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	623b      	str	r3, [r7, #32]
          break;
 800151e:	e029      	b.n	8001574 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	3304      	adds	r3, #4
 8001526:	623b      	str	r3, [r7, #32]
          break;
 8001528:	e024      	b.n	8001574 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	3308      	adds	r3, #8
 8001530:	623b      	str	r3, [r7, #32]
          break;
 8001532:	e01f      	b.n	8001574 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	330c      	adds	r3, #12
 800153a:	623b      	str	r3, [r7, #32]
          break;
 800153c:	e01a      	b.n	8001574 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001546:	2304      	movs	r3, #4
 8001548:	623b      	str	r3, [r7, #32]
          break;
 800154a:	e013      	b.n	8001574 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d105      	bne.n	8001560 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001554:	2308      	movs	r3, #8
 8001556:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	611a      	str	r2, [r3, #16]
          break;
 800155e:	e009      	b.n	8001574 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001560:	2308      	movs	r3, #8
 8001562:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	615a      	str	r2, [r3, #20]
          break;
 800156a:	e003      	b.n	8001574 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
          break;
 8001570:	e000      	b.n	8001574 <HAL_GPIO_Init+0x130>
          break;
 8001572:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2bff      	cmp	r3, #255	@ 0xff
 8001578:	d801      	bhi.n	800157e <HAL_GPIO_Init+0x13a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	e001      	b.n	8001582 <HAL_GPIO_Init+0x13e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3304      	adds	r3, #4
 8001582:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	2bff      	cmp	r3, #255	@ 0xff
 8001588:	d802      	bhi.n	8001590 <HAL_GPIO_Init+0x14c>
 800158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	e002      	b.n	8001596 <HAL_GPIO_Init+0x152>
 8001590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001592:	3b08      	subs	r3, #8
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	210f      	movs	r1, #15
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	401a      	ands	r2, r3
 80015a8:	6a39      	ldr	r1, [r7, #32]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	431a      	orrs	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 80c1 	beq.w	8001746 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015c4:	4b49      	ldr	r3, [pc, #292]	@ (80016ec <HAL_GPIO_Init+0x2a8>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a48      	ldr	r2, [pc, #288]	@ (80016ec <HAL_GPIO_Init+0x2a8>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b46      	ldr	r3, [pc, #280]	@ (80016ec <HAL_GPIO_Init+0x2a8>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015dc:	4a44      	ldr	r2, [pc, #272]	@ (80016f0 <HAL_GPIO_Init+0x2ac>)
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3302      	adds	r3, #2
 80015e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	220f      	movs	r2, #15
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4013      	ands	r3, r2
 80015fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a3c      	ldr	r2, [pc, #240]	@ (80016f4 <HAL_GPIO_Init+0x2b0>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d01f      	beq.n	8001648 <HAL_GPIO_Init+0x204>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a3b      	ldr	r2, [pc, #236]	@ (80016f8 <HAL_GPIO_Init+0x2b4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d019      	beq.n	8001644 <HAL_GPIO_Init+0x200>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a3a      	ldr	r2, [pc, #232]	@ (80016fc <HAL_GPIO_Init+0x2b8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d013      	beq.n	8001640 <HAL_GPIO_Init+0x1fc>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a39      	ldr	r2, [pc, #228]	@ (8001700 <HAL_GPIO_Init+0x2bc>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d00d      	beq.n	800163c <HAL_GPIO_Init+0x1f8>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a38      	ldr	r2, [pc, #224]	@ (8001704 <HAL_GPIO_Init+0x2c0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d007      	beq.n	8001638 <HAL_GPIO_Init+0x1f4>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a37      	ldr	r2, [pc, #220]	@ (8001708 <HAL_GPIO_Init+0x2c4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d101      	bne.n	8001634 <HAL_GPIO_Init+0x1f0>
 8001630:	2305      	movs	r3, #5
 8001632:	e00a      	b.n	800164a <HAL_GPIO_Init+0x206>
 8001634:	2306      	movs	r3, #6
 8001636:	e008      	b.n	800164a <HAL_GPIO_Init+0x206>
 8001638:	2304      	movs	r3, #4
 800163a:	e006      	b.n	800164a <HAL_GPIO_Init+0x206>
 800163c:	2303      	movs	r3, #3
 800163e:	e004      	b.n	800164a <HAL_GPIO_Init+0x206>
 8001640:	2302      	movs	r3, #2
 8001642:	e002      	b.n	800164a <HAL_GPIO_Init+0x206>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <HAL_GPIO_Init+0x206>
 8001648:	2300      	movs	r3, #0
 800164a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800164c:	f002 0203 	and.w	r2, r2, #3
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	4093      	lsls	r3, r2
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800165a:	4925      	ldr	r1, [pc, #148]	@ (80016f0 <HAL_GPIO_Init+0x2ac>)
 800165c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d006      	beq.n	8001682 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001674:	4b25      	ldr	r3, [pc, #148]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	4924      	ldr	r1, [pc, #144]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	608b      	str	r3, [r1, #8]
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001682:	4b22      	ldr	r3, [pc, #136]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	43db      	mvns	r3, r3
 800168a:	4920      	ldr	r1, [pc, #128]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 800168c:	4013      	ands	r3, r2
 800168e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	491a      	ldr	r1, [pc, #104]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	60cb      	str	r3, [r1, #12]
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016aa:	4b18      	ldr	r3, [pc, #96]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4916      	ldr	r1, [pc, #88]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d025      	beq.n	8001710 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	4910      	ldr	r1, [pc, #64]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
 80016d0:	e025      	b.n	800171e <HAL_GPIO_Init+0x2da>
 80016d2:	bf00      	nop
 80016d4:	10320000 	.word	0x10320000
 80016d8:	10310000 	.word	0x10310000
 80016dc:	10220000 	.word	0x10220000
 80016e0:	10210000 	.word	0x10210000
 80016e4:	10120000 	.word	0x10120000
 80016e8:	10110000 	.word	0x10110000
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000
 80016f4:	40010800 	.word	0x40010800
 80016f8:	40010c00 	.word	0x40010c00
 80016fc:	40011000 	.word	0x40011000
 8001700:	40011400 	.word	0x40011400
 8001704:	40011800 	.word	0x40011800
 8001708:	40011c00 	.word	0x40011c00
 800170c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001710:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <HAL_GPIO_Init+0x324>)
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	43db      	mvns	r3, r3
 8001718:	4913      	ldr	r1, [pc, #76]	@ (8001768 <HAL_GPIO_Init+0x324>)
 800171a:	4013      	ands	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800172a:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <HAL_GPIO_Init+0x324>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	490e      	ldr	r1, [pc, #56]	@ (8001768 <HAL_GPIO_Init+0x324>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	600b      	str	r3, [r1, #0]
 8001736:	e006      	b.n	8001746 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001738:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <HAL_GPIO_Init+0x324>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	43db      	mvns	r3, r3
 8001740:	4909      	ldr	r1, [pc, #36]	@ (8001768 <HAL_GPIO_Init+0x324>)
 8001742:	4013      	ands	r3, r2
 8001744:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	3301      	adds	r3, #1
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001752:	fa22 f303 	lsr.w	r3, r2, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	f47f ae7e 	bne.w	8001458 <HAL_GPIO_Init+0x14>
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	372c      	adds	r7, #44	@ 0x2c
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	40010400 	.word	0x40010400

0800176c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	887b      	ldrh	r3, [r7, #2]
 800177e:	4013      	ands	r3, r2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
 8001788:	e001      	b.n	800178e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800178a:	2300      	movs	r3, #0
 800178c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	460b      	mov	r3, r1
 80017a4:	807b      	strh	r3, [r7, #2]
 80017a6:	4613      	mov	r3, r2
 80017a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017aa:	787b      	ldrb	r3, [r7, #1]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b0:	887a      	ldrh	r2, [r7, #2]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017b6:	e003      	b.n	80017c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017b8:	887b      	ldrh	r3, [r7, #2]
 80017ba:	041a      	lsls	r2, r3, #16
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	611a      	str	r2, [r3, #16]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
	...

080017cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017d6:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	4013      	ands	r3, r2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d006      	beq.n	80017f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017e2:	4a05      	ldr	r2, [pc, #20]	@ (80017f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff f952 	bl	8000a94 <HAL_GPIO_EXTI_Callback>
  }
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40010400 	.word	0x40010400

080017fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e272      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8087 	beq.w	800192a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800181c:	4b92      	ldr	r3, [pc, #584]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b04      	cmp	r3, #4
 8001826:	d00c      	beq.n	8001842 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001828:	4b8f      	ldr	r3, [pc, #572]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	2b08      	cmp	r3, #8
 8001832:	d112      	bne.n	800185a <HAL_RCC_OscConfig+0x5e>
 8001834:	4b8c      	ldr	r3, [pc, #560]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800183c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001840:	d10b      	bne.n	800185a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001842:	4b89      	ldr	r3, [pc, #548]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d06c      	beq.n	8001928 <HAL_RCC_OscConfig+0x12c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d168      	bne.n	8001928 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e24c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x76>
 8001864:	4b80      	ldr	r3, [pc, #512]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a7f      	ldr	r2, [pc, #508]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800186a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	e02e      	b.n	80018d0 <HAL_RCC_OscConfig+0xd4>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0x98>
 800187a:	4b7b      	ldr	r3, [pc, #492]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a7a      	ldr	r2, [pc, #488]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b78      	ldr	r3, [pc, #480]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a77      	ldr	r2, [pc, #476]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800188c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e01d      	b.n	80018d0 <HAL_RCC_OscConfig+0xd4>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0xbc>
 800189e:	4b72      	ldr	r3, [pc, #456]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a71      	ldr	r2, [pc, #452]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a6e      	ldr	r2, [pc, #440]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e00b      	b.n	80018d0 <HAL_RCC_OscConfig+0xd4>
 80018b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a6a      	ldr	r2, [pc, #424]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	4b68      	ldr	r3, [pc, #416]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a67      	ldr	r2, [pc, #412]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d013      	beq.n	8001900 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fc78 	bl	80011cc <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff fc74 	bl	80011cc <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	@ 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e200      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0xe4>
 80018fe:	e014      	b.n	800192a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fc64 	bl	80011cc <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff fc60 	bl	80011cc <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	@ 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e1ec      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	4b53      	ldr	r3, [pc, #332]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x10c>
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d063      	beq.n	80019fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001936:	4b4c      	ldr	r3, [pc, #304]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00b      	beq.n	800195a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001942:	4b49      	ldr	r3, [pc, #292]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b08      	cmp	r3, #8
 800194c:	d11c      	bne.n	8001988 <HAL_RCC_OscConfig+0x18c>
 800194e:	4b46      	ldr	r3, [pc, #280]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d116      	bne.n	8001988 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195a:	4b43      	ldr	r3, [pc, #268]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d005      	beq.n	8001972 <HAL_RCC_OscConfig+0x176>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d001      	beq.n	8001972 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e1c0      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001972:	4b3d      	ldr	r3, [pc, #244]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4939      	ldr	r1, [pc, #228]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001986:	e03a      	b.n	80019fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d020      	beq.n	80019d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001990:	4b36      	ldr	r3, [pc, #216]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff fc19 	bl	80011cc <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199e:	f7ff fc15 	bl	80011cc <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e1a1      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4927      	ldr	r1, [pc, #156]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]
 80019d0:	e015      	b.n	80019fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d2:	4b26      	ldr	r3, [pc, #152]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fbf8 	bl	80011cc <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e0:	f7ff fbf4 	bl	80011cc <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e180      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d03a      	beq.n	8001a80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d019      	beq.n	8001a46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a12:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <HAL_RCC_OscConfig+0x274>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a18:	f7ff fbd8 	bl	80011cc <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a20:	f7ff fbd4 	bl	80011cc <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e160      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a32:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f000 face 	bl	8001fe0 <RCC_Delay>
 8001a44:	e01c      	b.n	8001a80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a46:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <HAL_RCC_OscConfig+0x274>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fbbe 	bl	80011cc <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a52:	e00f      	b.n	8001a74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff fbba 	bl	80011cc <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d908      	bls.n	8001a74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e146      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	42420000 	.word	0x42420000
 8001a70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a74:	4b92      	ldr	r3, [pc, #584]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1e9      	bne.n	8001a54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80a6 	beq.w	8001bda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a92:	4b8b      	ldr	r3, [pc, #556]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10d      	bne.n	8001aba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4b88      	ldr	r3, [pc, #544]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	4a87      	ldr	r2, [pc, #540]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa8:	61d3      	str	r3, [r2, #28]
 8001aaa:	4b85      	ldr	r3, [pc, #532]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aba:	4b82      	ldr	r3, [pc, #520]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d118      	bne.n	8001af8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac6:	4b7f      	ldr	r3, [pc, #508]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7e      	ldr	r2, [pc, #504]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c8>)
 8001acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad2:	f7ff fb7b 	bl	80011cc <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ada:	f7ff fb77 	bl	80011cc <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b64      	cmp	r3, #100	@ 0x64
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e103      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	4b75      	ldr	r3, [pc, #468]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x312>
 8001b00:	4b6f      	ldr	r3, [pc, #444]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4a6e      	ldr	r2, [pc, #440]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6213      	str	r3, [r2, #32]
 8001b0c:	e02d      	b.n	8001b6a <HAL_RCC_OscConfig+0x36e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x334>
 8001b16:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4a69      	ldr	r2, [pc, #420]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	6213      	str	r3, [r2, #32]
 8001b22:	4b67      	ldr	r3, [pc, #412]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4a66      	ldr	r2, [pc, #408]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	6213      	str	r3, [r2, #32]
 8001b2e:	e01c      	b.n	8001b6a <HAL_RCC_OscConfig+0x36e>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	2b05      	cmp	r3, #5
 8001b36:	d10c      	bne.n	8001b52 <HAL_RCC_OscConfig+0x356>
 8001b38:	4b61      	ldr	r3, [pc, #388]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4a60      	ldr	r2, [pc, #384]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	6213      	str	r3, [r2, #32]
 8001b44:	4b5e      	ldr	r3, [pc, #376]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4a5d      	ldr	r2, [pc, #372]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6213      	str	r3, [r2, #32]
 8001b50:	e00b      	b.n	8001b6a <HAL_RCC_OscConfig+0x36e>
 8001b52:	4b5b      	ldr	r3, [pc, #364]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4a5a      	ldr	r2, [pc, #360]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	6213      	str	r3, [r2, #32]
 8001b5e:	4b58      	ldr	r3, [pc, #352]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	4a57      	ldr	r2, [pc, #348]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	f023 0304 	bic.w	r3, r3, #4
 8001b68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d015      	beq.n	8001b9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b72:	f7ff fb2b 	bl	80011cc <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b78:	e00a      	b.n	8001b90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7a:	f7ff fb27 	bl	80011cc <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e0b1      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b90:	4b4b      	ldr	r3, [pc, #300]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0ee      	beq.n	8001b7a <HAL_RCC_OscConfig+0x37e>
 8001b9c:	e014      	b.n	8001bc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9e:	f7ff fb15 	bl	80011cc <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7ff fb11 	bl	80011cc <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e09b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbc:	4b40      	ldr	r3, [pc, #256]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1ee      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bc8:	7dfb      	ldrb	r3, [r7, #23]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d105      	bne.n	8001bda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bce:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	4a3b      	ldr	r2, [pc, #236]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8087 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be4:	4b36      	ldr	r3, [pc, #216]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d061      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d146      	bne.n	8001c86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf8:	4b33      	ldr	r3, [pc, #204]	@ (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fae5 	bl	80011cc <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c06:	f7ff fae1 	bl	80011cc <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e06d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c18:	4b29      	ldr	r3, [pc, #164]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f0      	bne.n	8001c06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c2c:	d108      	bne.n	8001c40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c2e:	4b24      	ldr	r3, [pc, #144]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	4921      	ldr	r1, [pc, #132]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c40:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a19      	ldr	r1, [r3, #32]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c50:	430b      	orrs	r3, r1
 8001c52:	491b      	ldr	r1, [pc, #108]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c58:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fab5 	bl	80011cc <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c66:	f7ff fab1 	bl	80011cc <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e03d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c78:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x46a>
 8001c84:	e035      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff fa9e 	bl	80011cc <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c94:	f7ff fa9a 	bl	80011cc <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e026      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x498>
 8001cb2:	e01e      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d107      	bne.n	8001ccc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e019      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40007000 	.word	0x40007000
 8001cc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <HAL_RCC_OscConfig+0x500>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d106      	bne.n	8001cee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000

08001d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0d0      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d14:	4b6a      	ldr	r3, [pc, #424]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d910      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b67      	ldr	r3, [pc, #412]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 0207 	bic.w	r2, r3, #7
 8001d2a:	4965      	ldr	r1, [pc, #404]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b63      	ldr	r3, [pc, #396]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0b8      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d5c:	4b59      	ldr	r3, [pc, #356]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	4a58      	ldr	r2, [pc, #352]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d74:	4b53      	ldr	r3, [pc, #332]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4a52      	ldr	r2, [pc, #328]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d80:	4b50      	ldr	r3, [pc, #320]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	494d      	ldr	r1, [pc, #308]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d040      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b47      	ldr	r3, [pc, #284]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d115      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e07f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbe:	4b41      	ldr	r3, [pc, #260]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e073      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dce:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e06b      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dde:	4b39      	ldr	r3, [pc, #228]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f023 0203 	bic.w	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4936      	ldr	r1, [pc, #216]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df0:	f7ff f9ec 	bl	80011cc <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df8:	f7ff f9e8 	bl	80011cc <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e053      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 020c 	and.w	r2, r3, #12
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d1eb      	bne.n	8001df8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e20:	4b27      	ldr	r3, [pc, #156]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d210      	bcs.n	8001e50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b24      	ldr	r3, [pc, #144]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 0207 	bic.w	r2, r3, #7
 8001e36:	4922      	ldr	r1, [pc, #136]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e032      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4916      	ldr	r1, [pc, #88]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	490e      	ldr	r1, [pc, #56]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e8e:	f000 f821 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001e92:	4602      	mov	r2, r0
 8001e94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	490a      	ldr	r1, [pc, #40]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea0:	5ccb      	ldrb	r3, [r1, r3]
 8001ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea6:	4a09      	ldr	r2, [pc, #36]	@ (8001ecc <HAL_RCC_ClockConfig+0x1cc>)
 8001ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1d0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f94a 	bl	8001148 <HAL_InitTick>

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40022000 	.word	0x40022000
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	0800348c 	.word	0x0800348c
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001eee:	4b1e      	ldr	r3, [pc, #120]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d002      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x30>
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d003      	beq.n	8001f0a <HAL_RCC_GetSysClockFreq+0x36>
 8001f02:	e027      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f04:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001f06:	613b      	str	r3, [r7, #16]
      break;
 8001f08:	e027      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	0c9b      	lsrs	r3, r3, #18
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	4a17      	ldr	r2, [pc, #92]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f14:	5cd3      	ldrb	r3, [r2, r3]
 8001f16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d010      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f22:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	0c5b      	lsrs	r3, r3, #17
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	4a11      	ldr	r2, [pc, #68]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f2e:	5cd3      	ldrb	r3, [r2, r3]
 8001f30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a0d      	ldr	r2, [pc, #52]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001f36:	fb03 f202 	mul.w	r2, r3, r2
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	e004      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a0c      	ldr	r2, [pc, #48]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f48:	fb02 f303 	mul.w	r3, r2, r3
 8001f4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	613b      	str	r3, [r7, #16]
      break;
 8001f52:	e002      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f54:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001f56:	613b      	str	r3, [r7, #16]
      break;
 8001f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f5a:	693b      	ldr	r3, [r7, #16]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	371c      	adds	r7, #28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	007a1200 	.word	0x007a1200
 8001f70:	080034a4 	.word	0x080034a4
 8001f74:	080034b4 	.word	0x080034b4
 8001f78:	003d0900 	.word	0x003d0900

08001f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f80:	4b02      	ldr	r3, [pc, #8]	@ (8001f8c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	20000000 	.word	0x20000000

08001f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f94:	f7ff fff2 	bl	8001f7c <HAL_RCC_GetHCLKFreq>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4903      	ldr	r1, [pc, #12]	@ (8001fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	0800349c 	.word	0x0800349c

08001fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fbc:	f7ff ffde 	bl	8001f7c <HAL_RCC_GetHCLKFreq>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	0adb      	lsrs	r3, r3, #11
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	4903      	ldr	r1, [pc, #12]	@ (8001fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fce:	5ccb      	ldrb	r3, [r1, r3]
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	0800349c 	.word	0x0800349c

08001fe0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8002014 <RCC_Delay+0x34>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0a      	ldr	r2, [pc, #40]	@ (8002018 <RCC_Delay+0x38>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	0a5b      	lsrs	r3, r3, #9
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	fb02 f303 	mul.w	r3, r2, r3
 8001ffa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ffc:	bf00      	nop
  }
  while (Delay --);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1e5a      	subs	r2, r3, #1
 8002002:	60fa      	str	r2, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f9      	bne.n	8001ffc <RCC_Delay+0x1c>
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	20000000 	.word	0x20000000
 8002018:	10624dd3 	.word	0x10624dd3

0800201c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e041      	b.n	80020b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d106      	bne.n	8002048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe ff18 	bl	8000e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3304      	adds	r3, #4
 8002058:	4619      	mov	r1, r3
 800205a:	4610      	mov	r0, r2
 800205c:	f000 fca6 	bl	80029ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d001      	beq.n	80020d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e03c      	b.n	800214e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002158 <HAL_TIM_Base_Start+0x9c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d018      	beq.n	8002118 <HAL_TIM_Base_Start+0x5c>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a1c      	ldr	r2, [pc, #112]	@ (800215c <HAL_TIM_Base_Start+0xa0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d013      	beq.n	8002118 <HAL_TIM_Base_Start+0x5c>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020f8:	d00e      	beq.n	8002118 <HAL_TIM_Base_Start+0x5c>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a18      	ldr	r2, [pc, #96]	@ (8002160 <HAL_TIM_Base_Start+0xa4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d009      	beq.n	8002118 <HAL_TIM_Base_Start+0x5c>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a16      	ldr	r2, [pc, #88]	@ (8002164 <HAL_TIM_Base_Start+0xa8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d004      	beq.n	8002118 <HAL_TIM_Base_Start+0x5c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a15      	ldr	r2, [pc, #84]	@ (8002168 <HAL_TIM_Base_Start+0xac>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d111      	bne.n	800213c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b06      	cmp	r3, #6
 8002128:	d010      	beq.n	800214c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0201 	orr.w	r2, r2, #1
 8002138:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213a:	e007      	b.n	800214c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	40012c00 	.word	0x40012c00
 800215c:	40013400 	.word	0x40013400
 8002160:	40000400 	.word	0x40000400
 8002164:	40000800 	.word	0x40000800
 8002168:	40000c00 	.word	0x40000c00

0800216c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6a1a      	ldr	r2, [r3, #32]
 800217a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10f      	bne.n	80021a4 <HAL_TIM_Base_Stop+0x38>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6a1a      	ldr	r2, [r3, #32]
 800218a:	f240 4344 	movw	r3, #1092	@ 0x444
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d107      	bne.n	80021a4 <HAL_TIM_Base_Stop+0x38>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e041      	b.n	800224e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d106      	bne.n	80021e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f839 	bl	8002256 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3304      	adds	r3, #4
 80021f4:	4619      	mov	r1, r3
 80021f6:	4610      	mov	r0, r2
 80021f8:	f000 fbd8 	bl	80029ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d109      	bne.n	800228c <HAL_TIM_PWM_Start+0x24>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b01      	cmp	r3, #1
 8002282:	bf14      	ite	ne
 8002284:	2301      	movne	r3, #1
 8002286:	2300      	moveq	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	e022      	b.n	80022d2 <HAL_TIM_PWM_Start+0x6a>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2b04      	cmp	r3, #4
 8002290:	d109      	bne.n	80022a6 <HAL_TIM_PWM_Start+0x3e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	bf14      	ite	ne
 800229e:	2301      	movne	r3, #1
 80022a0:	2300      	moveq	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	e015      	b.n	80022d2 <HAL_TIM_PWM_Start+0x6a>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d109      	bne.n	80022c0 <HAL_TIM_PWM_Start+0x58>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	e008      	b.n	80022d2 <HAL_TIM_PWM_Start+0x6a>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	bf14      	ite	ne
 80022cc:	2301      	movne	r3, #1
 80022ce:	2300      	moveq	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e072      	b.n	80023c0 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d104      	bne.n	80022ea <HAL_TIM_PWM_Start+0x82>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022e8:	e013      	b.n	8002312 <HAL_TIM_PWM_Start+0xaa>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d104      	bne.n	80022fa <HAL_TIM_PWM_Start+0x92>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022f8:	e00b      	b.n	8002312 <HAL_TIM_PWM_Start+0xaa>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d104      	bne.n	800230a <HAL_TIM_PWM_Start+0xa2>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002308:	e003      	b.n	8002312 <HAL_TIM_PWM_Start+0xaa>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2202      	movs	r2, #2
 800230e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2201      	movs	r2, #1
 8002318:	6839      	ldr	r1, [r7, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fe9f 	bl	800305e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a28      	ldr	r2, [pc, #160]	@ (80023c8 <HAL_TIM_PWM_Start+0x160>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d004      	beq.n	8002334 <HAL_TIM_PWM_Start+0xcc>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a27      	ldr	r2, [pc, #156]	@ (80023cc <HAL_TIM_PWM_Start+0x164>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d101      	bne.n	8002338 <HAL_TIM_PWM_Start+0xd0>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_TIM_PWM_Start+0xd2>
 8002338:	2300      	movs	r3, #0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d007      	beq.n	800234e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800234c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a1d      	ldr	r2, [pc, #116]	@ (80023c8 <HAL_TIM_PWM_Start+0x160>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d018      	beq.n	800238a <HAL_TIM_PWM_Start+0x122>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1b      	ldr	r2, [pc, #108]	@ (80023cc <HAL_TIM_PWM_Start+0x164>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_TIM_PWM_Start+0x122>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800236a:	d00e      	beq.n	800238a <HAL_TIM_PWM_Start+0x122>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a17      	ldr	r2, [pc, #92]	@ (80023d0 <HAL_TIM_PWM_Start+0x168>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d009      	beq.n	800238a <HAL_TIM_PWM_Start+0x122>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a16      	ldr	r2, [pc, #88]	@ (80023d4 <HAL_TIM_PWM_Start+0x16c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d004      	beq.n	800238a <HAL_TIM_PWM_Start+0x122>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a14      	ldr	r2, [pc, #80]	@ (80023d8 <HAL_TIM_PWM_Start+0x170>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d111      	bne.n	80023ae <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b06      	cmp	r3, #6
 800239a:	d010      	beq.n	80023be <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ac:	e007      	b.n	80023be <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40012c00 	.word	0x40012c00
 80023cc:	40013400 	.word	0x40013400
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40000800 	.word	0x40000800
 80023d8:	40000c00 	.word	0x40000c00

080023dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d020      	beq.n	8002440 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01b      	beq.n	8002440 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0202 	mvn.w	r2, #2
 8002410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 faa5 	bl	8002976 <HAL_TIM_IC_CaptureCallback>
 800242c:	e005      	b.n	800243a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fa98 	bl	8002964 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 faa7 	bl	8002988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b00      	cmp	r3, #0
 8002448:	d020      	beq.n	800248c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01b      	beq.n	800248c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0204 	mvn.w	r2, #4
 800245c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2202      	movs	r2, #2
 8002462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fa7f 	bl	8002976 <HAL_TIM_IC_CaptureCallback>
 8002478:	e005      	b.n	8002486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fa72 	bl	8002964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 fa81 	bl	8002988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d020      	beq.n	80024d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01b      	beq.n	80024d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0208 	mvn.w	r2, #8
 80024a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2204      	movs	r2, #4
 80024ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fa59 	bl	8002976 <HAL_TIM_IC_CaptureCallback>
 80024c4:	e005      	b.n	80024d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fa4c 	bl	8002964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fa5b 	bl	8002988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d020      	beq.n	8002524 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d01b      	beq.n	8002524 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0210 	mvn.w	r2, #16
 80024f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2208      	movs	r2, #8
 80024fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fa33 	bl	8002976 <HAL_TIM_IC_CaptureCallback>
 8002510:	e005      	b.n	800251e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fa26 	bl	8002964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fa35 	bl	8002988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00c      	beq.n	8002548 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d007      	beq.n	8002548 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0201 	mvn.w	r2, #1
 8002540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fa05 	bl	8002952 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00c      	beq.n	800256c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fe13 	bl	8003192 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00c      	beq.n	8002590 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fa05 	bl	800299a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00c      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0220 	mvn.w	r2, #32
 80025ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fde6 	bl	8003180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e0ae      	b.n	8002738 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b0c      	cmp	r3, #12
 80025e6:	f200 809f 	bhi.w	8002728 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025ea:	a201      	add	r2, pc, #4	@ (adr r2, 80025f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f0:	08002625 	.word	0x08002625
 80025f4:	08002729 	.word	0x08002729
 80025f8:	08002729 	.word	0x08002729
 80025fc:	08002729 	.word	0x08002729
 8002600:	08002665 	.word	0x08002665
 8002604:	08002729 	.word	0x08002729
 8002608:	08002729 	.word	0x08002729
 800260c:	08002729 	.word	0x08002729
 8002610:	080026a7 	.word	0x080026a7
 8002614:	08002729 	.word	0x08002729
 8002618:	08002729 	.word	0x08002729
 800261c:	08002729 	.word	0x08002729
 8002620:	080026e7 	.word	0x080026e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	4618      	mov	r0, r3
 800262c:	f000 fa44 	bl	8002ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0208 	orr.w	r2, r2, #8
 800263e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0204 	bic.w	r2, r2, #4
 800264e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6999      	ldr	r1, [r3, #24]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	619a      	str	r2, [r3, #24]
      break;
 8002662:	e064      	b.n	800272e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fa94 	bl	8002b98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800267e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800268e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6999      	ldr	r1, [r3, #24]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	021a      	lsls	r2, r3, #8
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	619a      	str	r2, [r3, #24]
      break;
 80026a4:	e043      	b.n	800272e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fae7 	bl	8002c80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0208 	orr.w	r2, r2, #8
 80026c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69da      	ldr	r2, [r3, #28]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0204 	bic.w	r2, r2, #4
 80026d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69d9      	ldr	r1, [r3, #28]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	61da      	str	r2, [r3, #28]
      break;
 80026e4:	e023      	b.n	800272e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68b9      	ldr	r1, [r7, #8]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fb3b 	bl	8002d68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69da      	ldr	r2, [r3, #28]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69d9      	ldr	r1, [r3, #28]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	021a      	lsls	r2, r3, #8
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	61da      	str	r2, [r3, #28]
      break;
 8002726:	e002      	b.n	800272e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	75fb      	strb	r3, [r7, #23]
      break;
 800272c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002736:	7dfb      	ldrb	r3, [r7, #23]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_TIM_ConfigClockSource+0x1c>
 8002758:	2302      	movs	r3, #2
 800275a:	e0b4      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x186>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800277a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002794:	d03e      	beq.n	8002814 <HAL_TIM_ConfigClockSource+0xd4>
 8002796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800279a:	f200 8087 	bhi.w	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 800279e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027a2:	f000 8086 	beq.w	80028b2 <HAL_TIM_ConfigClockSource+0x172>
 80027a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027aa:	d87f      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027ac:	2b70      	cmp	r3, #112	@ 0x70
 80027ae:	d01a      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0xa6>
 80027b0:	2b70      	cmp	r3, #112	@ 0x70
 80027b2:	d87b      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027b4:	2b60      	cmp	r3, #96	@ 0x60
 80027b6:	d050      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x11a>
 80027b8:	2b60      	cmp	r3, #96	@ 0x60
 80027ba:	d877      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027bc:	2b50      	cmp	r3, #80	@ 0x50
 80027be:	d03c      	beq.n	800283a <HAL_TIM_ConfigClockSource+0xfa>
 80027c0:	2b50      	cmp	r3, #80	@ 0x50
 80027c2:	d873      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027c4:	2b40      	cmp	r3, #64	@ 0x40
 80027c6:	d058      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x13a>
 80027c8:	2b40      	cmp	r3, #64	@ 0x40
 80027ca:	d86f      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027cc:	2b30      	cmp	r3, #48	@ 0x30
 80027ce:	d064      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027d0:	2b30      	cmp	r3, #48	@ 0x30
 80027d2:	d86b      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d060      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d867      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d05c      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d05a      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027e4:	e062      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027f6:	f000 fc13 	bl	8003020 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002808:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	609a      	str	r2, [r3, #8]
      break;
 8002812:	e04f      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002824:	f000 fbfc 	bl	8003020 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002836:	609a      	str	r2, [r3, #8]
      break;
 8002838:	e03c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002846:	461a      	mov	r2, r3
 8002848:	f000 fb73 	bl	8002f32 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2150      	movs	r1, #80	@ 0x50
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fbca 	bl	8002fec <TIM_ITRx_SetConfig>
      break;
 8002858:	e02c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002866:	461a      	mov	r2, r3
 8002868:	f000 fb91 	bl	8002f8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2160      	movs	r1, #96	@ 0x60
 8002872:	4618      	mov	r0, r3
 8002874:	f000 fbba 	bl	8002fec <TIM_ITRx_SetConfig>
      break;
 8002878:	e01c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002886:	461a      	mov	r2, r3
 8002888:	f000 fb53 	bl	8002f32 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2140      	movs	r1, #64	@ 0x40
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fbaa 	bl	8002fec <TIM_ITRx_SetConfig>
      break;
 8002898:	e00c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f000 fba1 	bl	8002fec <TIM_ITRx_SetConfig>
      break;
 80028aa:	e003      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	73fb      	strb	r3, [r7, #15]
      break;
 80028b0:	e000      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e031      	b.n	800294a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2202      	movs	r2, #2
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80028f6:	6839      	ldr	r1, [r7, #0]
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 fa89 	bl	8002e10 <TIM_SlaveTimer_SetConfig>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d009      	beq.n	8002918 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e018      	b.n	800294a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002926:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002936:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a39      	ldr	r2, [pc, #228]	@ (8002aa4 <TIM_Base_SetConfig+0xf8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d013      	beq.n	80029ec <TIM_Base_SetConfig+0x40>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a38      	ldr	r2, [pc, #224]	@ (8002aa8 <TIM_Base_SetConfig+0xfc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00f      	beq.n	80029ec <TIM_Base_SetConfig+0x40>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d2:	d00b      	beq.n	80029ec <TIM_Base_SetConfig+0x40>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a35      	ldr	r2, [pc, #212]	@ (8002aac <TIM_Base_SetConfig+0x100>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d007      	beq.n	80029ec <TIM_Base_SetConfig+0x40>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a34      	ldr	r2, [pc, #208]	@ (8002ab0 <TIM_Base_SetConfig+0x104>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d003      	beq.n	80029ec <TIM_Base_SetConfig+0x40>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a33      	ldr	r2, [pc, #204]	@ (8002ab4 <TIM_Base_SetConfig+0x108>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d108      	bne.n	80029fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a28      	ldr	r2, [pc, #160]	@ (8002aa4 <TIM_Base_SetConfig+0xf8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <TIM_Base_SetConfig+0x82>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a27      	ldr	r2, [pc, #156]	@ (8002aa8 <TIM_Base_SetConfig+0xfc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00f      	beq.n	8002a2e <TIM_Base_SetConfig+0x82>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a14:	d00b      	beq.n	8002a2e <TIM_Base_SetConfig+0x82>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a24      	ldr	r2, [pc, #144]	@ (8002aac <TIM_Base_SetConfig+0x100>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <TIM_Base_SetConfig+0x82>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a23      	ldr	r2, [pc, #140]	@ (8002ab0 <TIM_Base_SetConfig+0x104>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d003      	beq.n	8002a2e <TIM_Base_SetConfig+0x82>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a22      	ldr	r2, [pc, #136]	@ (8002ab4 <TIM_Base_SetConfig+0x108>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d108      	bne.n	8002a40 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa4 <TIM_Base_SetConfig+0xf8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d003      	beq.n	8002a74 <TIM_Base_SetConfig+0xc8>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8002aa8 <TIM_Base_SetConfig+0xfc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d103      	bne.n	8002a7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f023 0201 	bic.w	r2, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	611a      	str	r2, [r3, #16]
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40013400 	.word	0x40013400
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	40000800 	.word	0x40000800
 8002ab4:	40000c00 	.word	0x40000c00

08002ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f023 0201 	bic.w	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0303 	bic.w	r3, r3, #3
 8002aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f023 0302 	bic.w	r3, r3, #2
 8002b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a20      	ldr	r2, [pc, #128]	@ (8002b90 <TIM_OC1_SetConfig+0xd8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d003      	beq.n	8002b1c <TIM_OC1_SetConfig+0x64>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a1f      	ldr	r2, [pc, #124]	@ (8002b94 <TIM_OC1_SetConfig+0xdc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d10c      	bne.n	8002b36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f023 0308 	bic.w	r3, r3, #8
 8002b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f023 0304 	bic.w	r3, r3, #4
 8002b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a15      	ldr	r2, [pc, #84]	@ (8002b90 <TIM_OC1_SetConfig+0xd8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d003      	beq.n	8002b46 <TIM_OC1_SetConfig+0x8e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a14      	ldr	r2, [pc, #80]	@ (8002b94 <TIM_OC1_SetConfig+0xdc>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d111      	bne.n	8002b6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	621a      	str	r2, [r3, #32]
}
 8002b84:	bf00      	nop
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40012c00 	.word	0x40012c00
 8002b94:	40013400 	.word	0x40013400

08002b98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f023 0210 	bic.w	r2, r3, #16
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f023 0320 	bic.w	r3, r3, #32
 8002be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a21      	ldr	r2, [pc, #132]	@ (8002c78 <TIM_OC2_SetConfig+0xe0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d003      	beq.n	8002c00 <TIM_OC2_SetConfig+0x68>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a20      	ldr	r2, [pc, #128]	@ (8002c7c <TIM_OC2_SetConfig+0xe4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d10d      	bne.n	8002c1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a16      	ldr	r2, [pc, #88]	@ (8002c78 <TIM_OC2_SetConfig+0xe0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d003      	beq.n	8002c2c <TIM_OC2_SetConfig+0x94>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a15      	ldr	r2, [pc, #84]	@ (8002c7c <TIM_OC2_SetConfig+0xe4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d113      	bne.n	8002c54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	621a      	str	r2, [r3, #32]
}
 8002c6e:	bf00      	nop
 8002c70:	371c      	adds	r7, #28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	40012c00 	.word	0x40012c00
 8002c7c:	40013400 	.word	0x40013400

08002c80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a21      	ldr	r2, [pc, #132]	@ (8002d60 <TIM_OC3_SetConfig+0xe0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d003      	beq.n	8002ce6 <TIM_OC3_SetConfig+0x66>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a20      	ldr	r2, [pc, #128]	@ (8002d64 <TIM_OC3_SetConfig+0xe4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d10d      	bne.n	8002d02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a16      	ldr	r2, [pc, #88]	@ (8002d60 <TIM_OC3_SetConfig+0xe0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d003      	beq.n	8002d12 <TIM_OC3_SetConfig+0x92>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a15      	ldr	r2, [pc, #84]	@ (8002d64 <TIM_OC3_SetConfig+0xe4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d113      	bne.n	8002d3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	621a      	str	r2, [r3, #32]
}
 8002d54:	bf00      	nop
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40012c00 	.word	0x40012c00
 8002d64:	40013400 	.word	0x40013400

08002d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002db2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	031b      	lsls	r3, r3, #12
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a11      	ldr	r2, [pc, #68]	@ (8002e08 <TIM_OC4_SetConfig+0xa0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d003      	beq.n	8002dd0 <TIM_OC4_SetConfig+0x68>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a10      	ldr	r2, [pc, #64]	@ (8002e0c <TIM_OC4_SetConfig+0xa4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d109      	bne.n	8002de4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	019b      	lsls	r3, r3, #6
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	621a      	str	r2, [r3, #32]
}
 8002dfe:	bf00      	nop
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	40012c00 	.word	0x40012c00
 8002e0c:	40013400 	.word	0x40013400

08002e10 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e2c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f023 0307 	bic.w	r3, r3, #7
 8002e3e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b70      	cmp	r3, #112	@ 0x70
 8002e58:	d01a      	beq.n	8002e90 <TIM_SlaveTimer_SetConfig+0x80>
 8002e5a:	2b70      	cmp	r3, #112	@ 0x70
 8002e5c:	d860      	bhi.n	8002f20 <TIM_SlaveTimer_SetConfig+0x110>
 8002e5e:	2b60      	cmp	r3, #96	@ 0x60
 8002e60:	d054      	beq.n	8002f0c <TIM_SlaveTimer_SetConfig+0xfc>
 8002e62:	2b60      	cmp	r3, #96	@ 0x60
 8002e64:	d85c      	bhi.n	8002f20 <TIM_SlaveTimer_SetConfig+0x110>
 8002e66:	2b50      	cmp	r3, #80	@ 0x50
 8002e68:	d046      	beq.n	8002ef8 <TIM_SlaveTimer_SetConfig+0xe8>
 8002e6a:	2b50      	cmp	r3, #80	@ 0x50
 8002e6c:	d858      	bhi.n	8002f20 <TIM_SlaveTimer_SetConfig+0x110>
 8002e6e:	2b40      	cmp	r3, #64	@ 0x40
 8002e70:	d019      	beq.n	8002ea6 <TIM_SlaveTimer_SetConfig+0x96>
 8002e72:	2b40      	cmp	r3, #64	@ 0x40
 8002e74:	d854      	bhi.n	8002f20 <TIM_SlaveTimer_SetConfig+0x110>
 8002e76:	2b30      	cmp	r3, #48	@ 0x30
 8002e78:	d055      	beq.n	8002f26 <TIM_SlaveTimer_SetConfig+0x116>
 8002e7a:	2b30      	cmp	r3, #48	@ 0x30
 8002e7c:	d850      	bhi.n	8002f20 <TIM_SlaveTimer_SetConfig+0x110>
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d051      	beq.n	8002f26 <TIM_SlaveTimer_SetConfig+0x116>
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d84c      	bhi.n	8002f20 <TIM_SlaveTimer_SetConfig+0x110>
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d04d      	beq.n	8002f26 <TIM_SlaveTimer_SetConfig+0x116>
 8002e8a:	2b10      	cmp	r3, #16
 8002e8c:	d04b      	beq.n	8002f26 <TIM_SlaveTimer_SetConfig+0x116>
 8002e8e:	e047      	b.n	8002f20 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002ea0:	f000 f8be 	bl	8003020 <TIM_ETR_SetConfig>
      break;
 8002ea4:	e040      	b.n	8002f28 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b05      	cmp	r3, #5
 8002eac:	d101      	bne.n	8002eb2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e03b      	b.n	8002f2a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6a1a      	ldr	r2, [r3, #32]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0201 	bic.w	r2, r2, #1
 8002ec8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ed8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	621a      	str	r2, [r3, #32]
      break;
 8002ef6:	e017      	b.n	8002f28 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f04:	461a      	mov	r2, r3
 8002f06:	f000 f814 	bl	8002f32 <TIM_TI1_ConfigInputStage>
      break;
 8002f0a:	e00d      	b.n	8002f28 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f000 f838 	bl	8002f8e <TIM_TI2_ConfigInputStage>
      break;
 8002f1e:	e003      	b.n	8002f28 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	75fb      	strb	r3, [r7, #23]
      break;
 8002f24:	e000      	b.n	8002f28 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002f26:	bf00      	nop
  }

  return status;
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b087      	sub	sp, #28
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f023 0201 	bic.w	r2, r3, #1
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f023 030a 	bic.w	r3, r3, #10
 8002f6e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	621a      	str	r2, [r3, #32]
}
 8002f84:	bf00      	nop
 8002f86:	371c      	adds	r7, #28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b087      	sub	sp, #28
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f023 0210 	bic.w	r2, r3, #16
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	031b      	lsls	r3, r3, #12
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	621a      	str	r2, [r3, #32]
}
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003002:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	f043 0307 	orr.w	r3, r3, #7
 800300e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	609a      	str	r2, [r3, #8]
}
 8003016:	bf00      	nop
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800303a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	021a      	lsls	r2, r3, #8
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	431a      	orrs	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4313      	orrs	r3, r2
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	609a      	str	r2, [r3, #8]
}
 8003054:	bf00      	nop
 8003056:	371c      	adds	r7, #28
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800305e:	b480      	push	{r7}
 8003060:	b087      	sub	sp, #28
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	2201      	movs	r2, #1
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a1a      	ldr	r2, [r3, #32]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	43db      	mvns	r3, r3
 8003080:	401a      	ands	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a1a      	ldr	r2, [r3, #32]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	431a      	orrs	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	621a      	str	r2, [r3, #32]
}
 800309c:	bf00      	nop
 800309e:	371c      	adds	r7, #28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr
	...

080030a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030bc:	2302      	movs	r3, #2
 80030be:	e050      	b.n	8003162 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1b      	ldr	r2, [pc, #108]	@ (800316c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d018      	beq.n	8003136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a19      	ldr	r2, [pc, #100]	@ (8003170 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003116:	d00e      	beq.n	8003136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a15      	ldr	r2, [pc, #84]	@ (8003174 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d009      	beq.n	8003136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a14      	ldr	r2, [pc, #80]	@ (8003178 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d004      	beq.n	8003136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a12      	ldr	r2, [pc, #72]	@ (800317c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d10c      	bne.n	8003150 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800313c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	4313      	orrs	r3, r2
 8003146:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	40012c00 	.word	0x40012c00
 8003170:	40013400 	.word	0x40013400
 8003174:	40000400 	.word	0x40000400
 8003178:	40000800 	.word	0x40000800
 800317c:	40000c00 	.word	0x40000c00

08003180 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr

080031a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e042      	b.n	800323c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fd ff34 	bl	8001038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2224      	movs	r2, #36	@ 0x24
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f889 	bl	8003300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800320c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800321c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b20      	cmp	r3, #32
 800325c:	d112      	bne.n	8003284 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_UART_Receive_IT+0x26>
 8003264:	88fb      	ldrh	r3, [r7, #6]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e00b      	b.n	8003286 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	461a      	mov	r2, r3
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f807 	bl	800328e <UART_Start_Receive_IT>
 8003280:	4603      	mov	r3, r0
 8003282:	e000      	b.n	8003286 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003284:	2302      	movs	r3, #2
  }
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800328e:	b480      	push	{r7}
 8003290:	b085      	sub	sp, #20
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	4613      	mov	r3, r2
 800329a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	88fa      	ldrh	r2, [r7, #6]
 80032a6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	88fa      	ldrh	r2, [r7, #6]
 80032ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2222      	movs	r2, #34	@ 0x22
 80032b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d007      	beq.n	80032d4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032d2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0220 	orr.w	r2, r2, #32
 80032f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr

08003300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800333a:	f023 030c 	bic.w	r3, r3, #12
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6812      	ldr	r2, [r2, #0]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	430b      	orrs	r3, r1
 8003346:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a2c      	ldr	r2, [pc, #176]	@ (8003414 <UART_SetConfig+0x114>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d103      	bne.n	8003370 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003368:	f7fe fe26 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	e002      	b.n	8003376 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003370:	f7fe fe0e 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 8003374:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	009a      	lsls	r2, r3, #2
 8003380:	441a      	add	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	fbb2 f3f3 	udiv	r3, r2, r3
 800338c:	4a22      	ldr	r2, [pc, #136]	@ (8003418 <UART_SetConfig+0x118>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	0119      	lsls	r1, r3, #4
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	009a      	lsls	r2, r3, #2
 80033a0:	441a      	add	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003418 <UART_SetConfig+0x118>)
 80033ae:	fba3 0302 	umull	r0, r3, r3, r2
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2064      	movs	r0, #100	@ 0x64
 80033b6:	fb00 f303 	mul.w	r3, r0, r3
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	3332      	adds	r3, #50	@ 0x32
 80033c0:	4a15      	ldr	r2, [pc, #84]	@ (8003418 <UART_SetConfig+0x118>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033cc:	4419      	add	r1, r3
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	009a      	lsls	r2, r3, #2
 80033d8:	441a      	add	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003418 <UART_SetConfig+0x118>)
 80033e6:	fba3 0302 	umull	r0, r3, r3, r2
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	2064      	movs	r0, #100	@ 0x64
 80033ee:	fb00 f303 	mul.w	r3, r0, r3
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	3332      	adds	r3, #50	@ 0x32
 80033f8:	4a07      	ldr	r2, [pc, #28]	@ (8003418 <UART_SetConfig+0x118>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	f003 020f 	and.w	r2, r3, #15
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	440a      	add	r2, r1
 800340a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800340c:	bf00      	nop
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40013800 	.word	0x40013800
 8003418:	51eb851f 	.word	0x51eb851f

0800341c <memset>:
 800341c:	4603      	mov	r3, r0
 800341e:	4402      	add	r2, r0
 8003420:	4293      	cmp	r3, r2
 8003422:	d100      	bne.n	8003426 <memset+0xa>
 8003424:	4770      	bx	lr
 8003426:	f803 1b01 	strb.w	r1, [r3], #1
 800342a:	e7f9      	b.n	8003420 <memset+0x4>

0800342c <__libc_init_array>:
 800342c:	b570      	push	{r4, r5, r6, lr}
 800342e:	2600      	movs	r6, #0
 8003430:	4d0c      	ldr	r5, [pc, #48]	@ (8003464 <__libc_init_array+0x38>)
 8003432:	4c0d      	ldr	r4, [pc, #52]	@ (8003468 <__libc_init_array+0x3c>)
 8003434:	1b64      	subs	r4, r4, r5
 8003436:	10a4      	asrs	r4, r4, #2
 8003438:	42a6      	cmp	r6, r4
 800343a:	d109      	bne.n	8003450 <__libc_init_array+0x24>
 800343c:	f000 f81a 	bl	8003474 <_init>
 8003440:	2600      	movs	r6, #0
 8003442:	4d0a      	ldr	r5, [pc, #40]	@ (800346c <__libc_init_array+0x40>)
 8003444:	4c0a      	ldr	r4, [pc, #40]	@ (8003470 <__libc_init_array+0x44>)
 8003446:	1b64      	subs	r4, r4, r5
 8003448:	10a4      	asrs	r4, r4, #2
 800344a:	42a6      	cmp	r6, r4
 800344c:	d105      	bne.n	800345a <__libc_init_array+0x2e>
 800344e:	bd70      	pop	{r4, r5, r6, pc}
 8003450:	f855 3b04 	ldr.w	r3, [r5], #4
 8003454:	4798      	blx	r3
 8003456:	3601      	adds	r6, #1
 8003458:	e7ee      	b.n	8003438 <__libc_init_array+0xc>
 800345a:	f855 3b04 	ldr.w	r3, [r5], #4
 800345e:	4798      	blx	r3
 8003460:	3601      	adds	r6, #1
 8003462:	e7f2      	b.n	800344a <__libc_init_array+0x1e>
 8003464:	080034b8 	.word	0x080034b8
 8003468:	080034b8 	.word	0x080034b8
 800346c:	080034b8 	.word	0x080034b8
 8003470:	080034bc 	.word	0x080034bc

08003474 <_init>:
 8003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003476:	bf00      	nop
 8003478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347a:	bc08      	pop	{r3}
 800347c:	469e      	mov	lr, r3
 800347e:	4770      	bx	lr

08003480 <_fini>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	bf00      	nop
 8003484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003486:	bc08      	pop	{r3}
 8003488:	469e      	mov	lr, r3
 800348a:	4770      	bx	lr
