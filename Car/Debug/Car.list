
car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f10  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080050f8  080050f8  000060f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005124  08005124  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  08005124  08005124  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005124  08005124  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005124  08005124  00006124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005128  08005128  00006128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800512c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000010  0800513c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  0800513c  000071a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5b2  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002788  00000000  00000000  000155eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00017d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8d  00000000  00000000  00018b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a722  00000000  00000000  00019595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001249d  00000000  00000000  00033cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000985bb  00000000  00000000  00046154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de70f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003890  00000000  00000000  000de754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e1fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000010 	.word	0x20000010
 8000204:	00000000 	.word	0x00000000
 8000208:	080050e0 	.word	0x080050e0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000014 	.word	0x20000014
 8000224:	080050e0 	.word	0x080050e0

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <__aeabi_frsub>:
 8000a04:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a08:	e002      	b.n	8000a10 <__addsf3>
 8000a0a:	bf00      	nop

08000a0c <__aeabi_fsub>:
 8000a0c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a10 <__addsf3>:
 8000a10:	0042      	lsls	r2, r0, #1
 8000a12:	bf1f      	itttt	ne
 8000a14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a18:	ea92 0f03 	teqne	r2, r3
 8000a1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a24:	d06a      	beq.n	8000afc <__addsf3+0xec>
 8000a26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a2e:	bfc1      	itttt	gt
 8000a30:	18d2      	addgt	r2, r2, r3
 8000a32:	4041      	eorgt	r1, r0
 8000a34:	4048      	eorgt	r0, r1
 8000a36:	4041      	eorgt	r1, r0
 8000a38:	bfb8      	it	lt
 8000a3a:	425b      	neglt	r3, r3
 8000a3c:	2b19      	cmp	r3, #25
 8000a3e:	bf88      	it	hi
 8000a40:	4770      	bxhi	lr
 8000a42:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a46:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a4a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a56:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a5a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4249      	negne	r1, r1
 8000a62:	ea92 0f03 	teq	r2, r3
 8000a66:	d03f      	beq.n	8000ae8 <__addsf3+0xd8>
 8000a68:	f1a2 0201 	sub.w	r2, r2, #1
 8000a6c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a70:	eb10 000c 	adds.w	r0, r0, ip
 8000a74:	f1c3 0320 	rsb	r3, r3, #32
 8000a78:	fa01 f103 	lsl.w	r1, r1, r3
 8000a7c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a80:	d502      	bpl.n	8000a88 <__addsf3+0x78>
 8000a82:	4249      	negs	r1, r1
 8000a84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a88:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a8c:	d313      	bcc.n	8000ab6 <__addsf3+0xa6>
 8000a8e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a92:	d306      	bcc.n	8000aa2 <__addsf3+0x92>
 8000a94:	0840      	lsrs	r0, r0, #1
 8000a96:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a9a:	f102 0201 	add.w	r2, r2, #1
 8000a9e:	2afe      	cmp	r2, #254	@ 0xfe
 8000aa0:	d251      	bcs.n	8000b46 <__addsf3+0x136>
 8000aa2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000aa6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aaa:	bf08      	it	eq
 8000aac:	f020 0001 	biceq.w	r0, r0, #1
 8000ab0:	ea40 0003 	orr.w	r0, r0, r3
 8000ab4:	4770      	bx	lr
 8000ab6:	0049      	lsls	r1, r1, #1
 8000ab8:	eb40 0000 	adc.w	r0, r0, r0
 8000abc:	3a01      	subs	r2, #1
 8000abe:	bf28      	it	cs
 8000ac0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000ac4:	d2ed      	bcs.n	8000aa2 <__addsf3+0x92>
 8000ac6:	fab0 fc80 	clz	ip, r0
 8000aca:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ace:	ebb2 020c 	subs.w	r2, r2, ip
 8000ad2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ad6:	bfaa      	itet	ge
 8000ad8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000adc:	4252      	neglt	r2, r2
 8000ade:	4318      	orrge	r0, r3
 8000ae0:	bfbc      	itt	lt
 8000ae2:	40d0      	lsrlt	r0, r2
 8000ae4:	4318      	orrlt	r0, r3
 8000ae6:	4770      	bx	lr
 8000ae8:	f092 0f00 	teq	r2, #0
 8000aec:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000af0:	bf06      	itte	eq
 8000af2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000af6:	3201      	addeq	r2, #1
 8000af8:	3b01      	subne	r3, #1
 8000afa:	e7b5      	b.n	8000a68 <__addsf3+0x58>
 8000afc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b04:	bf18      	it	ne
 8000b06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0a:	d021      	beq.n	8000b50 <__addsf3+0x140>
 8000b0c:	ea92 0f03 	teq	r2, r3
 8000b10:	d004      	beq.n	8000b1c <__addsf3+0x10c>
 8000b12:	f092 0f00 	teq	r2, #0
 8000b16:	bf08      	it	eq
 8000b18:	4608      	moveq	r0, r1
 8000b1a:	4770      	bx	lr
 8000b1c:	ea90 0f01 	teq	r0, r1
 8000b20:	bf1c      	itt	ne
 8000b22:	2000      	movne	r0, #0
 8000b24:	4770      	bxne	lr
 8000b26:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b2a:	d104      	bne.n	8000b36 <__addsf3+0x126>
 8000b2c:	0040      	lsls	r0, r0, #1
 8000b2e:	bf28      	it	cs
 8000b30:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b34:	4770      	bx	lr
 8000b36:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b3a:	bf3c      	itt	cc
 8000b3c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b40:	4770      	bxcc	lr
 8000b42:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b46:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4e:	4770      	bx	lr
 8000b50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b54:	bf16      	itet	ne
 8000b56:	4608      	movne	r0, r1
 8000b58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b5c:	4601      	movne	r1, r0
 8000b5e:	0242      	lsls	r2, r0, #9
 8000b60:	bf06      	itte	eq
 8000b62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b66:	ea90 0f01 	teqeq	r0, r1
 8000b6a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_ui2f>:
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	e004      	b.n	8000b80 <__aeabi_i2f+0x8>
 8000b76:	bf00      	nop

08000b78 <__aeabi_i2f>:
 8000b78:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b7c:	bf48      	it	mi
 8000b7e:	4240      	negmi	r0, r0
 8000b80:	ea5f 0c00 	movs.w	ip, r0
 8000b84:	bf08      	it	eq
 8000b86:	4770      	bxeq	lr
 8000b88:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b8c:	4601      	mov	r1, r0
 8000b8e:	f04f 0000 	mov.w	r0, #0
 8000b92:	e01c      	b.n	8000bce <__aeabi_l2f+0x2a>

08000b94 <__aeabi_ul2f>:
 8000b94:	ea50 0201 	orrs.w	r2, r0, r1
 8000b98:	bf08      	it	eq
 8000b9a:	4770      	bxeq	lr
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	e00a      	b.n	8000bb8 <__aeabi_l2f+0x14>
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_l2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000bb0:	d502      	bpl.n	8000bb8 <__aeabi_l2f+0x14>
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	ea5f 0c01 	movs.w	ip, r1
 8000bbc:	bf02      	ittt	eq
 8000bbe:	4684      	moveq	ip, r0
 8000bc0:	4601      	moveq	r1, r0
 8000bc2:	2000      	moveq	r0, #0
 8000bc4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000bc8:	bf08      	it	eq
 8000bca:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000bce:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000bd2:	fabc f28c 	clz	r2, ip
 8000bd6:	3a08      	subs	r2, #8
 8000bd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bdc:	db10      	blt.n	8000c00 <__aeabi_l2f+0x5c>
 8000bde:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be2:	4463      	add	r3, ip
 8000be4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000be8:	f1c2 0220 	rsb	r2, r2, #32
 8000bec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bf0:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf4:	eb43 0002 	adc.w	r0, r3, r2
 8000bf8:	bf08      	it	eq
 8000bfa:	f020 0001 	biceq.w	r0, r0, #1
 8000bfe:	4770      	bx	lr
 8000c00:	f102 0220 	add.w	r2, r2, #32
 8000c04:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c08:	f1c2 0220 	rsb	r2, r2, #32
 8000c0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c10:	fa21 f202 	lsr.w	r2, r1, r2
 8000c14:	eb43 0002 	adc.w	r0, r3, r2
 8000c18:	bf08      	it	eq
 8000c1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_fmul>:
 8000c20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c28:	bf1e      	ittt	ne
 8000c2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c2e:	ea92 0f0c 	teqne	r2, ip
 8000c32:	ea93 0f0c 	teqne	r3, ip
 8000c36:	d06f      	beq.n	8000d18 <__aeabi_fmul+0xf8>
 8000c38:	441a      	add	r2, r3
 8000c3a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c3e:	0240      	lsls	r0, r0, #9
 8000c40:	bf18      	it	ne
 8000c42:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c46:	d01e      	beq.n	8000c86 <__aeabi_fmul+0x66>
 8000c48:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c4c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c50:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c54:	fba0 3101 	umull	r3, r1, r0, r1
 8000c58:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c5c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c60:	bf3e      	ittt	cc
 8000c62:	0049      	lslcc	r1, r1, #1
 8000c64:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c68:	005b      	lslcc	r3, r3, #1
 8000c6a:	ea40 0001 	orr.w	r0, r0, r1
 8000c6e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c72:	2afd      	cmp	r2, #253	@ 0xfd
 8000c74:	d81d      	bhi.n	8000cb2 <__aeabi_fmul+0x92>
 8000c76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c7e:	bf08      	it	eq
 8000c80:	f020 0001 	biceq.w	r0, r0, #1
 8000c84:	4770      	bx	lr
 8000c86:	f090 0f00 	teq	r0, #0
 8000c8a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c8e:	bf08      	it	eq
 8000c90:	0249      	lsleq	r1, r1, #9
 8000c92:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c96:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c9a:	3a7f      	subs	r2, #127	@ 0x7f
 8000c9c:	bfc2      	ittt	gt
 8000c9e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ca2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ca6:	4770      	bxgt	lr
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	dc5d      	bgt.n	8000d70 <__aeabi_fmul+0x150>
 8000cb4:	f112 0f19 	cmn.w	r2, #25
 8000cb8:	bfdc      	itt	le
 8000cba:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000cbe:	4770      	bxle	lr
 8000cc0:	f1c2 0200 	rsb	r2, r2, #0
 8000cc4:	0041      	lsls	r1, r0, #1
 8000cc6:	fa21 f102 	lsr.w	r1, r1, r2
 8000cca:	f1c2 0220 	rsb	r2, r2, #32
 8000cce:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cd6:	f140 0000 	adc.w	r0, r0, #0
 8000cda:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cde:	bf08      	it	eq
 8000ce0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce4:	4770      	bx	lr
 8000ce6:	f092 0f00 	teq	r2, #0
 8000cea:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cee:	bf02      	ittt	eq
 8000cf0:	0040      	lsleq	r0, r0, #1
 8000cf2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cf6:	3a01      	subeq	r2, #1
 8000cf8:	d0f9      	beq.n	8000cee <__aeabi_fmul+0xce>
 8000cfa:	ea40 000c 	orr.w	r0, r0, ip
 8000cfe:	f093 0f00 	teq	r3, #0
 8000d02:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d06:	bf02      	ittt	eq
 8000d08:	0049      	lsleq	r1, r1, #1
 8000d0a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d0e:	3b01      	subeq	r3, #1
 8000d10:	d0f9      	beq.n	8000d06 <__aeabi_fmul+0xe6>
 8000d12:	ea41 010c 	orr.w	r1, r1, ip
 8000d16:	e78f      	b.n	8000c38 <__aeabi_fmul+0x18>
 8000d18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	bf18      	it	ne
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d00a      	beq.n	8000d3e <__aeabi_fmul+0x11e>
 8000d28:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d2c:	bf18      	it	ne
 8000d2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d32:	d1d8      	bne.n	8000ce6 <__aeabi_fmul+0xc6>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d3c:	4770      	bx	lr
 8000d3e:	f090 0f00 	teq	r0, #0
 8000d42:	bf17      	itett	ne
 8000d44:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d48:	4608      	moveq	r0, r1
 8000d4a:	f091 0f00 	teqne	r1, #0
 8000d4e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d52:	d014      	beq.n	8000d7e <__aeabi_fmul+0x15e>
 8000d54:	ea92 0f0c 	teq	r2, ip
 8000d58:	d101      	bne.n	8000d5e <__aeabi_fmul+0x13e>
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	d10f      	bne.n	8000d7e <__aeabi_fmul+0x15e>
 8000d5e:	ea93 0f0c 	teq	r3, ip
 8000d62:	d103      	bne.n	8000d6c <__aeabi_fmul+0x14c>
 8000d64:	024b      	lsls	r3, r1, #9
 8000d66:	bf18      	it	ne
 8000d68:	4608      	movne	r0, r1
 8000d6a:	d108      	bne.n	8000d7e <__aeabi_fmul+0x15e>
 8000d6c:	ea80 0001 	eor.w	r0, r0, r1
 8000d70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d74:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d78:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d7c:	4770      	bx	lr
 8000d7e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d82:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_fdiv>:
 8000d88:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d90:	bf1e      	ittt	ne
 8000d92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d96:	ea92 0f0c 	teqne	r2, ip
 8000d9a:	ea93 0f0c 	teqne	r3, ip
 8000d9e:	d069      	beq.n	8000e74 <__aeabi_fdiv+0xec>
 8000da0:	eba2 0203 	sub.w	r2, r2, r3
 8000da4:	ea80 0c01 	eor.w	ip, r0, r1
 8000da8:	0249      	lsls	r1, r1, #9
 8000daa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dae:	d037      	beq.n	8000e20 <__aeabi_fdiv+0x98>
 8000db0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000db4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000db8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	bf38      	it	cc
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000dca:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	bf24      	itt	cs
 8000dd2:	1a5b      	subcs	r3, r3, r1
 8000dd4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dd8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ddc:	bf24      	itt	cs
 8000dde:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000de2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000de6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dea:	bf24      	itt	cs
 8000dec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000df0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000df4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000df8:	bf24      	itt	cs
 8000dfa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dfe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	bf18      	it	ne
 8000e06:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e0a:	d1e0      	bne.n	8000dce <__aeabi_fdiv+0x46>
 8000e0c:	2afd      	cmp	r2, #253	@ 0xfd
 8000e0e:	f63f af50 	bhi.w	8000cb2 <__aeabi_fmul+0x92>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e18:	bf08      	it	eq
 8000e1a:	f020 0001 	biceq.w	r0, r0, #1
 8000e1e:	4770      	bx	lr
 8000e20:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e24:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e28:	327f      	adds	r2, #127	@ 0x7f
 8000e2a:	bfc2      	ittt	gt
 8000e2c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e30:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e34:	4770      	bxgt	lr
 8000e36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	3a01      	subs	r2, #1
 8000e40:	e737      	b.n	8000cb2 <__aeabi_fmul+0x92>
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fdiv+0xc2>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fdiv+0xda>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e795      	b.n	8000da0 <__aeabi_fdiv+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d108      	bne.n	8000e90 <__aeabi_fdiv+0x108>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	f47f af7d 	bne.w	8000d7e <__aeabi_fmul+0x15e>
 8000e84:	ea93 0f0c 	teq	r3, ip
 8000e88:	f47f af70 	bne.w	8000d6c <__aeabi_fmul+0x14c>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e776      	b.n	8000d7e <__aeabi_fmul+0x15e>
 8000e90:	ea93 0f0c 	teq	r3, ip
 8000e94:	d104      	bne.n	8000ea0 <__aeabi_fdiv+0x118>
 8000e96:	024b      	lsls	r3, r1, #9
 8000e98:	f43f af4c 	beq.w	8000d34 <__aeabi_fmul+0x114>
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e76e      	b.n	8000d7e <__aeabi_fmul+0x15e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eaa:	d1ca      	bne.n	8000e42 <__aeabi_fdiv+0xba>
 8000eac:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000eb0:	f47f af5c 	bne.w	8000d6c <__aeabi_fmul+0x14c>
 8000eb4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000eb8:	f47f af3c 	bne.w	8000d34 <__aeabi_fmul+0x114>
 8000ebc:	e75f      	b.n	8000d7e <__aeabi_fmul+0x15e>
 8000ebe:	bf00      	nop

08000ec0 <__aeabi_f2uiz>:
 8000ec0:	0042      	lsls	r2, r0, #1
 8000ec2:	d20e      	bcs.n	8000ee2 <__aeabi_f2uiz+0x22>
 8000ec4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ec8:	d30b      	bcc.n	8000ee2 <__aeabi_f2uiz+0x22>
 8000eca:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ece:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ed2:	d409      	bmi.n	8000ee8 <__aeabi_f2uiz+0x28>
 8000ed4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ed8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000edc:	fa23 f002 	lsr.w	r0, r3, r2
 8000ee0:	4770      	bx	lr
 8000ee2:	f04f 0000 	mov.w	r0, #0
 8000ee6:	4770      	bx	lr
 8000ee8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_f2uiz+0x32>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d102      	bne.n	8000ef8 <__aeabi_f2uiz+0x38>
 8000ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef6:	4770      	bx	lr
 8000ef8:	f04f 0000 	mov.w	r0, #0
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <SetOperationMode>:
extern TIM_HandleTypeDef htim4;

// Mode management
static uint8_t current_mode = MODE_MANUAL;

void SetOperationMode(uint8_t mode) {
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
    if (mode <= MODE_LINE_TRACK) {
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d802      	bhi.n	8000f16 <SetOperationMode+0x16>
        current_mode = mode;
 8000f10:	4a03      	ldr	r2, [pc, #12]	@ (8000f20 <SetOperationMode+0x20>)
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	7013      	strb	r3, [r2, #0]
    }
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	20000000 	.word	0x20000000

08000f24 <SendModeChangeAck>:
    pkg.checksum = CalculateChecksum(&pkg);
    
    UART_SendPackage(&pkg);
}

void SendModeChangeAck(uint8_t mode) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08c      	sub	sp, #48	@ 0x30
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
    UART_Package_t pkg;
    
    pkg.header = FRAME_HEADER;
 8000f2e:	23aa      	movs	r3, #170	@ 0xaa
 8000f30:	733b      	strb	r3, [r7, #12]
    pkg.cmd_type = CMD_STATUS;
 8000f32:	2304      	movs	r3, #4
 8000f34:	737b      	strb	r3, [r7, #13]
    pkg.data_len = 2;
 8000f36:	2302      	movs	r3, #2
 8000f38:	73bb      	strb	r3, [r7, #14]
    pkg.data[0] = 0x01; // Status type: mode change ack
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
    pkg.data[1] = mode; // New mode
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	743b      	strb	r3, [r7, #16]
    pkg.checksum = CalculateChecksum(&pkg);
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f86d 	bl	8001026 <CalculateChecksum>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    
    UART_SendPackage(&pkg);
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f8a6 	bl	80010a8 <UART_SendPackage>
}
 8000f5c:	bf00      	nop
 8000f5e:	3730      	adds	r7, #48	@ 0x30
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <ProcessReceivedPackage>:
    
    UART_SendPackage(&pkg);
}

// Functions for Car Board
void ProcessReceivedPackage(UART_Package_t* pkg) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    if (VerifyChecksum(pkg) != 0) {
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f884 	bl	800107a <VerifyChecksum>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d121      	bne.n	8000fbc <ProcessReceivedPackage+0x58>
        return; // Invalid package
    }
    
    switch(pkg->cmd_type) {
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	785b      	ldrb	r3, [r3, #1]
 8000f7c:	2b05      	cmp	r3, #5
 8000f7e:	d010      	beq.n	8000fa2 <ProcessReceivedPackage+0x3e>
 8000f80:	2b05      	cmp	r3, #5
 8000f82:	dc1d      	bgt.n	8000fc0 <ProcessReceivedPackage+0x5c>
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d002      	beq.n	8000f8e <ProcessReceivedPackage+0x2a>
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d01b      	beq.n	8000fc4 <ProcessReceivedPackage+0x60>
            StopMotion();
            // Send mode change acknowledgment
            SendModeChangeAck(pkg->data[0]);
            break;
        default:
            break;
 8000f8c:	e018      	b.n	8000fc0 <ProcessReceivedPackage+0x5c>
            if (current_mode == MODE_MANUAL) {
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <ProcessReceivedPackage+0x6c>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d118      	bne.n	8000fc8 <ProcessReceivedPackage+0x64>
                ProcessMotionCmd(pkg->data[0]);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	78db      	ldrb	r3, [r3, #3]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f8bc 	bl	8001118 <ProcessMotionCmd>
            break;
 8000fa0:	e012      	b.n	8000fc8 <ProcessReceivedPackage+0x64>
            SetOperationMode(pkg->data[0]);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	78db      	ldrb	r3, [r3, #3]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ffaa 	bl	8000f00 <SetOperationMode>
            StopMotion();
 8000fac:	f000 f944 	bl	8001238 <StopMotion>
            SendModeChangeAck(pkg->data[0]);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	78db      	ldrb	r3, [r3, #3]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ffb5 	bl	8000f24 <SendModeChangeAck>
            break;
 8000fba:	e006      	b.n	8000fca <ProcessReceivedPackage+0x66>
        return; // Invalid package
 8000fbc:	bf00      	nop
 8000fbe:	e004      	b.n	8000fca <ProcessReceivedPackage+0x66>
            break;
 8000fc0:	bf00      	nop
 8000fc2:	e002      	b.n	8000fca <ProcessReceivedPackage+0x66>
            break;
 8000fc4:	bf00      	nop
 8000fc6:	e000      	b.n	8000fca <ProcessReceivedPackage+0x66>
            break;
 8000fc8:	bf00      	nop
    }
}
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <SendDistanceData>:

void SendDistanceData(float distance) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08c      	sub	sp, #48	@ 0x30
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
    UART_Package_t pkg;
    
    pkg.header = FRAME_HEADER;
 8000fdc:	23aa      	movs	r3, #170	@ 0xaa
 8000fde:	723b      	strb	r3, [r7, #8]
    pkg.cmd_type = CMD_DISTANCE;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	727b      	strb	r3, [r7, #9]
    pkg.data_len = 4;  // Float is 4 bytes
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	72bb      	strb	r3, [r7, #10]
    
    // Convert float to bytes
    uint8_t* float_bytes = (uint8_t*)&distance;
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pkg.data[0] = float_bytes[0];  // Byte 0 
 8000fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	72fb      	strb	r3, [r7, #11]
    pkg.data[1] = float_bytes[1];  // Byte 1
 8000ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ff4:	785b      	ldrb	r3, [r3, #1]
 8000ff6:	733b      	strb	r3, [r7, #12]
    pkg.data[2] = float_bytes[2];  // Byte 2
 8000ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ffa:	789b      	ldrb	r3, [r3, #2]
 8000ffc:	737b      	strb	r3, [r7, #13]
    pkg.data[3] = float_bytes[3];  // Byte 3
 8000ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001000:	78db      	ldrb	r3, [r3, #3]
 8001002:	73bb      	strb	r3, [r7, #14]
    
    pkg.checksum = CalculateChecksum(&pkg);
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f80c 	bl	8001026 <CalculateChecksum>
 800100e:	4603      	mov	r3, r0
 8001010:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    
    UART_SendPackage(&pkg);
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f845 	bl	80010a8 <UART_SendPackage>
}
 800101e:	bf00      	nop
 8001020:	3730      	adds	r7, #48	@ 0x30
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <CalculateChecksum>:

// Utility Functions
uint8_t CalculateChecksum(UART_Package_t* pkg) {
 8001026:	b480      	push	{r7}
 8001028:	b085      	sub	sp, #20
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
    uint8_t sum = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]
    sum += pkg->cmd_type;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	785a      	ldrb	r2, [r3, #1]
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	4413      	add	r3, r2
 800103a:	73fb      	strb	r3, [r7, #15]
    sum += pkg->data_len;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	789a      	ldrb	r2, [r3, #2]
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	4413      	add	r3, r2
 8001044:	73fb      	strb	r3, [r7, #15]
    for(int i = 0; i < pkg->data_len; i++) {
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	e00a      	b.n	8001062 <CalculateChecksum+0x3c>
        sum += pkg->data[i];
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	4413      	add	r3, r2
 8001052:	3303      	adds	r3, #3
 8001054:	781a      	ldrb	r2, [r3, #0]
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	4413      	add	r3, r2
 800105a:	73fb      	strb	r3, [r7, #15]
    for(int i = 0; i < pkg->data_len; i++) {
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	3301      	adds	r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	789b      	ldrb	r3, [r3, #2]
 8001066:	461a      	mov	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4293      	cmp	r3, r2
 800106c:	dbee      	blt.n	800104c <CalculateChecksum+0x26>
    }
    return sum;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr

0800107a <VerifyChecksum>:

int VerifyChecksum(UART_Package_t* pkg) {
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
    uint8_t sum = CalculateChecksum(pkg);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffcf 	bl	8001026 <CalculateChecksum>
 8001088:	4603      	mov	r3, r0
 800108a:	73fb      	strb	r3, [r7, #15]
    return (sum == pkg->checksum) ? 0 : -1;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	429a      	cmp	r2, r3
 8001096:	d101      	bne.n	800109c <VerifyChecksum+0x22>
 8001098:	2300      	movs	r3, #0
 800109a:	e001      	b.n	80010a0 <VerifyChecksum+0x26>
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <UART_SendPackage>:

HAL_StatusTypeDef UART_SendPackage(UART_Package_t* pkg) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	@ 0x30
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    // 计算总的数据长度：header(1) + cmd_type(1) + data_len(1) + data(data_len) + checksum(1)
    uint8_t total_len = 3 + pkg->data_len + 1;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	789b      	ldrb	r3, [r3, #2]
 80010b4:	3304      	adds	r3, #4
 80010b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    
    // 创建发送缓冲区
    uint8_t tx_buffer[38]; // 最大包长度：3 + 32 + 1 = 36字节
    
    // 组装数据包
    tx_buffer[0] = pkg->header;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	723b      	strb	r3, [r7, #8]
    tx_buffer[1] = pkg->cmd_type;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	727b      	strb	r3, [r7, #9]
    tx_buffer[2] = pkg->data_len;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	789b      	ldrb	r3, [r3, #2]
 80010ca:	72bb      	strb	r3, [r7, #10]
    memcpy(&tx_buffer[3], pkg->data, pkg->data_len);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	1cd9      	adds	r1, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	789b      	ldrb	r3, [r3, #2]
 80010d4:	461a      	mov	r2, r3
 80010d6:	f107 0308 	add.w	r3, r7, #8
 80010da:	3303      	adds	r3, #3
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fff1 	bl	80050c4 <memcpy>
    tx_buffer[3 + pkg->data_len] = pkg->checksum;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	789b      	ldrb	r3, [r3, #2]
 80010e6:	3303      	adds	r3, #3
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 80010ee:	3330      	adds	r3, #48	@ 0x30
 80010f0:	443b      	add	r3, r7
 80010f2:	f803 2c28 	strb.w	r2, [r3, #-40]
    
    // 使用HAL_UART_Transmit发送数据
    return HAL_UART_Transmit(&huart2, tx_buffer, total_len, 200); // 200ms超时
 80010f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	f107 0108 	add.w	r1, r7, #8
 8001100:	23c8      	movs	r3, #200	@ 0xc8
 8001102:	4804      	ldr	r0, [pc, #16]	@ (8001114 <UART_SendPackage+0x6c>)
 8001104:	f003 f998 	bl	8004438 <HAL_UART_Transmit>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3730      	adds	r7, #48	@ 0x30
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000154 	.word	0x20000154

08001118 <ProcessMotionCmd>:

void ProcessMotionCmd(uint8_t motion_type) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	@ 0x30
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
    UART_Package_t pkg;
    pkg.header = FRAME_HEADER;
 8001122:	23aa      	movs	r3, #170	@ 0xaa
 8001124:	733b      	strb	r3, [r7, #12]
    pkg.cmd_type = CMD_MOTION;
 8001126:	2301      	movs	r3, #1
 8001128:	737b      	strb	r3, [r7, #13]
    pkg.data_len = 1;
 800112a:	2301      	movs	r3, #1
 800112c:	73bb      	strb	r3, [r7, #14]
    pkg.data[0] = motion_type;
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	73fb      	strb	r3, [r7, #15]
    pkg.checksum = CalculateChecksum(&pkg);
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff75 	bl	8001026 <CalculateChecksum>
 800113c:	4603      	mov	r3, r0
 800113e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    switch(motion_type) {
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	3b01      	subs	r3, #1
 8001146:	2b06      	cmp	r3, #6
 8001148:	d865      	bhi.n	8001216 <ProcessMotionCmd+0xfe>
 800114a:	a201      	add	r2, pc, #4	@ (adr r2, 8001150 <ProcessMotionCmd+0x38>)
 800114c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001150:	0800116d 	.word	0x0800116d
 8001154:	08001185 	.word	0x08001185
 8001158:	0800119d 	.word	0x0800119d
 800115c:	080011cd 	.word	0x080011cd
 8001160:	080011b5 	.word	0x080011b5
 8001164:	080011e5 	.word	0x080011e5
 8001168:	080011fd 	.word	0x080011fd
        case MOTION_FORWARD:
            HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, GPIO_PIN_SET);
 800116c:	2201      	movs	r2, #1
 800116e:	2101      	movs	r1, #1
 8001170:	482e      	ldr	r0, [pc, #184]	@ (800122c <ProcessMotionCmd+0x114>)
 8001172:	f001 fcc8 	bl	8002b06 <HAL_GPIO_WritePin>
            moveForward(&htim4);
 8001176:	482e      	ldr	r0, [pc, #184]	@ (8001230 <ProcessMotionCmd+0x118>)
 8001178:	f000 ff0c 	bl	8001f94 <moveForward>
            HAL_Delay(100);
 800117c:	2064      	movs	r0, #100	@ 0x64
 800117e:	f001 f8a3 	bl	80022c8 <HAL_Delay>
            break;
 8001182:	e049      	b.n	8001218 <ProcessMotionCmd+0x100>
            
        case MOTION_BACKWARD:
            HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, GPIO_PIN_SET);
 8001184:	2201      	movs	r2, #1
 8001186:	2104      	movs	r1, #4
 8001188:	482a      	ldr	r0, [pc, #168]	@ (8001234 <ProcessMotionCmd+0x11c>)
 800118a:	f001 fcbc 	bl	8002b06 <HAL_GPIO_WritePin>
            moveBackward(&htim4);
 800118e:	4828      	ldr	r0, [pc, #160]	@ (8001230 <ProcessMotionCmd+0x118>)
 8001190:	f000 ff34 	bl	8001ffc <moveBackward>
            HAL_Delay(100);
 8001194:	2064      	movs	r0, #100	@ 0x64
 8001196:	f001 f897 	bl	80022c8 <HAL_Delay>
            break;
 800119a:	e03d      	b.n	8001218 <ProcessMotionCmd+0x100>
            
        case MOTION_LEFT:
            HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2101      	movs	r1, #1
 80011a0:	4822      	ldr	r0, [pc, #136]	@ (800122c <ProcessMotionCmd+0x114>)
 80011a2:	f001 fcb0 	bl	8002b06 <HAL_GPIO_WritePin>
            moveLeft(&htim4);
 80011a6:	4822      	ldr	r0, [pc, #136]	@ (8001230 <ProcessMotionCmd+0x118>)
 80011a8:	f000 ff5c 	bl	8002064 <moveLeft>
            HAL_Delay(100);
 80011ac:	2064      	movs	r0, #100	@ 0x64
 80011ae:	f001 f88b 	bl	80022c8 <HAL_Delay>
            break;
 80011b2:	e031      	b.n	8001218 <ProcessMotionCmd+0x100>
        case MOTION_TURN_L:
            HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2101      	movs	r1, #1
 80011b8:	481c      	ldr	r0, [pc, #112]	@ (800122c <ProcessMotionCmd+0x114>)
 80011ba:	f001 fca4 	bl	8002b06 <HAL_GPIO_WritePin>
            moveTurnLeft(&htim4);
 80011be:	481c      	ldr	r0, [pc, #112]	@ (8001230 <ProcessMotionCmd+0x118>)
 80011c0:	f000 ffb8 	bl	8002134 <moveTurnLeft>
            HAL_Delay(100);
 80011c4:	2064      	movs	r0, #100	@ 0x64
 80011c6:	f001 f87f 	bl	80022c8 <HAL_Delay>
            break;
 80011ca:	e025      	b.n	8001218 <ProcessMotionCmd+0x100>
            
        case MOTION_RIGHT:
            HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2101      	movs	r1, #1
 80011d0:	4816      	ldr	r0, [pc, #88]	@ (800122c <ProcessMotionCmd+0x114>)
 80011d2:	f001 fc98 	bl	8002b06 <HAL_GPIO_WritePin>
            moveRight(&htim4);
 80011d6:	4816      	ldr	r0, [pc, #88]	@ (8001230 <ProcessMotionCmd+0x118>)
 80011d8:	f000 ff78 	bl	80020cc <moveRight>
            HAL_Delay(100);
 80011dc:	2064      	movs	r0, #100	@ 0x64
 80011de:	f001 f873 	bl	80022c8 <HAL_Delay>
            break;
 80011e2:	e019      	b.n	8001218 <ProcessMotionCmd+0x100>
        case MOTION_TURN_R:
            HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	2104      	movs	r1, #4
 80011e8:	4812      	ldr	r0, [pc, #72]	@ (8001234 <ProcessMotionCmd+0x11c>)
 80011ea:	f001 fc8c 	bl	8002b06 <HAL_GPIO_WritePin>
            moveTurnRight(&htim4);
 80011ee:	4810      	ldr	r0, [pc, #64]	@ (8001230 <ProcessMotionCmd+0x118>)
 80011f0:	f000 ffd6 	bl	80021a0 <moveTurnRight>
            HAL_Delay(100);
 80011f4:	2064      	movs	r0, #100	@ 0x64
 80011f6:	f001 f867 	bl	80022c8 <HAL_Delay>
            break;
 80011fa:	e00d      	b.n	8001218 <ProcessMotionCmd+0x100>
            
        case MOTION_STOP:
            HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, GPIO_PIN_RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2101      	movs	r1, #1
 8001200:	480a      	ldr	r0, [pc, #40]	@ (800122c <ProcessMotionCmd+0x114>)
 8001202:	f001 fc80 	bl	8002b06 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	2104      	movs	r1, #4
 800120a:	480a      	ldr	r0, [pc, #40]	@ (8001234 <ProcessMotionCmd+0x11c>)
 800120c:	f001 fc7b 	bl	8002b06 <HAL_GPIO_WritePin>
            motorBreak();
 8001210:	f000 fe8e 	bl	8001f30 <motorBreak>
            break;
 8001214:	e000      	b.n	8001218 <ProcessMotionCmd+0x100>
            
        default:
            break;
 8001216:	bf00      	nop
    }

    // Send confirmation package
    UART_SendPackage(&pkg);
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff43 	bl	80010a8 <UART_SendPackage>
}
 8001222:	bf00      	nop
 8001224:	3730      	adds	r7, #48	@ 0x30
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40010c00 	.word	0x40010c00
 8001230:	200000c4 	.word	0x200000c4
 8001234:	40011400 	.word	0x40011400

08001238 <StopMotion>:

void StopMotion(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2101      	movs	r1, #1
 8001240:	4805      	ldr	r0, [pc, #20]	@ (8001258 <StopMotion+0x20>)
 8001242:	f001 fc60 	bl	8002b06 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	2104      	movs	r1, #4
 800124a:	4804      	ldr	r0, [pc, #16]	@ (800125c <StopMotion+0x24>)
 800124c:	f001 fc5b 	bl	8002b06 <HAL_GPIO_WritePin>
    motorBreak();
 8001250:	f000 fe6e 	bl	8001f30 <motorBreak>
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40010c00 	.word	0x40010c00
 800125c:	40011400 	.word	0x40011400

08001260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001274:	4b4f      	ldr	r3, [pc, #316]	@ (80013b4 <MX_GPIO_Init+0x154>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a4e      	ldr	r2, [pc, #312]	@ (80013b4 <MX_GPIO_Init+0x154>)
 800127a:	f043 0320 	orr.w	r3, r3, #32
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b4c      	ldr	r3, [pc, #304]	@ (80013b4 <MX_GPIO_Init+0x154>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128c:	4b49      	ldr	r3, [pc, #292]	@ (80013b4 <MX_GPIO_Init+0x154>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a48      	ldr	r2, [pc, #288]	@ (80013b4 <MX_GPIO_Init+0x154>)
 8001292:	f043 0310 	orr.w	r3, r3, #16
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b46      	ldr	r3, [pc, #280]	@ (80013b4 <MX_GPIO_Init+0x154>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b43      	ldr	r3, [pc, #268]	@ (80013b4 <MX_GPIO_Init+0x154>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a42      	ldr	r2, [pc, #264]	@ (80013b4 <MX_GPIO_Init+0x154>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b40      	ldr	r3, [pc, #256]	@ (80013b4 <MX_GPIO_Init+0x154>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012bc:	4b3d      	ldr	r3, [pc, #244]	@ (80013b4 <MX_GPIO_Init+0x154>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a3c      	ldr	r2, [pc, #240]	@ (80013b4 <MX_GPIO_Init+0x154>)
 80012c2:	f043 0308 	orr.w	r3, r3, #8
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b3a      	ldr	r3, [pc, #232]	@ (80013b4 <MX_GPIO_Init+0x154>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2101      	movs	r1, #1
 80012d8:	4837      	ldr	r0, [pc, #220]	@ (80013b8 <MX_GPIO_Init+0x158>)
 80012da:	f001 fc14 	bl	8002b06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L1_Pin|LEFT_MOTOR_GO_Pin|LEFT2_MOTOR_GO_Pin|RIGHT_MOTOR_GO_Pin
 80012de:	2200      	movs	r2, #0
 80012e0:	f24f 0101 	movw	r1, #61441	@ 0xf001
 80012e4:	4835      	ldr	r0, [pc, #212]	@ (80013bc <MX_GPIO_Init+0x15c>)
 80012e6:	f001 fc0e 	bl	8002b06 <HAL_GPIO_WritePin>
                          |RIGHT2_MOTOR_GO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2104      	movs	r1, #4
 80012ee:	4834      	ldr	r0, [pc, #208]	@ (80013c0 <MX_GPIO_Init+0x160>)
 80012f0:	f001 fc09 	bl	8002b06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80012f4:	2301      	movs	r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4619      	mov	r1, r3
 800130a:	482b      	ldr	r0, [pc, #172]	@ (80013b8 <MX_GPIO_Init+0x158>)
 800130c:	f001 fa50 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8001310:	2302      	movs	r3, #2
 8001312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001314:	4b2b      	ldr	r3, [pc, #172]	@ (80013c4 <MX_GPIO_Init+0x164>)
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	4619      	mov	r1, r3
 8001322:	4825      	ldr	r0, [pc, #148]	@ (80013b8 <MX_GPIO_Init+0x158>)
 8001324:	f001 fa44 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = K1_Pin|K2_Pin;
 8001328:	2330      	movs	r3, #48	@ 0x30
 800132a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800132c:	4b26      	ldr	r3, [pc, #152]	@ (80013c8 <MX_GPIO_Init+0x168>)
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001330:	2301      	movs	r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	481f      	ldr	r0, [pc, #124]	@ (80013b8 <MX_GPIO_Init+0x158>)
 800133c:	f001 fa38 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = L1_Pin|LEFT_MOTOR_GO_Pin|LEFT2_MOTOR_GO_Pin|RIGHT_MOTOR_GO_Pin
 8001340:	f24f 0301 	movw	r3, #61441	@ 0xf001
 8001344:	613b      	str	r3, [r7, #16]
                          |RIGHT2_MOTOR_GO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2302      	movs	r3, #2
 8001350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	4619      	mov	r1, r3
 8001358:	4818      	ldr	r0, [pc, #96]	@ (80013bc <MX_GPIO_Init+0x15c>)
 800135a:	f001 fa29 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L2_Pin;
 800135e:	2304      	movs	r3, #4
 8001360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2302      	movs	r3, #2
 800136c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L2_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	4619      	mov	r1, r3
 8001374:	4812      	ldr	r0, [pc, #72]	@ (80013c0 <MX_GPIO_Init+0x160>)
 8001376:	f001 fa1b 	bl	80027b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2101      	movs	r1, #1
 800137e:	2007      	movs	r0, #7
 8001380:	f001 f89d 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001384:	2007      	movs	r0, #7
 8001386:	f001 f8b6 	bl	80024f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2101      	movs	r1, #1
 800138e:	200a      	movs	r0, #10
 8001390:	f001 f895 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001394:	200a      	movs	r0, #10
 8001396:	f001 f8ae 	bl	80024f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2101      	movs	r1, #1
 800139e:	2017      	movs	r0, #23
 80013a0:	f001 f88d 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013a4:	2017      	movs	r0, #23
 80013a6:	f001 f8a6 	bl	80024f6 <HAL_NVIC_EnableIRQ>

}
 80013aa:	bf00      	nop
 80013ac:	3720      	adds	r7, #32
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40011000 	.word	0x40011000
 80013bc:	40010c00 	.word	0x40010c00
 80013c0:	40011400 	.word	0x40011400
 80013c4:	10110000 	.word	0x10110000
 80013c8:	10210000 	.word	0x10210000

080013cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d2:	f000 ff17 	bl	8002204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d6:	f000 f845 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013da:	f7ff ff41 	bl	8001260 <MX_GPIO_Init>
  MX_TIM4_Init();
 80013de:	f000 facf 	bl	8001980 <MX_TIM4_Init>
  MX_TIM2_Init();
 80013e2:	f000 fa81 	bl	80018e8 <MX_TIM2_Init>
  MX_TIM5_Init();
 80013e6:	f000 fb65 	bl	8001ab4 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 80013ea:	f000 fc7b 	bl	8001ce4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80013ee:	2100      	movs	r1, #0
 80013f0:	4817      	ldr	r0, [pc, #92]	@ (8001450 <main+0x84>)
 80013f2:	f002 f907 	bl	8003604 <HAL_TIM_PWM_Start>
  motorInit();
 80013f6:	f000 fd85 	bl	8001f04 <motorInit>
  HAL_UART_Receive_IT(&huart2, rxBuffer, 1);  // Start interrupt receive
 80013fa:	2201      	movs	r2, #1
 80013fc:	4915      	ldr	r1, [pc, #84]	@ (8001454 <main+0x88>)
 80013fe:	4816      	ldr	r0, [pc, #88]	@ (8001458 <main+0x8c>)
 8001400:	f003 f8a5 	bl	800454e <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2101      	movs	r1, #1
 8001408:	4814      	ldr	r0, [pc, #80]	@ (800145c <main+0x90>)
 800140a:	f001 fb7c 	bl	8002b06 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	2104      	movs	r1, #4
 8001412:	4813      	ldr	r0, [pc, #76]	@ (8001460 <main+0x94>)
 8001414:	f001 fb77 	bl	8002b06 <HAL_GPIO_WritePin>
	  motorBreak();
 8001418:	f000 fd8a 	bl	8001f30 <motorBreak>
    uint8_t distance = (uint8_t)front_detection();
 800141c:	f000 fd5a 	bl	8001ed4 <front_detection>
 8001420:	4603      	mov	r3, r0
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fd4c 	bl	8000ec0 <__aeabi_f2uiz>
 8001428:	4603      	mov	r3, r0
 800142a:	71fb      	strb	r3, [r7, #7]
    SendDistanceData(front_detection());
 800142c:	f000 fd52 	bl	8001ed4 <front_detection>
 8001430:	4603      	mov	r3, r0
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f85c 	bl	80004f0 <__aeabi_f2d>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fdc8 	bl	8000fd4 <SendDistanceData>
    HAL_Delay(2000);
 8001444:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001448:	f000 ff3e 	bl	80022c8 <HAL_Delay>
  {
 800144c:	bf00      	nop
 800144e:	e7d9      	b.n	8001404 <main+0x38>
 8001450:	2000010c 	.word	0x2000010c
 8001454:	2000002c 	.word	0x2000002c
 8001458:	20000154 	.word	0x20000154
 800145c:	40010c00 	.word	0x40010c00
 8001460:	40011400 	.word	0x40011400

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b090      	sub	sp, #64	@ 0x40
 8001468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146a:	f107 0318 	add.w	r3, r7, #24
 800146e:	2228      	movs	r2, #40	@ 0x28
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f003 fdfa 	bl	800506c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001486:	2301      	movs	r3, #1
 8001488:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800148a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800148e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001494:	2301      	movs	r3, #1
 8001496:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001498:	2302      	movs	r3, #2
 800149a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800149c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014a2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a8:	f107 0318 	add.w	r3, r7, #24
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 fb73 	bl	8002b98 <HAL_RCC_OscConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014b8:	f000 f819 	bl	80014ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014bc:	230f      	movs	r3, #15
 80014be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c0:	2302      	movs	r3, #2
 80014c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2102      	movs	r1, #2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 fde0 	bl	800309c <HAL_RCC_ClockConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014e2:	f000 f804 	bl	80014ee <Error_Handler>
  }
}
 80014e6:	bf00      	nop
 80014e8:	3740      	adds	r7, #64	@ 0x40
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f2:	b672      	cpsid	i
}
 80014f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f6:	bf00      	nop
 80014f8:	e7fd      	b.n	80014f6 <Error_Handler+0x8>
	...

080014fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001502:	4b16      	ldr	r3, [pc, #88]	@ (800155c <HAL_MspInit+0x60>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <HAL_MspInit+0x60>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6193      	str	r3, [r2, #24]
 800150e:	4b13      	ldr	r3, [pc, #76]	@ (800155c <HAL_MspInit+0x60>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <HAL_MspInit+0x60>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	4a0f      	ldr	r2, [pc, #60]	@ (800155c <HAL_MspInit+0x60>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001524:	61d3      	str	r3, [r2, #28]
 8001526:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <HAL_MspInit+0x60>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001532:	2005      	movs	r0, #5
 8001534:	f000 ffb8 	bl	80024a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <HAL_MspInit+0x64>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <HAL_MspInit+0x64>)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000
 8001560:	40010000 	.word	0x40010000

08001564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <NMI_Handler+0x4>

0800156c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <HardFault_Handler+0x4>

08001574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <MemManage_Handler+0x4>

0800157c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <BusFault_Handler+0x4>

08001584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <UsageFault_Handler+0x4>

0800158c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b4:	f000 fe6c 	bl	8002290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}

080015bc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECHO_Pin);
 80015c0:	2002      	movs	r0, #2
 80015c2:	f001 fad1 	bl	8002b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}

080015ca <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(K1_Pin);
 80015ce:	2010      	movs	r0, #16
 80015d0:	f001 faca 	bl	8002b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(K2_Pin);
 80015dc:	2020      	movs	r0, #32
 80015de:	f001 fac3 	bl	8002b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015ec:	4802      	ldr	r0, [pc, #8]	@ (80015f8 <TIM4_IRQHandler+0x10>)
 80015ee:	f002 f8c3 	bl	8003778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200000c4 	.word	0x200000c4

080015fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <USART2_IRQHandler+0x10>)
 8001602:	f002 ffc9 	bl	8004598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000154 	.word	0x20000154

08001610 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(10);
 800161a:	200a      	movs	r0, #10
 800161c:	f000 fe54 	bl	80022c8 <HAL_Delay>
	switch(GPIO_Pin) {
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	3b01      	subs	r3, #1
 8001624:	2b1f      	cmp	r3, #31
 8001626:	f200 809f 	bhi.w	8001768 <HAL_GPIO_EXTI_Callback+0x158>
 800162a:	a201      	add	r2, pc, #4	@ (adr r2, 8001630 <HAL_GPIO_EXTI_Callback+0x20>)
 800162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001630:	08001709 	.word	0x08001709
 8001634:	08001719 	.word	0x08001719
 8001638:	08001769 	.word	0x08001769
 800163c:	08001769 	.word	0x08001769
 8001640:	08001769 	.word	0x08001769
 8001644:	08001769 	.word	0x08001769
 8001648:	08001769 	.word	0x08001769
 800164c:	08001769 	.word	0x08001769
 8001650:	08001769 	.word	0x08001769
 8001654:	08001769 	.word	0x08001769
 8001658:	08001769 	.word	0x08001769
 800165c:	08001769 	.word	0x08001769
 8001660:	08001769 	.word	0x08001769
 8001664:	08001769 	.word	0x08001769
 8001668:	08001769 	.word	0x08001769
 800166c:	080016c1 	.word	0x080016c1
 8001670:	08001769 	.word	0x08001769
 8001674:	08001769 	.word	0x08001769
 8001678:	08001769 	.word	0x08001769
 800167c:	08001769 	.word	0x08001769
 8001680:	08001769 	.word	0x08001769
 8001684:	08001769 	.word	0x08001769
 8001688:	08001769 	.word	0x08001769
 800168c:	08001769 	.word	0x08001769
 8001690:	08001769 	.word	0x08001769
 8001694:	08001769 	.word	0x08001769
 8001698:	08001769 	.word	0x08001769
 800169c:	08001769 	.word	0x08001769
 80016a0:	08001769 	.word	0x08001769
 80016a4:	08001769 	.word	0x08001769
 80016a8:	08001769 	.word	0x08001769
 80016ac:	080016e1 	.word	0x080016e1
	case K1_Pin:
		while(HAL_GPIO_ReadPin(K1_GPIO_Port, K1_Pin) == GPIO_PIN_RESET){
			HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, GPIO_PIN_SET);
 80016b0:	2201      	movs	r2, #1
 80016b2:	2101      	movs	r1, #1
 80016b4:	482f      	ldr	r0, [pc, #188]	@ (8001774 <HAL_GPIO_EXTI_Callback+0x164>)
 80016b6:	f001 fa26 	bl	8002b06 <HAL_GPIO_WritePin>
			moveTurnLeft(&htim4);
 80016ba:	482f      	ldr	r0, [pc, #188]	@ (8001778 <HAL_GPIO_EXTI_Callback+0x168>)
 80016bc:	f000 fd3a 	bl	8002134 <moveTurnLeft>
		while(HAL_GPIO_ReadPin(K1_GPIO_Port, K1_Pin) == GPIO_PIN_RESET){
 80016c0:	2110      	movs	r1, #16
 80016c2:	482e      	ldr	r0, [pc, #184]	@ (800177c <HAL_GPIO_EXTI_Callback+0x16c>)
 80016c4:	f001 fa08 	bl	8002ad8 <HAL_GPIO_ReadPin>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_GPIO_EXTI_Callback+0xa0>
		}
		break;
 80016ce:	e04c      	b.n	800176a <HAL_GPIO_EXTI_Callback+0x15a>

	case K2_Pin:
		while(HAL_GPIO_ReadPin(K2_GPIO_Port, K2_Pin) == GPIO_PIN_RESET) {
			HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, GPIO_PIN_SET);
 80016d0:	2201      	movs	r2, #1
 80016d2:	2104      	movs	r1, #4
 80016d4:	482a      	ldr	r0, [pc, #168]	@ (8001780 <HAL_GPIO_EXTI_Callback+0x170>)
 80016d6:	f001 fa16 	bl	8002b06 <HAL_GPIO_WritePin>
			moveTurnRight(&htim4);
 80016da:	4827      	ldr	r0, [pc, #156]	@ (8001778 <HAL_GPIO_EXTI_Callback+0x168>)
 80016dc:	f000 fd60 	bl	80021a0 <moveTurnRight>
		while(HAL_GPIO_ReadPin(K2_GPIO_Port, K2_Pin) == GPIO_PIN_RESET) {
 80016e0:	2120      	movs	r1, #32
 80016e2:	4826      	ldr	r0, [pc, #152]	@ (800177c <HAL_GPIO_EXTI_Callback+0x16c>)
 80016e4:	f001 f9f8 	bl	8002ad8 <HAL_GPIO_ReadPin>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_GPIO_EXTI_Callback+0xc0>
		}
		break;
 80016ee:	e03c      	b.n	800176a <HAL_GPIO_EXTI_Callback+0x15a>

	case K3_Pin:
		while(HAL_GPIO_ReadPin(K3_GPIO_Port, K3_Pin) == GPIO_PIN_SET) {
			HAL_Delay(500);
 80016f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016f4:	f000 fde8 	bl	80022c8 <HAL_Delay>
			HAL_GPIO_TogglePin(L1_GPIO_Port, L1_Pin);
 80016f8:	2101      	movs	r1, #1
 80016fa:	481e      	ldr	r0, [pc, #120]	@ (8001774 <HAL_GPIO_EXTI_Callback+0x164>)
 80016fc:	f001 fa1b 	bl	8002b36 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(L2_GPIO_Port, L2_Pin);
 8001700:	2104      	movs	r1, #4
 8001702:	481f      	ldr	r0, [pc, #124]	@ (8001780 <HAL_GPIO_EXTI_Callback+0x170>)
 8001704:	f001 fa17 	bl	8002b36 <HAL_GPIO_TogglePin>
		while(HAL_GPIO_ReadPin(K3_GPIO_Port, K3_Pin) == GPIO_PIN_SET) {
 8001708:	2101      	movs	r1, #1
 800170a:	481e      	ldr	r0, [pc, #120]	@ (8001784 <HAL_GPIO_EXTI_Callback+0x174>)
 800170c:	f001 f9e4 	bl	8002ad8 <HAL_GPIO_ReadPin>
 8001710:	4603      	mov	r3, r0
 8001712:	2b01      	cmp	r3, #1
 8001714:	d0ec      	beq.n	80016f0 <HAL_GPIO_EXTI_Callback+0xe0>
		}
		break;
 8001716:	e028      	b.n	800176a <HAL_GPIO_EXTI_Callback+0x15a>

	case ECHO_Pin:
			TIM2->CNT = 0;
 8001718:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800171c:	2200      	movs	r2, #0
 800171e:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_Base_Start(&htim2);  // 启动定时2
 8001720:	4819      	ldr	r0, [pc, #100]	@ (8001788 <HAL_GPIO_EXTI_Callback+0x178>)
 8001722:	f001 fe99 	bl	8003458 <HAL_TIM_Base_Start>

			// 等待 ECHO_PIN 为低电平
			while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin));
 8001726:	bf00      	nop
 8001728:	2102      	movs	r1, #2
 800172a:	4814      	ldr	r0, [pc, #80]	@ (800177c <HAL_GPIO_EXTI_Callback+0x16c>)
 800172c:	f001 f9d4 	bl	8002ad8 <HAL_GPIO_ReadPin>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f8      	bne.n	8001728 <HAL_GPIO_EXTI_Callback+0x118>

			HAL_TIM_Base_Stop(&htim2);  // 停止定时2
 8001736:	4814      	ldr	r0, [pc, #80]	@ (8001788 <HAL_GPIO_EXTI_Callback+0x178>)
 8001738:	f001 fee6 	bl	8003508 <HAL_TIM_Base_Stop>

			// 获取定时器计数，计算距离
			ultrasonicWaveDist = (int)(TIM2->CNT) * 0.034f / 2.0f;
 800173c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fa18 	bl	8000b78 <__aeabi_i2f>
 8001748:	4603      	mov	r3, r0
 800174a:	4910      	ldr	r1, [pc, #64]	@ (800178c <HAL_GPIO_EXTI_Callback+0x17c>)
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fa67 	bl	8000c20 <__aeabi_fmul>
 8001752:	4603      	mov	r3, r0
 8001754:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fb15 	bl	8000d88 <__aeabi_fdiv>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <HAL_GPIO_EXTI_Callback+0x180>)
 8001764:	601a      	str	r2, [r3, #0]

			break;
 8001766:	e000      	b.n	800176a <HAL_GPIO_EXTI_Callback+0x15a>
	default: break;
 8001768:	bf00      	nop
	}
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40010c00 	.word	0x40010c00
 8001778:	200000c4 	.word	0x200000c4
 800177c:	40011000 	.word	0x40011000
 8001780:	40011400 	.word	0x40011400
 8001784:	40010800 	.word	0x40010800
 8001788:	2000007c 	.word	0x2000007c
 800178c:	3d0b4396 	.word	0x3d0b4396
 8001790:	2000019c 	.word	0x2000019c

08001794 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
    static UART_Package_t receivedPackage;
    static uint8_t receiveState = 0;
    static uint8_t dataCount = 0;
    
    if(huart->Instance == USART2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a48      	ldr	r2, [pc, #288]	@ (80018c4 <HAL_UART_RxCpltCallback+0x130>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	f040 8089 	bne.w	80018ba <HAL_UART_RxCpltCallback+0x126>
    {
        switch(receiveState) {
 80017a8:	4b47      	ldr	r3, [pc, #284]	@ (80018c8 <HAL_UART_RxCpltCallback+0x134>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	f200 8084 	bhi.w	80018ba <HAL_UART_RxCpltCallback+0x126>
 80017b2:	a201      	add	r2, pc, #4	@ (adr r2, 80017b8 <HAL_UART_RxCpltCallback+0x24>)
 80017b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b8:	080017cd 	.word	0x080017cd
 80017bc:	080017fb 	.word	0x080017fb
 80017c0:	08001815 	.word	0x08001815
 80017c4:	08001857 	.word	0x08001857
 80017c8:	08001899 	.word	0x08001899
            case 0:  // 等待包头
                if(rxBuffer[0] == FRAME_HEADER) {
 80017cc:	4b3f      	ldr	r3, [pc, #252]	@ (80018cc <HAL_UART_RxCpltCallback+0x138>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2baa      	cmp	r3, #170	@ 0xaa
 80017d2:	d10c      	bne.n	80017ee <HAL_UART_RxCpltCallback+0x5a>
                    receivedPackage.header = rxBuffer[0];
 80017d4:	4b3d      	ldr	r3, [pc, #244]	@ (80018cc <HAL_UART_RxCpltCallback+0x138>)
 80017d6:	781a      	ldrb	r2, [r3, #0]
 80017d8:	4b3d      	ldr	r3, [pc, #244]	@ (80018d0 <HAL_UART_RxCpltCallback+0x13c>)
 80017da:	701a      	strb	r2, [r3, #0]
                    receiveState = 1;
 80017dc:	4b3a      	ldr	r3, [pc, #232]	@ (80018c8 <HAL_UART_RxCpltCallback+0x134>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
                    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);  // 接收命令类型
 80017e2:	2201      	movs	r2, #1
 80017e4:	4939      	ldr	r1, [pc, #228]	@ (80018cc <HAL_UART_RxCpltCallback+0x138>)
 80017e6:	483b      	ldr	r0, [pc, #236]	@ (80018d4 <HAL_UART_RxCpltCallback+0x140>)
 80017e8:	f002 feb1 	bl	800454e <HAL_UART_Receive_IT>
                }
                else {
                    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);  // 继续等待包头
                }
                break;
 80017ec:	e065      	b.n	80018ba <HAL_UART_RxCpltCallback+0x126>
                    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);  // 继续等待包头
 80017ee:	2201      	movs	r2, #1
 80017f0:	4936      	ldr	r1, [pc, #216]	@ (80018cc <HAL_UART_RxCpltCallback+0x138>)
 80017f2:	4838      	ldr	r0, [pc, #224]	@ (80018d4 <HAL_UART_RxCpltCallback+0x140>)
 80017f4:	f002 feab 	bl	800454e <HAL_UART_Receive_IT>
                break;
 80017f8:	e05f      	b.n	80018ba <HAL_UART_RxCpltCallback+0x126>
                
            case 1:  // 接收命令类型
                receivedPackage.cmd_type = rxBuffer[0];
 80017fa:	4b34      	ldr	r3, [pc, #208]	@ (80018cc <HAL_UART_RxCpltCallback+0x138>)
 80017fc:	781a      	ldrb	r2, [r3, #0]
 80017fe:	4b34      	ldr	r3, [pc, #208]	@ (80018d0 <HAL_UART_RxCpltCallback+0x13c>)
 8001800:	705a      	strb	r2, [r3, #1]
                receiveState = 2;
 8001802:	4b31      	ldr	r3, [pc, #196]	@ (80018c8 <HAL_UART_RxCpltCallback+0x134>)
 8001804:	2202      	movs	r2, #2
 8001806:	701a      	strb	r2, [r3, #0]
                HAL_UART_Receive_IT(&huart2, rxBuffer, 1);  // 接收数据长度
 8001808:	2201      	movs	r2, #1
 800180a:	4930      	ldr	r1, [pc, #192]	@ (80018cc <HAL_UART_RxCpltCallback+0x138>)
 800180c:	4831      	ldr	r0, [pc, #196]	@ (80018d4 <HAL_UART_RxCpltCallback+0x140>)
 800180e:	f002 fe9e 	bl	800454e <HAL_UART_Receive_IT>
                break;
 8001812:	e052      	b.n	80018ba <HAL_UART_RxCpltCallback+0x126>
                
            case 2:  // 接收数据长度
                receivedPackage.data_len = rxBuffer[0];
 8001814:	4b2d      	ldr	r3, [pc, #180]	@ (80018cc <HAL_UART_RxCpltCallback+0x138>)
 8001816:	781a      	ldrb	r2, [r3, #0]
 8001818:	4b2d      	ldr	r3, [pc, #180]	@ (80018d0 <HAL_UART_RxCpltCallback+0x13c>)
 800181a:	709a      	strb	r2, [r3, #2]
                if(receivedPackage.data_len > 0 && receivedPackage.data_len <= 32) {
 800181c:	4b2c      	ldr	r3, [pc, #176]	@ (80018d0 <HAL_UART_RxCpltCallback+0x13c>)
 800181e:	789b      	ldrb	r3, [r3, #2]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00f      	beq.n	8001844 <HAL_UART_RxCpltCallback+0xb0>
 8001824:	4b2a      	ldr	r3, [pc, #168]	@ (80018d0 <HAL_UART_RxCpltCallback+0x13c>)
 8001826:	789b      	ldrb	r3, [r3, #2]
 8001828:	2b20      	cmp	r3, #32
 800182a:	d80b      	bhi.n	8001844 <HAL_UART_RxCpltCallback+0xb0>
                    receiveState = 3;
 800182c:	4b26      	ldr	r3, [pc, #152]	@ (80018c8 <HAL_UART_RxCpltCallback+0x134>)
 800182e:	2203      	movs	r2, #3
 8001830:	701a      	strb	r2, [r3, #0]
                    dataCount = 0;
 8001832:	4b29      	ldr	r3, [pc, #164]	@ (80018d8 <HAL_UART_RxCpltCallback+0x144>)
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
                    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);  // 开始接收数据
 8001838:	2201      	movs	r2, #1
 800183a:	4924      	ldr	r1, [pc, #144]	@ (80018cc <HAL_UART_RxCpltCallback+0x138>)
 800183c:	4825      	ldr	r0, [pc, #148]	@ (80018d4 <HAL_UART_RxCpltCallback+0x140>)
 800183e:	f002 fe86 	bl	800454e <HAL_UART_Receive_IT>
                }
                else {
                    receiveState = 0;  // 数据长度错误，重新等待包头
                    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
                }
                break;
 8001842:	e03a      	b.n	80018ba <HAL_UART_RxCpltCallback+0x126>
                    receiveState = 0;  // 数据长度错误，重新等待包头
 8001844:	4b20      	ldr	r3, [pc, #128]	@ (80018c8 <HAL_UART_RxCpltCallback+0x134>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
                    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 800184a:	2201      	movs	r2, #1
 800184c:	491f      	ldr	r1, [pc, #124]	@ (80018cc <HAL_UART_RxCpltCallback+0x138>)
 800184e:	4821      	ldr	r0, [pc, #132]	@ (80018d4 <HAL_UART_RxCpltCallback+0x140>)
 8001850:	f002 fe7d 	bl	800454e <HAL_UART_Receive_IT>
                break;
 8001854:	e031      	b.n	80018ba <HAL_UART_RxCpltCallback+0x126>
                
            case 3:  // 接收数据
                receivedPackage.data[dataCount++] = rxBuffer[0];
 8001856:	4b20      	ldr	r3, [pc, #128]	@ (80018d8 <HAL_UART_RxCpltCallback+0x144>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	b2d1      	uxtb	r1, r2
 800185e:	4a1e      	ldr	r2, [pc, #120]	@ (80018d8 <HAL_UART_RxCpltCallback+0x144>)
 8001860:	7011      	strb	r1, [r2, #0]
 8001862:	4619      	mov	r1, r3
 8001864:	4b19      	ldr	r3, [pc, #100]	@ (80018cc <HAL_UART_RxCpltCallback+0x138>)
 8001866:	781a      	ldrb	r2, [r3, #0]
 8001868:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <HAL_UART_RxCpltCallback+0x13c>)
 800186a:	440b      	add	r3, r1
 800186c:	70da      	strb	r2, [r3, #3]
                if(dataCount >= receivedPackage.data_len) {
 800186e:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <HAL_UART_RxCpltCallback+0x13c>)
 8001870:	789a      	ldrb	r2, [r3, #2]
 8001872:	4b19      	ldr	r3, [pc, #100]	@ (80018d8 <HAL_UART_RxCpltCallback+0x144>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d808      	bhi.n	800188c <HAL_UART_RxCpltCallback+0xf8>
                    receiveState = 4;
 800187a:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <HAL_UART_RxCpltCallback+0x134>)
 800187c:	2204      	movs	r2, #4
 800187e:	701a      	strb	r2, [r3, #0]
                    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);  // 接收校验和
 8001880:	2201      	movs	r2, #1
 8001882:	4912      	ldr	r1, [pc, #72]	@ (80018cc <HAL_UART_RxCpltCallback+0x138>)
 8001884:	4813      	ldr	r0, [pc, #76]	@ (80018d4 <HAL_UART_RxCpltCallback+0x140>)
 8001886:	f002 fe62 	bl	800454e <HAL_UART_Receive_IT>
                }
                else {
                    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);  // 继续接收数据
                }
                break;
 800188a:	e016      	b.n	80018ba <HAL_UART_RxCpltCallback+0x126>
                    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);  // 继续接收数据
 800188c:	2201      	movs	r2, #1
 800188e:	490f      	ldr	r1, [pc, #60]	@ (80018cc <HAL_UART_RxCpltCallback+0x138>)
 8001890:	4810      	ldr	r0, [pc, #64]	@ (80018d4 <HAL_UART_RxCpltCallback+0x140>)
 8001892:	f002 fe5c 	bl	800454e <HAL_UART_Receive_IT>
                break;
 8001896:	e010      	b.n	80018ba <HAL_UART_RxCpltCallback+0x126>
                
            case 4:  // 接收校验和
                receivedPackage.checksum = rxBuffer[0];
 8001898:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <HAL_UART_RxCpltCallback+0x138>)
 800189a:	781a      	ldrb	r2, [r3, #0]
 800189c:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <HAL_UART_RxCpltCallback+0x13c>)
 800189e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
                ProcessReceivedPackage(&receivedPackage);  // 处理接收到的完整数据包
 80018a2:	480b      	ldr	r0, [pc, #44]	@ (80018d0 <HAL_UART_RxCpltCallback+0x13c>)
 80018a4:	f7ff fb5e 	bl	8000f64 <ProcessReceivedPackage>
                receiveState = 0;  // 重置状态，等待下一个包
 80018a8:	4b07      	ldr	r3, [pc, #28]	@ (80018c8 <HAL_UART_RxCpltCallback+0x134>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
                HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 80018ae:	2201      	movs	r2, #1
 80018b0:	4906      	ldr	r1, [pc, #24]	@ (80018cc <HAL_UART_RxCpltCallback+0x138>)
 80018b2:	4808      	ldr	r0, [pc, #32]	@ (80018d4 <HAL_UART_RxCpltCallback+0x140>)
 80018b4:	f002 fe4b 	bl	800454e <HAL_UART_Receive_IT>
                break;
 80018b8:	bf00      	nop
        }
    }
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40004400 	.word	0x40004400
 80018c8:	20000052 	.word	0x20000052
 80018cc:	2000002c 	.word	0x2000002c
 80018d0:	20000054 	.word	0x20000054
 80018d4:	20000154 	.word	0x20000154
 80018d8:	20000078 	.word	0x20000078

080018dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	463b      	mov	r3, r7
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001904:	4b1d      	ldr	r3, [pc, #116]	@ (800197c <MX_TIM2_Init+0x94>)
 8001906:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800190a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800190c:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <MX_TIM2_Init+0x94>)
 800190e:	2247      	movs	r2, #71	@ 0x47
 8001910:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001912:	4b1a      	ldr	r3, [pc, #104]	@ (800197c <MX_TIM2_Init+0x94>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001918:	4b18      	ldr	r3, [pc, #96]	@ (800197c <MX_TIM2_Init+0x94>)
 800191a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800191e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001920:	4b16      	ldr	r3, [pc, #88]	@ (800197c <MX_TIM2_Init+0x94>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <MX_TIM2_Init+0x94>)
 8001928:	2280      	movs	r2, #128	@ 0x80
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800192c:	4813      	ldr	r0, [pc, #76]	@ (800197c <MX_TIM2_Init+0x94>)
 800192e:	f001 fd43 	bl	80033b8 <HAL_TIM_Base_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001938:	f7ff fdd9 	bl	80014ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001940:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	4619      	mov	r1, r3
 8001948:	480c      	ldr	r0, [pc, #48]	@ (800197c <MX_TIM2_Init+0x94>)
 800194a:	f002 f8c7 	bl	8003adc <HAL_TIM_ConfigClockSource>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001954:	f7ff fdcb 	bl	80014ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001958:	2300      	movs	r3, #0
 800195a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001960:	463b      	mov	r3, r7
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	@ (800197c <MX_TIM2_Init+0x94>)
 8001966:	f002 fc99 	bl	800429c <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001970:	f7ff fdbd 	bl	80014ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	2000007c 	.word	0x2000007c

08001980 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08e      	sub	sp, #56	@ 0x38
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001986:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001994:	f107 0320 	add.w	r3, r7, #32
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
 80019ac:	615a      	str	r2, [r3, #20]
 80019ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019b0:	4b3e      	ldr	r3, [pc, #248]	@ (8001aac <MX_TIM4_Init+0x12c>)
 80019b2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ab0 <MX_TIM4_Init+0x130>)
 80019b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80019b6:	4b3d      	ldr	r3, [pc, #244]	@ (8001aac <MX_TIM4_Init+0x12c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	4b3b      	ldr	r3, [pc, #236]	@ (8001aac <MX_TIM4_Init+0x12c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7199;
 80019c2:	4b3a      	ldr	r3, [pc, #232]	@ (8001aac <MX_TIM4_Init+0x12c>)
 80019c4:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80019c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ca:	4b38      	ldr	r3, [pc, #224]	@ (8001aac <MX_TIM4_Init+0x12c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019d0:	4b36      	ldr	r3, [pc, #216]	@ (8001aac <MX_TIM4_Init+0x12c>)
 80019d2:	2280      	movs	r2, #128	@ 0x80
 80019d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019d6:	4835      	ldr	r0, [pc, #212]	@ (8001aac <MX_TIM4_Init+0x12c>)
 80019d8:	f001 fcee 	bl	80033b8 <HAL_TIM_Base_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80019e2:	f7ff fd84 	bl	80014ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019f0:	4619      	mov	r1, r3
 80019f2:	482e      	ldr	r0, [pc, #184]	@ (8001aac <MX_TIM4_Init+0x12c>)
 80019f4:	f002 f872 	bl	8003adc <HAL_TIM_ConfigClockSource>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80019fe:	f7ff fd76 	bl	80014ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a02:	482a      	ldr	r0, [pc, #168]	@ (8001aac <MX_TIM4_Init+0x12c>)
 8001a04:	f001 fda6 	bl	8003554 <HAL_TIM_PWM_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001a0e:	f7ff fd6e 	bl	80014ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a1a:	f107 0320 	add.w	r3, r7, #32
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4822      	ldr	r0, [pc, #136]	@ (8001aac <MX_TIM4_Init+0x12c>)
 8001a22:	f002 fc3b 	bl	800429c <HAL_TIMEx_MasterConfigSynchronization>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001a2c:	f7ff fd5f 	bl	80014ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001a30:	2370      	movs	r3, #112	@ 0x70
 8001a32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	2200      	movs	r2, #0
 8001a44:	4619      	mov	r1, r3
 8001a46:	4819      	ldr	r0, [pc, #100]	@ (8001aac <MX_TIM4_Init+0x12c>)
 8001a48:	f001 ff86 	bl	8003958 <HAL_TIM_PWM_ConfigChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001a52:	f7ff fd4c 	bl	80014ee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2204      	movs	r2, #4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4813      	ldr	r0, [pc, #76]	@ (8001aac <MX_TIM4_Init+0x12c>)
 8001a5e:	f001 ff7b 	bl	8003958 <HAL_TIM_PWM_ConfigChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001a68:	f7ff fd41 	bl	80014ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a6c:	2360      	movs	r3, #96	@ 0x60
 8001a6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	2208      	movs	r2, #8
 8001a74:	4619      	mov	r1, r3
 8001a76:	480d      	ldr	r0, [pc, #52]	@ (8001aac <MX_TIM4_Init+0x12c>)
 8001a78:	f001 ff6e 	bl	8003958 <HAL_TIM_PWM_ConfigChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8001a82:	f7ff fd34 	bl	80014ee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	220c      	movs	r2, #12
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4807      	ldr	r0, [pc, #28]	@ (8001aac <MX_TIM4_Init+0x12c>)
 8001a8e:	f001 ff63 	bl	8003958 <HAL_TIM_PWM_ConfigChannel>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 8001a98:	f7ff fd29 	bl	80014ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a9c:	4803      	ldr	r0, [pc, #12]	@ (8001aac <MX_TIM4_Init+0x12c>)
 8001a9e:	f000 f8cb 	bl	8001c38 <HAL_TIM_MspPostInit>

}
 8001aa2:	bf00      	nop
 8001aa4:	3738      	adds	r7, #56	@ 0x38
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200000c4 	.word	0x200000c4
 8001ab0:	40000800 	.word	0x40000800

08001ab4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08e      	sub	sp, #56	@ 0x38
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	f107 0320 	add.w	r3, r7, #32
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
 8001ae0:	615a      	str	r2, [r3, #20]
 8001ae2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ae4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b98 <MX_TIM5_Init+0xe4>)
 8001ae6:	4a2d      	ldr	r2, [pc, #180]	@ (8001b9c <MX_TIM5_Init+0xe8>)
 8001ae8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 143;
 8001aea:	4b2b      	ldr	r3, [pc, #172]	@ (8001b98 <MX_TIM5_Init+0xe4>)
 8001aec:	228f      	movs	r2, #143	@ 0x8f
 8001aee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af0:	4b29      	ldr	r3, [pc, #164]	@ (8001b98 <MX_TIM5_Init+0xe4>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 8001af6:	4b28      	ldr	r3, [pc, #160]	@ (8001b98 <MX_TIM5_Init+0xe4>)
 8001af8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001afc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afe:	4b26      	ldr	r3, [pc, #152]	@ (8001b98 <MX_TIM5_Init+0xe4>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b04:	4b24      	ldr	r3, [pc, #144]	@ (8001b98 <MX_TIM5_Init+0xe4>)
 8001b06:	2280      	movs	r2, #128	@ 0x80
 8001b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b0a:	4823      	ldr	r0, [pc, #140]	@ (8001b98 <MX_TIM5_Init+0xe4>)
 8001b0c:	f001 fc54 	bl	80033b8 <HAL_TIM_Base_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001b16:	f7ff fcea 	bl	80014ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001b20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b24:	4619      	mov	r1, r3
 8001b26:	481c      	ldr	r0, [pc, #112]	@ (8001b98 <MX_TIM5_Init+0xe4>)
 8001b28:	f001 ffd8 	bl	8003adc <HAL_TIM_ConfigClockSource>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001b32:	f7ff fcdc 	bl	80014ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001b36:	4818      	ldr	r0, [pc, #96]	@ (8001b98 <MX_TIM5_Init+0xe4>)
 8001b38:	f001 fd0c 	bl	8003554 <HAL_TIM_PWM_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001b42:	f7ff fcd4 	bl	80014ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b4e:	f107 0320 	add.w	r3, r7, #32
 8001b52:	4619      	mov	r1, r3
 8001b54:	4810      	ldr	r0, [pc, #64]	@ (8001b98 <MX_TIM5_Init+0xe4>)
 8001b56:	f002 fba1 	bl	800429c <HAL_TIMEx_MasterConfigSynchronization>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001b60:	f7ff fcc5 	bl	80014ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b64:	2360      	movs	r3, #96	@ 0x60
 8001b66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2200      	movs	r2, #0
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4807      	ldr	r0, [pc, #28]	@ (8001b98 <MX_TIM5_Init+0xe4>)
 8001b7c:	f001 feec 	bl	8003958 <HAL_TIM_PWM_ConfigChannel>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001b86:	f7ff fcb2 	bl	80014ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001b8a:	4803      	ldr	r0, [pc, #12]	@ (8001b98 <MX_TIM5_Init+0xe4>)
 8001b8c:	f000 f854 	bl	8001c38 <HAL_TIM_MspPostInit>

}
 8001b90:	bf00      	nop
 8001b92:	3738      	adds	r7, #56	@ 0x38
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2000010c 	.word	0x2000010c
 8001b9c:	40000c00 	.word	0x40000c00

08001ba0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bb0:	d10c      	bne.n	8001bcc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <HAL_TIM_Base_MspInit+0x8c>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c2c <HAL_TIM_Base_MspInit+0x8c>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	61d3      	str	r3, [r2, #28]
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <HAL_TIM_Base_MspInit+0x8c>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001bca:	e02a      	b.n	8001c22 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM4)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a17      	ldr	r2, [pc, #92]	@ (8001c30 <HAL_TIM_Base_MspInit+0x90>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d114      	bne.n	8001c00 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bd6:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <HAL_TIM_Base_MspInit+0x8c>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a14      	ldr	r2, [pc, #80]	@ (8001c2c <HAL_TIM_Base_MspInit+0x8c>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	61d3      	str	r3, [r2, #28]
 8001be2:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <HAL_TIM_Base_MspInit+0x8c>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	201e      	movs	r0, #30
 8001bf4:	f000 fc63 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bf8:	201e      	movs	r0, #30
 8001bfa:	f000 fc7c 	bl	80024f6 <HAL_NVIC_EnableIRQ>
}
 8001bfe:	e010      	b.n	8001c22 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM5)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0b      	ldr	r2, [pc, #44]	@ (8001c34 <HAL_TIM_Base_MspInit+0x94>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d10b      	bne.n	8001c22 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c0a:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <HAL_TIM_Base_MspInit+0x8c>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	4a07      	ldr	r2, [pc, #28]	@ (8001c2c <HAL_TIM_Base_MspInit+0x8c>)
 8001c10:	f043 0308 	orr.w	r3, r3, #8
 8001c14:	61d3      	str	r3, [r2, #28]
 8001c16:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <HAL_TIM_Base_MspInit+0x8c>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
}
 8001c22:	bf00      	nop
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40000800 	.word	0x40000800
 8001c34:	40000c00 	.word	0x40000c00

08001c38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1f      	ldr	r2, [pc, #124]	@ (8001cd0 <HAL_TIM_MspPostInit+0x98>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d119      	bne.n	8001c8c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c58:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd4 <HAL_TIM_MspPostInit+0x9c>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd4 <HAL_TIM_MspPostInit+0x9c>)
 8001c5e:	f043 0308 	orr.w	r3, r3, #8
 8001c62:	6193      	str	r3, [r2, #24]
 8001c64:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd4 <HAL_TIM_MspPostInit+0x9c>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_PWM_Pin|LEFT2_MOTOR_PWM_Pin|RIGHT_MOTOR_PWM_Pin|RIGHT2_MOTOR_PWM_Pin;
 8001c70:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001c74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7e:	f107 0310 	add.w	r3, r7, #16
 8001c82:	4619      	mov	r1, r3
 8001c84:	4814      	ldr	r0, [pc, #80]	@ (8001cd8 <HAL_TIM_MspPostInit+0xa0>)
 8001c86:	f000 fd93 	bl	80027b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001c8a:	e01c      	b.n	8001cc6 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM5)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a12      	ldr	r2, [pc, #72]	@ (8001cdc <HAL_TIM_MspPostInit+0xa4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d117      	bne.n	8001cc6 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <HAL_TIM_MspPostInit+0x9c>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd4 <HAL_TIM_MspPostInit+0x9c>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	6193      	str	r3, [r2, #24]
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <HAL_TIM_MspPostInit+0x9c>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	f107 0310 	add.w	r3, r7, #16
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4807      	ldr	r0, [pc, #28]	@ (8001ce0 <HAL_TIM_MspPostInit+0xa8>)
 8001cc2:	f000 fd75 	bl	80027b0 <HAL_GPIO_Init>
}
 8001cc6:	bf00      	nop
 8001cc8:	3720      	adds	r7, #32
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40000800 	.word	0x40000800
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010c00 	.word	0x40010c00
 8001cdc:	40000c00 	.word	0x40000c00
 8001ce0:	40010800 	.word	0x40010800

08001ce4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <MX_USART2_UART_Init+0x4c>)
 8001cea:	4a12      	ldr	r2, [pc, #72]	@ (8001d34 <MX_USART2_UART_Init+0x50>)
 8001cec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <MX_USART2_UART_Init+0x4c>)
 8001cf0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001cf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d30 <MX_USART2_UART_Init+0x4c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <MX_USART2_UART_Init+0x4c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d02:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <MX_USART2_UART_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d08:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <MX_USART2_UART_Init+0x4c>)
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0e:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <MX_USART2_UART_Init+0x4c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d14:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <MX_USART2_UART_Init+0x4c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d1a:	4805      	ldr	r0, [pc, #20]	@ (8001d30 <MX_USART2_UART_Init+0x4c>)
 8001d1c:	f002 fb3c 	bl	8004398 <HAL_UART_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d26:	f7ff fbe2 	bl	80014ee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000154 	.word	0x20000154
 8001d34:	40004400 	.word	0x40004400

08001d38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 0310 	add.w	r3, r7, #16
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd0 <HAL_UART_MspInit+0x98>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d137      	bne.n	8001dc8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d58:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd4 <HAL_UART_MspInit+0x9c>)
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd4 <HAL_UART_MspInit+0x9c>)
 8001d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d62:	61d3      	str	r3, [r2, #28]
 8001d64:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd4 <HAL_UART_MspInit+0x9c>)
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d70:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <HAL_UART_MspInit+0x9c>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a17      	ldr	r2, [pc, #92]	@ (8001dd4 <HAL_UART_MspInit+0x9c>)
 8001d76:	f043 0304 	orr.w	r3, r3, #4
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <HAL_UART_MspInit+0x9c>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d88:	2304      	movs	r3, #4
 8001d8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d90:	2303      	movs	r3, #3
 8001d92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d94:	f107 0310 	add.w	r3, r7, #16
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480f      	ldr	r0, [pc, #60]	@ (8001dd8 <HAL_UART_MspInit+0xa0>)
 8001d9c:	f000 fd08 	bl	80027b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001da0:	2308      	movs	r3, #8
 8001da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	4619      	mov	r1, r3
 8001db2:	4809      	ldr	r0, [pc, #36]	@ (8001dd8 <HAL_UART_MspInit+0xa0>)
 8001db4:	f000 fcfc 	bl	80027b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2101      	movs	r1, #1
 8001dbc:	2026      	movs	r0, #38	@ 0x26
 8001dbe:	f000 fb7e 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dc2:	2026      	movs	r0, #38	@ 0x26
 8001dc4:	f000 fb97 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40004400 	.word	0x40004400
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40010800 	.word	0x40010800

08001ddc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ddc:	f7ff fd7e 	bl	80018dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de0:	480b      	ldr	r0, [pc, #44]	@ (8001e10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001de2:	490c      	ldr	r1, [pc, #48]	@ (8001e14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001de4:	4a0c      	ldr	r2, [pc, #48]	@ (8001e18 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de8:	e002      	b.n	8001df0 <LoopCopyDataInit>

08001dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dee:	3304      	adds	r3, #4

08001df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df4:	d3f9      	bcc.n	8001dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df6:	4a09      	ldr	r2, [pc, #36]	@ (8001e1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001df8:	4c09      	ldr	r4, [pc, #36]	@ (8001e20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dfc:	e001      	b.n	8001e02 <LoopFillZerobss>

08001dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e00:	3204      	adds	r2, #4

08001e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e04:	d3fb      	bcc.n	8001dfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e06:	f003 f939 	bl	800507c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e0a:	f7ff fadf 	bl	80013cc <main>
  bx lr
 8001e0e:	4770      	bx	lr
  ldr r0, =_sdata
 8001e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e14:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001e18:	0800512c 	.word	0x0800512c
  ldr r2, =_sbss
 8001e1c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001e20:	200001a4 	.word	0x200001a4

08001e24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC1_2_IRQHandler>
	...

08001e28 <SetJointAngle>:
#include "Server.h"
#include "main.h"
#include "tim.h"

void SetJointAngle(float angle)
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	angle=(uint16_t)(50.0*angle/9.0+249.0);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7fe fb5d 	bl	80004f0 <__aeabi_f2d>
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	4b19      	ldr	r3, [pc, #100]	@ (8001ea0 <SetJointAngle+0x78>)
 8001e3c:	f7fe fbb0 	bl	80005a0 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <SetJointAngle+0x7c>)
 8001e4e:	f7fe fcd1 	bl	80007f4 <__aeabi_ddiv>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001e98 <SetJointAngle+0x70>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe f9e8 	bl	8000234 <__adddf3>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f7fe fdaa 	bl	80009c4 <__aeabi_d2uiz>
 8001e70:	4603      	mov	r3, r0
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fe7b 	bl	8000b70 <__aeabi_ui2f>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	607b      	str	r3, [r7, #4]
	TIM5->CCR1 = angle;
 8001e7e:	4c0a      	ldr	r4, [pc, #40]	@ (8001ea8 <SetJointAngle+0x80>)
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff f81d 	bl	8000ec0 <__aeabi_f2uiz>
 8001e86:	4603      	mov	r3, r0
 8001e88:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd90      	pop	{r4, r7, pc}
 8001e92:	bf00      	nop
 8001e94:	f3af 8000 	nop.w
 8001e98:	00000000 	.word	0x00000000
 8001e9c:	406f2000 	.word	0x406f2000
 8001ea0:	40490000 	.word	0x40490000
 8001ea4:	40220000 	.word	0x40220000
 8001ea8:	40000c00 	.word	0x40000c00

08001eac <UltrasonicWave_StartMeasure>:
#include "UltrasonicWave.h"

float ultrasonicWaveDist;

void UltrasonicWave_StartMeasure(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	4806      	ldr	r0, [pc, #24]	@ (8001ed0 <UltrasonicWave_StartMeasure+0x24>)
 8001eb6:	f000 fe26 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f000 fa04 	bl	80022c8 <HAL_Delay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port,TRIG_Pin, GPIO_PIN_RESET);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	4802      	ldr	r0, [pc, #8]	@ (8001ed0 <UltrasonicWave_StartMeasure+0x24>)
 8001ec6:	f000 fe1e 	bl	8002b06 <HAL_GPIO_WritePin>
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40011000 	.word	0x40011000

08001ed4 <front_detection>:

//超声波转头函数
float front_detection()
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
	float u_temp;
	SetJointAngle(85);
 8001eda:	4808      	ldr	r0, [pc, #32]	@ (8001efc <front_detection+0x28>)
 8001edc:	f7ff ffa4 	bl	8001e28 <SetJointAngle>
	HAL_Delay(100);
 8001ee0:	2064      	movs	r0, #100	@ 0x64
 8001ee2:	f000 f9f1 	bl	80022c8 <HAL_Delay>
	UltrasonicWave_StartMeasure();
 8001ee6:	f7ff ffe1 	bl	8001eac <UltrasonicWave_StartMeasure>
	u_temp = ultrasonicWaveDist;
 8001eea:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <front_detection+0x2c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	607b      	str	r3, [r7, #4]
	return u_temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	42aa0000 	.word	0x42aa0000
 8001f00:	2000019c 	.word	0x2000019c

08001f04 <motorInit>:

extern TIM_HandleTypeDef htim4;

//start PWM timer
void motorInit()
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4808      	ldr	r0, [pc, #32]	@ (8001f2c <motorInit+0x28>)
 8001f0c:	f001 fb7a 	bl	8003604 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001f10:	2104      	movs	r1, #4
 8001f12:	4806      	ldr	r0, [pc, #24]	@ (8001f2c <motorInit+0x28>)
 8001f14:	f001 fb76 	bl	8003604 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001f18:	2108      	movs	r1, #8
 8001f1a:	4804      	ldr	r0, [pc, #16]	@ (8001f2c <motorInit+0x28>)
 8001f1c:	f001 fb72 	bl	8003604 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001f20:	210c      	movs	r1, #12
 8001f22:	4802      	ldr	r0, [pc, #8]	@ (8001f2c <motorInit+0x28>)
 8001f24:	f001 fb6e 	bl	8003604 <HAL_TIM_PWM_Start>
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200000c4 	.word	0x200000c4

08001f30 <motorBreak>:
//	setMotorSpeed(&htim4, TIM_CHANNEL_3, speed);
//	setMotorSpeed(&htim4, TIM_CHANNEL_4, speed);
//}

void motorBreak()
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEFT_MOTOR_GO_GPIO_Port, LEFT_MOTOR_GO_Pin, GPIO_PIN_RESET);
 8001f34:	2200      	movs	r2, #0
 8001f36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f3a:	4814      	ldr	r0, [pc, #80]	@ (8001f8c <motorBreak+0x5c>)
 8001f3c:	f000 fde3 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT2_MOTOR_GO_GPIO_Port, LEFT2_MOTOR_GO_Pin, GPIO_PIN_RESET);
 8001f40:	2200      	movs	r2, #0
 8001f42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f46:	4811      	ldr	r0, [pc, #68]	@ (8001f8c <motorBreak+0x5c>)
 8001f48:	f000 fddd 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_GO_GPIO_Port, RIGHT_MOTOR_GO_Pin, GPIO_PIN_RESET);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f52:	480e      	ldr	r0, [pc, #56]	@ (8001f8c <motorBreak+0x5c>)
 8001f54:	f000 fdd7 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT2_MOTOR_GO_GPIO_Port, RIGHT2_MOTOR_GO_Pin, GPIO_PIN_RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f5e:	480b      	ldr	r0, [pc, #44]	@ (8001f8c <motorBreak+0x5c>)
 8001f60:	f000 fdd1 	bl	8002b06 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 7200);
 8001f64:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <motorBreak+0x60>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001f6c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 7200);
 8001f6e:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <motorBreak+0x60>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001f76:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001f78:	4b05      	ldr	r3, [pc, #20]	@ (8001f90 <motorBreak+0x60>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8001f80:	4b03      	ldr	r3, [pc, #12]	@ (8001f90 <motorBreak+0x60>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2200      	movs	r2, #0
 8001f86:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40010c00 	.word	0x40010c00
 8001f90:	200000c4 	.word	0x200000c4

08001f94 <moveForward>:
//	setMotorSpeed(&htim4, TIM_CHANNEL_2, 0);
//	setMotorSpeed(&htim4, TIM_CHANNEL_3, 0);
//	setMotorSpeed(&htim4, TIM_CHANNEL_4, 0);
//}
void moveForward(TIM_HandleTypeDef *htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEFT_MOTOR_GO_GPIO_Port, LEFT_MOTOR_GO_Pin, GPIO_PIN_RESET);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fa2:	4815      	ldr	r0, [pc, #84]	@ (8001ff8 <moveForward+0x64>)
 8001fa4:	f000 fdaf 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT2_MOTOR_GO_GPIO_Port, LEFT2_MOTOR_GO_Pin, GPIO_PIN_RESET);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fae:	4812      	ldr	r0, [pc, #72]	@ (8001ff8 <moveForward+0x64>)
 8001fb0:	f000 fda9 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_GO_GPIO_Port, RIGHT_MOTOR_GO_Pin, GPIO_PIN_RESET);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fba:	480f      	ldr	r0, [pc, #60]	@ (8001ff8 <moveForward+0x64>)
 8001fbc:	f000 fda3 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT2_MOTOR_GO_GPIO_Port, RIGHT2_MOTOR_GO_Pin, GPIO_PIN_RESET);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fc6:	480c      	ldr	r0, [pc, #48]	@ (8001ff8 <moveForward+0x64>)
 8001fc8:	f000 fd9d 	bl	8002b06 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 0);//L1满速前进
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, 0);//L2满速前进
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, 7200);//R1满速前进
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001fe4:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, 7200);//L1满速前进
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001fee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40010c00 	.word	0x40010c00

08001ffc <moveBackward>:
void moveBackward(TIM_HandleTypeDef *htim)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEFT_MOTOR_GO_GPIO_Port, LEFT_MOTOR_GO_Pin, GPIO_PIN_SET);
 8002004:	2201      	movs	r2, #1
 8002006:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800200a:	4815      	ldr	r0, [pc, #84]	@ (8002060 <moveBackward+0x64>)
 800200c:	f000 fd7b 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT2_MOTOR_GO_GPIO_Port, LEFT2_MOTOR_GO_Pin, GPIO_PIN_SET);
 8002010:	2201      	movs	r2, #1
 8002012:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002016:	4812      	ldr	r0, [pc, #72]	@ (8002060 <moveBackward+0x64>)
 8002018:	f000 fd75 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_GO_GPIO_Port, RIGHT_MOTOR_GO_Pin, GPIO_PIN_SET);
 800201c:	2201      	movs	r2, #1
 800201e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002022:	480f      	ldr	r0, [pc, #60]	@ (8002060 <moveBackward+0x64>)
 8002024:	f000 fd6f 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT2_MOTOR_GO_GPIO_Port, RIGHT2_MOTOR_GO_Pin, GPIO_PIN_SET);
 8002028:	2201      	movs	r2, #1
 800202a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800202e:	480c      	ldr	r0, [pc, #48]	@ (8002060 <moveBackward+0x64>)
 8002030:	f000 fd69 	bl	8002b06 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 7200);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 800203c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, 7200);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8002046:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, 0);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2200      	movs	r2, #0
 800204e:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, 0);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2200      	movs	r2, #0
 8002056:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40010c00 	.word	0x40010c00

08002064 <moveLeft>:
void moveLeft(TIM_HandleTypeDef *htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEFT_MOTOR_GO_GPIO_Port, LEFT_MOTOR_GO_Pin, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002072:	4815      	ldr	r0, [pc, #84]	@ (80020c8 <moveLeft+0x64>)
 8002074:	f000 fd47 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT2_MOTOR_GO_GPIO_Port, LEFT2_MOTOR_GO_Pin, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800207e:	4812      	ldr	r0, [pc, #72]	@ (80020c8 <moveLeft+0x64>)
 8002080:	f000 fd41 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_GO_GPIO_Port, RIGHT_MOTOR_GO_Pin, GPIO_PIN_RESET);
 8002084:	2200      	movs	r2, #0
 8002086:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800208a:	480f      	ldr	r0, [pc, #60]	@ (80020c8 <moveLeft+0x64>)
 800208c:	f000 fd3b 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT2_MOTOR_GO_GPIO_Port, RIGHT2_MOTOR_GO_Pin, GPIO_PIN_SET);
 8002090:	2201      	movs	r2, #1
 8002092:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002096:	480c      	ldr	r0, [pc, #48]	@ (80020c8 <moveLeft+0x64>)
 8002098:	f000 fd35 	bl	8002b06 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 7200);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 80020a4:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, 0);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2200      	movs	r2, #0
 80020ac:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, 7200);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 80020b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, 0);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2200      	movs	r2, #0
 80020be:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40010c00 	.word	0x40010c00

080020cc <moveRight>:
void moveRight(TIM_HandleTypeDef *htim)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEFT_MOTOR_GO_GPIO_Port, LEFT_MOTOR_GO_Pin, GPIO_PIN_RESET);
 80020d4:	2200      	movs	r2, #0
 80020d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020da:	4815      	ldr	r0, [pc, #84]	@ (8002130 <moveRight+0x64>)
 80020dc:	f000 fd13 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT2_MOTOR_GO_GPIO_Port, LEFT2_MOTOR_GO_Pin, GPIO_PIN_SET);
 80020e0:	2201      	movs	r2, #1
 80020e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020e6:	4812      	ldr	r0, [pc, #72]	@ (8002130 <moveRight+0x64>)
 80020e8:	f000 fd0d 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_GO_GPIO_Port, RIGHT_MOTOR_GO_Pin, GPIO_PIN_SET);
 80020ec:	2201      	movs	r2, #1
 80020ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80020f2:	480f      	ldr	r0, [pc, #60]	@ (8002130 <moveRight+0x64>)
 80020f4:	f000 fd07 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT2_MOTOR_GO_GPIO_Port, RIGHT2_MOTOR_GO_Pin, GPIO_PIN_RESET);
 80020f8:	2200      	movs	r2, #0
 80020fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020fe:	480c      	ldr	r0, [pc, #48]	@ (8002130 <moveRight+0x64>)
 8002100:	f000 fd01 	bl	8002b06 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 0);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2200      	movs	r2, #0
 800210a:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, 7200);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8002114:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, 0);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2200      	movs	r2, #0
 800211c:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, 7200);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8002126:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40010c00 	.word	0x40010c00

08002134 <moveTurnLeft>:
void moveTurnLeft(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEFT_MOTOR_GO_GPIO_Port, LEFT_MOTOR_GO_Pin, GPIO_PIN_SET);
 800213c:	2201      	movs	r2, #1
 800213e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002142:	4816      	ldr	r0, [pc, #88]	@ (800219c <moveTurnLeft+0x68>)
 8002144:	f000 fcdf 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT2_MOTOR_GO_GPIO_Port, LEFT2_MOTOR_GO_Pin, GPIO_PIN_SET);
 8002148:	2201      	movs	r2, #1
 800214a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800214e:	4813      	ldr	r0, [pc, #76]	@ (800219c <moveTurnLeft+0x68>)
 8002150:	f000 fcd9 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_GO_GPIO_Port, RIGHT_MOTOR_GO_Pin, GPIO_PIN_RESET);
 8002154:	2200      	movs	r2, #0
 8002156:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800215a:	4810      	ldr	r0, [pc, #64]	@ (800219c <moveTurnLeft+0x68>)
 800215c:	f000 fcd3 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT2_MOTOR_GO_GPIO_Port, RIGHT2_MOTOR_GO_Pin, GPIO_PIN_RESET);
 8002160:	2200      	movs	r2, #0
 8002162:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002166:	480d      	ldr	r0, [pc, #52]	@ (800219c <moveTurnLeft+0x68>)
 8002168:	f000 fccd 	bl	8002b06 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 7200);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8002174:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, 7200);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 800217e:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, 7200);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8002188:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, 7200);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8002192:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40010c00 	.word	0x40010c00

080021a0 <moveTurnRight>:
void moveTurnRight(TIM_HandleTypeDef *htim)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEFT_MOTOR_GO_GPIO_Port, LEFT_MOTOR_GO_Pin, GPIO_PIN_RESET);
 80021a8:	2200      	movs	r2, #0
 80021aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021ae:	4814      	ldr	r0, [pc, #80]	@ (8002200 <moveTurnRight+0x60>)
 80021b0:	f000 fca9 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT2_MOTOR_GO_GPIO_Port, LEFT2_MOTOR_GO_Pin, GPIO_PIN_RESET);
 80021b4:	2200      	movs	r2, #0
 80021b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021ba:	4811      	ldr	r0, [pc, #68]	@ (8002200 <moveTurnRight+0x60>)
 80021bc:	f000 fca3 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_GO_GPIO_Port, RIGHT_MOTOR_GO_Pin, GPIO_PIN_SET);
 80021c0:	2201      	movs	r2, #1
 80021c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021c6:	480e      	ldr	r0, [pc, #56]	@ (8002200 <moveTurnRight+0x60>)
 80021c8:	f000 fc9d 	bl	8002b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT2_MOTOR_GO_GPIO_Port, RIGHT2_MOTOR_GO_Pin, GPIO_PIN_SET);
 80021cc:	2201      	movs	r2, #1
 80021ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021d2:	480b      	ldr	r0, [pc, #44]	@ (8002200 <moveTurnRight+0x60>)
 80021d4:	f000 fc97 	bl	8002b06 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 0);//L1满速前进
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2200      	movs	r2, #0
 80021de:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, 0);//L2满速前进
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2200      	movs	r2, #0
 80021e6:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, 0);//R1满速前进
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2200      	movs	r2, #0
 80021ee:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, 0);//L1满速前进
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2200      	movs	r2, #0
 80021f6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40010c00 	.word	0x40010c00

08002204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002208:	4b08      	ldr	r3, [pc, #32]	@ (800222c <HAL_Init+0x28>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a07      	ldr	r2, [pc, #28]	@ (800222c <HAL_Init+0x28>)
 800220e:	f043 0310 	orr.w	r3, r3, #16
 8002212:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002214:	2003      	movs	r0, #3
 8002216:	f000 f947 	bl	80024a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800221a:	2000      	movs	r0, #0
 800221c:	f000 f808 	bl	8002230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002220:	f7ff f96c 	bl	80014fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40022000 	.word	0x40022000

08002230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002238:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <HAL_InitTick+0x54>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <HAL_InitTick+0x58>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002246:	fbb3 f3f1 	udiv	r3, r3, r1
 800224a:	fbb2 f3f3 	udiv	r3, r2, r3
 800224e:	4618      	mov	r0, r3
 8002250:	f000 f95f 	bl	8002512 <HAL_SYSTICK_Config>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e00e      	b.n	800227c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b0f      	cmp	r3, #15
 8002262:	d80a      	bhi.n	800227a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002264:	2200      	movs	r2, #0
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f000 f927 	bl	80024be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002270:	4a06      	ldr	r2, [pc, #24]	@ (800228c <HAL_InitTick+0x5c>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e000      	b.n	800227c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000004 	.word	0x20000004
 8002288:	2000000c 	.word	0x2000000c
 800228c:	20000008 	.word	0x20000008

08002290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002294:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <HAL_IncTick+0x1c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <HAL_IncTick+0x20>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	4a03      	ldr	r2, [pc, #12]	@ (80022b0 <HAL_IncTick+0x20>)
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	2000000c 	.word	0x2000000c
 80022b0:	200001a0 	.word	0x200001a0

080022b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return uwTick;
 80022b8:	4b02      	ldr	r3, [pc, #8]	@ (80022c4 <HAL_GetTick+0x10>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	200001a0 	.word	0x200001a0

080022c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d0:	f7ff fff0 	bl	80022b4 <HAL_GetTick>
 80022d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d005      	beq.n	80022ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022e2:	4b0a      	ldr	r3, [pc, #40]	@ (800230c <HAL_Delay+0x44>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4413      	add	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ee:	bf00      	nop
 80022f0:	f7ff ffe0 	bl	80022b4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d8f7      	bhi.n	80022f0 <HAL_Delay+0x28>
  {
  }
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	2000000c 	.word	0x2000000c

08002310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002320:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800232c:	4013      	ands	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002338:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800233c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002342:	4a04      	ldr	r2, [pc, #16]	@ (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	60d3      	str	r3, [r2, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800235c:	4b04      	ldr	r3, [pc, #16]	@ (8002370 <__NVIC_GetPriorityGrouping+0x18>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	f003 0307 	and.w	r3, r3, #7
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	2b00      	cmp	r3, #0
 8002384:	db0b      	blt.n	800239e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4906      	ldr	r1, [pc, #24]	@ (80023a8 <__NVIC_EnableIRQ+0x34>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	2001      	movs	r0, #1
 8002396:	fa00 f202 	lsl.w	r2, r0, r2
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100

080023ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	6039      	str	r1, [r7, #0]
 80023b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	db0a      	blt.n	80023d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	490c      	ldr	r1, [pc, #48]	@ (80023f8 <__NVIC_SetPriority+0x4c>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	0112      	lsls	r2, r2, #4
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	440b      	add	r3, r1
 80023d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d4:	e00a      	b.n	80023ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4908      	ldr	r1, [pc, #32]	@ (80023fc <__NVIC_SetPriority+0x50>)
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	3b04      	subs	r3, #4
 80023e4:	0112      	lsls	r2, r2, #4
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	440b      	add	r3, r1
 80023ea:	761a      	strb	r2, [r3, #24]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000e100 	.word	0xe000e100
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	@ 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f1c3 0307 	rsb	r3, r3, #7
 800241a:	2b04      	cmp	r3, #4
 800241c:	bf28      	it	cs
 800241e:	2304      	movcs	r3, #4
 8002420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3304      	adds	r3, #4
 8002426:	2b06      	cmp	r3, #6
 8002428:	d902      	bls.n	8002430 <NVIC_EncodePriority+0x30>
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3b03      	subs	r3, #3
 800242e:	e000      	b.n	8002432 <NVIC_EncodePriority+0x32>
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	f04f 32ff 	mov.w	r2, #4294967295
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43da      	mvns	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	401a      	ands	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002448:	f04f 31ff 	mov.w	r1, #4294967295
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	43d9      	mvns	r1, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	4313      	orrs	r3, r2
         );
}
 800245a:	4618      	mov	r0, r3
 800245c:	3724      	adds	r7, #36	@ 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002474:	d301      	bcc.n	800247a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002476:	2301      	movs	r3, #1
 8002478:	e00f      	b.n	800249a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247a:	4a0a      	ldr	r2, [pc, #40]	@ (80024a4 <SysTick_Config+0x40>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002482:	210f      	movs	r1, #15
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f7ff ff90 	bl	80023ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800248c:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <SysTick_Config+0x40>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002492:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <SysTick_Config+0x40>)
 8002494:	2207      	movs	r2, #7
 8002496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	e000e010 	.word	0xe000e010

080024a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ff2d 	bl	8002310 <__NVIC_SetPriorityGrouping>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d0:	f7ff ff42 	bl	8002358 <__NVIC_GetPriorityGrouping>
 80024d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	6978      	ldr	r0, [r7, #20]
 80024dc:	f7ff ff90 	bl	8002400 <NVIC_EncodePriority>
 80024e0:	4602      	mov	r2, r0
 80024e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff5f 	bl	80023ac <__NVIC_SetPriority>
}
 80024ee:	bf00      	nop
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff35 	bl	8002374 <__NVIC_EnableIRQ>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ffa2 	bl	8002464 <SysTick_Config>
 8002520:	4603      	mov	r3, r0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800252a:	b480      	push	{r7}
 800252c:	b085      	sub	sp, #20
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d008      	beq.n	8002554 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2204      	movs	r2, #4
 8002546:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e020      	b.n	8002596 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 020e 	bic.w	r2, r2, #14
 8002562:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800257c:	2101      	movs	r1, #1
 800257e:	fa01 f202 	lsl.w	r2, r1, r2
 8002582:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002594:	7bfb      	ldrb	r3, [r7, #15]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d005      	beq.n	80025c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2204      	movs	r2, #4
 80025bc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	e0d6      	b.n	8002772 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 020e 	bic.w	r2, r2, #14
 80025d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4b64      	ldr	r3, [pc, #400]	@ (800277c <HAL_DMA_Abort_IT+0x1dc>)
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d958      	bls.n	80026a2 <HAL_DMA_Abort_IT+0x102>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a62      	ldr	r2, [pc, #392]	@ (8002780 <HAL_DMA_Abort_IT+0x1e0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d04f      	beq.n	800269a <HAL_DMA_Abort_IT+0xfa>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a61      	ldr	r2, [pc, #388]	@ (8002784 <HAL_DMA_Abort_IT+0x1e4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d048      	beq.n	8002696 <HAL_DMA_Abort_IT+0xf6>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a5f      	ldr	r2, [pc, #380]	@ (8002788 <HAL_DMA_Abort_IT+0x1e8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d040      	beq.n	8002690 <HAL_DMA_Abort_IT+0xf0>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a5e      	ldr	r2, [pc, #376]	@ (800278c <HAL_DMA_Abort_IT+0x1ec>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d038      	beq.n	800268a <HAL_DMA_Abort_IT+0xea>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a5c      	ldr	r2, [pc, #368]	@ (8002790 <HAL_DMA_Abort_IT+0x1f0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d030      	beq.n	8002684 <HAL_DMA_Abort_IT+0xe4>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a5b      	ldr	r2, [pc, #364]	@ (8002794 <HAL_DMA_Abort_IT+0x1f4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d028      	beq.n	800267e <HAL_DMA_Abort_IT+0xde>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a52      	ldr	r2, [pc, #328]	@ (800277c <HAL_DMA_Abort_IT+0x1dc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d020      	beq.n	8002678 <HAL_DMA_Abort_IT+0xd8>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a57      	ldr	r2, [pc, #348]	@ (8002798 <HAL_DMA_Abort_IT+0x1f8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d019      	beq.n	8002674 <HAL_DMA_Abort_IT+0xd4>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a55      	ldr	r2, [pc, #340]	@ (800279c <HAL_DMA_Abort_IT+0x1fc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d012      	beq.n	8002670 <HAL_DMA_Abort_IT+0xd0>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a54      	ldr	r2, [pc, #336]	@ (80027a0 <HAL_DMA_Abort_IT+0x200>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00a      	beq.n	800266a <HAL_DMA_Abort_IT+0xca>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a52      	ldr	r2, [pc, #328]	@ (80027a4 <HAL_DMA_Abort_IT+0x204>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d102      	bne.n	8002664 <HAL_DMA_Abort_IT+0xc4>
 800265e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002662:	e01b      	b.n	800269c <HAL_DMA_Abort_IT+0xfc>
 8002664:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002668:	e018      	b.n	800269c <HAL_DMA_Abort_IT+0xfc>
 800266a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800266e:	e015      	b.n	800269c <HAL_DMA_Abort_IT+0xfc>
 8002670:	2310      	movs	r3, #16
 8002672:	e013      	b.n	800269c <HAL_DMA_Abort_IT+0xfc>
 8002674:	2301      	movs	r3, #1
 8002676:	e011      	b.n	800269c <HAL_DMA_Abort_IT+0xfc>
 8002678:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800267c:	e00e      	b.n	800269c <HAL_DMA_Abort_IT+0xfc>
 800267e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002682:	e00b      	b.n	800269c <HAL_DMA_Abort_IT+0xfc>
 8002684:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002688:	e008      	b.n	800269c <HAL_DMA_Abort_IT+0xfc>
 800268a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800268e:	e005      	b.n	800269c <HAL_DMA_Abort_IT+0xfc>
 8002690:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002694:	e002      	b.n	800269c <HAL_DMA_Abort_IT+0xfc>
 8002696:	2310      	movs	r3, #16
 8002698:	e000      	b.n	800269c <HAL_DMA_Abort_IT+0xfc>
 800269a:	2301      	movs	r3, #1
 800269c:	4a42      	ldr	r2, [pc, #264]	@ (80027a8 <HAL_DMA_Abort_IT+0x208>)
 800269e:	6053      	str	r3, [r2, #4]
 80026a0:	e057      	b.n	8002752 <HAL_DMA_Abort_IT+0x1b2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a36      	ldr	r2, [pc, #216]	@ (8002780 <HAL_DMA_Abort_IT+0x1e0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d04f      	beq.n	800274c <HAL_DMA_Abort_IT+0x1ac>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a34      	ldr	r2, [pc, #208]	@ (8002784 <HAL_DMA_Abort_IT+0x1e4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d048      	beq.n	8002748 <HAL_DMA_Abort_IT+0x1a8>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a33      	ldr	r2, [pc, #204]	@ (8002788 <HAL_DMA_Abort_IT+0x1e8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d040      	beq.n	8002742 <HAL_DMA_Abort_IT+0x1a2>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a31      	ldr	r2, [pc, #196]	@ (800278c <HAL_DMA_Abort_IT+0x1ec>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d038      	beq.n	800273c <HAL_DMA_Abort_IT+0x19c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a30      	ldr	r2, [pc, #192]	@ (8002790 <HAL_DMA_Abort_IT+0x1f0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d030      	beq.n	8002736 <HAL_DMA_Abort_IT+0x196>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002794 <HAL_DMA_Abort_IT+0x1f4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d028      	beq.n	8002730 <HAL_DMA_Abort_IT+0x190>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a26      	ldr	r2, [pc, #152]	@ (800277c <HAL_DMA_Abort_IT+0x1dc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d020      	beq.n	800272a <HAL_DMA_Abort_IT+0x18a>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002798 <HAL_DMA_Abort_IT+0x1f8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d019      	beq.n	8002726 <HAL_DMA_Abort_IT+0x186>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a29      	ldr	r2, [pc, #164]	@ (800279c <HAL_DMA_Abort_IT+0x1fc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d012      	beq.n	8002722 <HAL_DMA_Abort_IT+0x182>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a27      	ldr	r2, [pc, #156]	@ (80027a0 <HAL_DMA_Abort_IT+0x200>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00a      	beq.n	800271c <HAL_DMA_Abort_IT+0x17c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a26      	ldr	r2, [pc, #152]	@ (80027a4 <HAL_DMA_Abort_IT+0x204>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d102      	bne.n	8002716 <HAL_DMA_Abort_IT+0x176>
 8002710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002714:	e01b      	b.n	800274e <HAL_DMA_Abort_IT+0x1ae>
 8002716:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800271a:	e018      	b.n	800274e <HAL_DMA_Abort_IT+0x1ae>
 800271c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002720:	e015      	b.n	800274e <HAL_DMA_Abort_IT+0x1ae>
 8002722:	2310      	movs	r3, #16
 8002724:	e013      	b.n	800274e <HAL_DMA_Abort_IT+0x1ae>
 8002726:	2301      	movs	r3, #1
 8002728:	e011      	b.n	800274e <HAL_DMA_Abort_IT+0x1ae>
 800272a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800272e:	e00e      	b.n	800274e <HAL_DMA_Abort_IT+0x1ae>
 8002730:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002734:	e00b      	b.n	800274e <HAL_DMA_Abort_IT+0x1ae>
 8002736:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800273a:	e008      	b.n	800274e <HAL_DMA_Abort_IT+0x1ae>
 800273c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002740:	e005      	b.n	800274e <HAL_DMA_Abort_IT+0x1ae>
 8002742:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002746:	e002      	b.n	800274e <HAL_DMA_Abort_IT+0x1ae>
 8002748:	2310      	movs	r3, #16
 800274a:	e000      	b.n	800274e <HAL_DMA_Abort_IT+0x1ae>
 800274c:	2301      	movs	r3, #1
 800274e:	4a17      	ldr	r2, [pc, #92]	@ (80027ac <HAL_DMA_Abort_IT+0x20c>)
 8002750:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	4798      	blx	r3
    } 
  }
  return status;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40020080 	.word	0x40020080
 8002780:	40020008 	.word	0x40020008
 8002784:	4002001c 	.word	0x4002001c
 8002788:	40020030 	.word	0x40020030
 800278c:	40020044 	.word	0x40020044
 8002790:	40020058 	.word	0x40020058
 8002794:	4002006c 	.word	0x4002006c
 8002798:	40020408 	.word	0x40020408
 800279c:	4002041c 	.word	0x4002041c
 80027a0:	40020430 	.word	0x40020430
 80027a4:	40020444 	.word	0x40020444
 80027a8:	40020400 	.word	0x40020400
 80027ac:	40020000 	.word	0x40020000

080027b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b08b      	sub	sp, #44	@ 0x2c
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027be:	2300      	movs	r3, #0
 80027c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027c2:	e179      	b.n	8002ab8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027c4:	2201      	movs	r2, #1
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	429a      	cmp	r2, r3
 80027de:	f040 8168 	bne.w	8002ab2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4a96      	ldr	r2, [pc, #600]	@ (8002a40 <HAL_GPIO_Init+0x290>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d05e      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 80027ec:	4a94      	ldr	r2, [pc, #592]	@ (8002a40 <HAL_GPIO_Init+0x290>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d875      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 80027f2:	4a94      	ldr	r2, [pc, #592]	@ (8002a44 <HAL_GPIO_Init+0x294>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d058      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 80027f8:	4a92      	ldr	r2, [pc, #584]	@ (8002a44 <HAL_GPIO_Init+0x294>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d86f      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 80027fe:	4a92      	ldr	r2, [pc, #584]	@ (8002a48 <HAL_GPIO_Init+0x298>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d052      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 8002804:	4a90      	ldr	r2, [pc, #576]	@ (8002a48 <HAL_GPIO_Init+0x298>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d869      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 800280a:	4a90      	ldr	r2, [pc, #576]	@ (8002a4c <HAL_GPIO_Init+0x29c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d04c      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 8002810:	4a8e      	ldr	r2, [pc, #568]	@ (8002a4c <HAL_GPIO_Init+0x29c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d863      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 8002816:	4a8e      	ldr	r2, [pc, #568]	@ (8002a50 <HAL_GPIO_Init+0x2a0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d046      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 800281c:	4a8c      	ldr	r2, [pc, #560]	@ (8002a50 <HAL_GPIO_Init+0x2a0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d85d      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 8002822:	2b12      	cmp	r3, #18
 8002824:	d82a      	bhi.n	800287c <HAL_GPIO_Init+0xcc>
 8002826:	2b12      	cmp	r3, #18
 8002828:	d859      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 800282a:	a201      	add	r2, pc, #4	@ (adr r2, 8002830 <HAL_GPIO_Init+0x80>)
 800282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002830:	080028ab 	.word	0x080028ab
 8002834:	08002885 	.word	0x08002885
 8002838:	08002897 	.word	0x08002897
 800283c:	080028d9 	.word	0x080028d9
 8002840:	080028df 	.word	0x080028df
 8002844:	080028df 	.word	0x080028df
 8002848:	080028df 	.word	0x080028df
 800284c:	080028df 	.word	0x080028df
 8002850:	080028df 	.word	0x080028df
 8002854:	080028df 	.word	0x080028df
 8002858:	080028df 	.word	0x080028df
 800285c:	080028df 	.word	0x080028df
 8002860:	080028df 	.word	0x080028df
 8002864:	080028df 	.word	0x080028df
 8002868:	080028df 	.word	0x080028df
 800286c:	080028df 	.word	0x080028df
 8002870:	080028df 	.word	0x080028df
 8002874:	0800288d 	.word	0x0800288d
 8002878:	080028a1 	.word	0x080028a1
 800287c:	4a75      	ldr	r2, [pc, #468]	@ (8002a54 <HAL_GPIO_Init+0x2a4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002882:	e02c      	b.n	80028de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	623b      	str	r3, [r7, #32]
          break;
 800288a:	e029      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	3304      	adds	r3, #4
 8002892:	623b      	str	r3, [r7, #32]
          break;
 8002894:	e024      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	3308      	adds	r3, #8
 800289c:	623b      	str	r3, [r7, #32]
          break;
 800289e:	e01f      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	330c      	adds	r3, #12
 80028a6:	623b      	str	r3, [r7, #32]
          break;
 80028a8:	e01a      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028b2:	2304      	movs	r3, #4
 80028b4:	623b      	str	r3, [r7, #32]
          break;
 80028b6:	e013      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d105      	bne.n	80028cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028c0:	2308      	movs	r3, #8
 80028c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	611a      	str	r2, [r3, #16]
          break;
 80028ca:	e009      	b.n	80028e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028cc:	2308      	movs	r3, #8
 80028ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	615a      	str	r2, [r3, #20]
          break;
 80028d6:	e003      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028d8:	2300      	movs	r3, #0
 80028da:	623b      	str	r3, [r7, #32]
          break;
 80028dc:	e000      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          break;
 80028de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2bff      	cmp	r3, #255	@ 0xff
 80028e4:	d801      	bhi.n	80028ea <HAL_GPIO_Init+0x13a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	e001      	b.n	80028ee <HAL_GPIO_Init+0x13e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3304      	adds	r3, #4
 80028ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2bff      	cmp	r3, #255	@ 0xff
 80028f4:	d802      	bhi.n	80028fc <HAL_GPIO_Init+0x14c>
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	e002      	b.n	8002902 <HAL_GPIO_Init+0x152>
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fe:	3b08      	subs	r3, #8
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	210f      	movs	r1, #15
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	fa01 f303 	lsl.w	r3, r1, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	401a      	ands	r2, r3
 8002914:	6a39      	ldr	r1, [r7, #32]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	fa01 f303 	lsl.w	r3, r1, r3
 800291c:	431a      	orrs	r2, r3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 80c1 	beq.w	8002ab2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002930:	4b49      	ldr	r3, [pc, #292]	@ (8002a58 <HAL_GPIO_Init+0x2a8>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	4a48      	ldr	r2, [pc, #288]	@ (8002a58 <HAL_GPIO_Init+0x2a8>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6193      	str	r3, [r2, #24]
 800293c:	4b46      	ldr	r3, [pc, #280]	@ (8002a58 <HAL_GPIO_Init+0x2a8>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002948:	4a44      	ldr	r2, [pc, #272]	@ (8002a5c <HAL_GPIO_Init+0x2ac>)
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	089b      	lsrs	r3, r3, #2
 800294e:	3302      	adds	r3, #2
 8002950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002954:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	220f      	movs	r2, #15
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4013      	ands	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a3c      	ldr	r2, [pc, #240]	@ (8002a60 <HAL_GPIO_Init+0x2b0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d01f      	beq.n	80029b4 <HAL_GPIO_Init+0x204>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a3b      	ldr	r2, [pc, #236]	@ (8002a64 <HAL_GPIO_Init+0x2b4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d019      	beq.n	80029b0 <HAL_GPIO_Init+0x200>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a3a      	ldr	r2, [pc, #232]	@ (8002a68 <HAL_GPIO_Init+0x2b8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d013      	beq.n	80029ac <HAL_GPIO_Init+0x1fc>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a39      	ldr	r2, [pc, #228]	@ (8002a6c <HAL_GPIO_Init+0x2bc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00d      	beq.n	80029a8 <HAL_GPIO_Init+0x1f8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a38      	ldr	r2, [pc, #224]	@ (8002a70 <HAL_GPIO_Init+0x2c0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d007      	beq.n	80029a4 <HAL_GPIO_Init+0x1f4>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a37      	ldr	r2, [pc, #220]	@ (8002a74 <HAL_GPIO_Init+0x2c4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d101      	bne.n	80029a0 <HAL_GPIO_Init+0x1f0>
 800299c:	2305      	movs	r3, #5
 800299e:	e00a      	b.n	80029b6 <HAL_GPIO_Init+0x206>
 80029a0:	2306      	movs	r3, #6
 80029a2:	e008      	b.n	80029b6 <HAL_GPIO_Init+0x206>
 80029a4:	2304      	movs	r3, #4
 80029a6:	e006      	b.n	80029b6 <HAL_GPIO_Init+0x206>
 80029a8:	2303      	movs	r3, #3
 80029aa:	e004      	b.n	80029b6 <HAL_GPIO_Init+0x206>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e002      	b.n	80029b6 <HAL_GPIO_Init+0x206>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_GPIO_Init+0x206>
 80029b4:	2300      	movs	r3, #0
 80029b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b8:	f002 0203 	and.w	r2, r2, #3
 80029bc:	0092      	lsls	r2, r2, #2
 80029be:	4093      	lsls	r3, r2
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029c6:	4925      	ldr	r1, [pc, #148]	@ (8002a5c <HAL_GPIO_Init+0x2ac>)
 80029c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	3302      	adds	r3, #2
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d006      	beq.n	80029ee <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029e0:	4b25      	ldr	r3, [pc, #148]	@ (8002a78 <HAL_GPIO_Init+0x2c8>)
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	4924      	ldr	r1, [pc, #144]	@ (8002a78 <HAL_GPIO_Init+0x2c8>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	608b      	str	r3, [r1, #8]
 80029ec:	e006      	b.n	80029fc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029ee:	4b22      	ldr	r3, [pc, #136]	@ (8002a78 <HAL_GPIO_Init+0x2c8>)
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	4920      	ldr	r1, [pc, #128]	@ (8002a78 <HAL_GPIO_Init+0x2c8>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d006      	beq.n	8002a16 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a08:	4b1b      	ldr	r3, [pc, #108]	@ (8002a78 <HAL_GPIO_Init+0x2c8>)
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	491a      	ldr	r1, [pc, #104]	@ (8002a78 <HAL_GPIO_Init+0x2c8>)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60cb      	str	r3, [r1, #12]
 8002a14:	e006      	b.n	8002a24 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a16:	4b18      	ldr	r3, [pc, #96]	@ (8002a78 <HAL_GPIO_Init+0x2c8>)
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	4916      	ldr	r1, [pc, #88]	@ (8002a78 <HAL_GPIO_Init+0x2c8>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d025      	beq.n	8002a7c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a30:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <HAL_GPIO_Init+0x2c8>)
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	4910      	ldr	r1, [pc, #64]	@ (8002a78 <HAL_GPIO_Init+0x2c8>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]
 8002a3c:	e025      	b.n	8002a8a <HAL_GPIO_Init+0x2da>
 8002a3e:	bf00      	nop
 8002a40:	10320000 	.word	0x10320000
 8002a44:	10310000 	.word	0x10310000
 8002a48:	10220000 	.word	0x10220000
 8002a4c:	10210000 	.word	0x10210000
 8002a50:	10120000 	.word	0x10120000
 8002a54:	10110000 	.word	0x10110000
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	40010800 	.word	0x40010800
 8002a64:	40010c00 	.word	0x40010c00
 8002a68:	40011000 	.word	0x40011000
 8002a6c:	40011400 	.word	0x40011400
 8002a70:	40011800 	.word	0x40011800
 8002a74:	40011c00 	.word	0x40011c00
 8002a78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a7c:	4b15      	ldr	r3, [pc, #84]	@ (8002ad4 <HAL_GPIO_Init+0x324>)
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	4913      	ldr	r1, [pc, #76]	@ (8002ad4 <HAL_GPIO_Init+0x324>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d006      	beq.n	8002aa4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a96:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad4 <HAL_GPIO_Init+0x324>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	490e      	ldr	r1, [pc, #56]	@ (8002ad4 <HAL_GPIO_Init+0x324>)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]
 8002aa2:	e006      	b.n	8002ab2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <HAL_GPIO_Init+0x324>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	4909      	ldr	r1, [pc, #36]	@ (8002ad4 <HAL_GPIO_Init+0x324>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f47f ae7e 	bne.w	80027c4 <HAL_GPIO_Init+0x14>
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	372c      	adds	r7, #44	@ 0x2c
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	40010400 	.word	0x40010400

08002ad8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	887b      	ldrh	r3, [r7, #2]
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
 8002af4:	e001      	b.n	8002afa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr

08002b06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	807b      	strh	r3, [r7, #2]
 8002b12:	4613      	mov	r3, r2
 8002b14:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b16:	787b      	ldrb	r3, [r7, #1]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1c:	887a      	ldrh	r2, [r7, #2]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b22:	e003      	b.n	8002b2c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b24:	887b      	ldrh	r3, [r7, #2]
 8002b26:	041a      	lsls	r2, r3, #16
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	611a      	str	r2, [r3, #16]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b085      	sub	sp, #20
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b48:	887a      	ldrh	r2, [r7, #2]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	041a      	lsls	r2, r3, #16
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	43d9      	mvns	r1, r3
 8002b54:	887b      	ldrh	r3, [r7, #2]
 8002b56:	400b      	ands	r3, r1
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	611a      	str	r2, [r3, #16]
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b72:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d006      	beq.n	8002b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b7e:	4a05      	ldr	r2, [pc, #20]	@ (8002b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe fd42 	bl	8001610 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40010400 	.word	0x40010400

08002b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e272      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 8087 	beq.w	8002cc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb8:	4b92      	ldr	r3, [pc, #584]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d00c      	beq.n	8002bde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bc4:	4b8f      	ldr	r3, [pc, #572]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d112      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x5e>
 8002bd0:	4b8c      	ldr	r3, [pc, #560]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bdc:	d10b      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bde:	4b89      	ldr	r3, [pc, #548]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d06c      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x12c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d168      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e24c      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x76>
 8002c00:	4b80      	ldr	r3, [pc, #512]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a7f      	ldr	r2, [pc, #508]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	e02e      	b.n	8002c6c <HAL_RCC_OscConfig+0xd4>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x98>
 8002c16:	4b7b      	ldr	r3, [pc, #492]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a7a      	ldr	r2, [pc, #488]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b78      	ldr	r3, [pc, #480]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a77      	ldr	r2, [pc, #476]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e01d      	b.n	8002c6c <HAL_RCC_OscConfig+0xd4>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0xbc>
 8002c3a:	4b72      	ldr	r3, [pc, #456]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a71      	ldr	r2, [pc, #452]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b6f      	ldr	r3, [pc, #444]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6e      	ldr	r2, [pc, #440]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e00b      	b.n	8002c6c <HAL_RCC_OscConfig+0xd4>
 8002c54:	4b6b      	ldr	r3, [pc, #428]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6a      	ldr	r2, [pc, #424]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b68      	ldr	r3, [pc, #416]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a67      	ldr	r2, [pc, #412]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7ff fb1e 	bl	80022b4 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7ff fb1a 	bl	80022b4 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	@ 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e200      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0xe4>
 8002c9a:	e014      	b.n	8002cc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7ff fb0a 	bl	80022b4 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7ff fb06 	bl	80022b4 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	@ 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e1ec      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	4b53      	ldr	r3, [pc, #332]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x10c>
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d063      	beq.n	8002d9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cd2:	4b4c      	ldr	r3, [pc, #304]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cde:	4b49      	ldr	r3, [pc, #292]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d11c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x18c>
 8002cea:	4b46      	ldr	r3, [pc, #280]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d116      	bne.n	8002d24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	4b43      	ldr	r3, [pc, #268]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_RCC_OscConfig+0x176>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e1c0      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4939      	ldr	r1, [pc, #228]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d22:	e03a      	b.n	8002d9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d020      	beq.n	8002d6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2c:	4b36      	ldr	r3, [pc, #216]	@ (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7ff fabf 	bl	80022b4 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3a:	f7ff fabb 	bl	80022b4 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e1a1      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b2a      	ldr	r3, [pc, #168]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4927      	ldr	r1, [pc, #156]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]
 8002d6c:	e015      	b.n	8002d9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6e:	4b26      	ldr	r3, [pc, #152]	@ (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7ff fa9e 	bl	80022b4 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7c:	f7ff fa9a 	bl	80022b4 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e180      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d03a      	beq.n	8002e1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d019      	beq.n	8002de2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dae:	4b17      	ldr	r3, [pc, #92]	@ (8002e0c <HAL_RCC_OscConfig+0x274>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db4:	f7ff fa7e 	bl	80022b4 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbc:	f7ff fa7a 	bl	80022b4 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e160      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f000 face 	bl	800337c <RCC_Delay>
 8002de0:	e01c      	b.n	8002e1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de2:	4b0a      	ldr	r3, [pc, #40]	@ (8002e0c <HAL_RCC_OscConfig+0x274>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de8:	f7ff fa64 	bl	80022b4 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dee:	e00f      	b.n	8002e10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df0:	f7ff fa60 	bl	80022b4 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d908      	bls.n	8002e10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e146      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
 8002e08:	42420000 	.word	0x42420000
 8002e0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e10:	4b92      	ldr	r3, [pc, #584]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e9      	bne.n	8002df0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80a6 	beq.w	8002f76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2e:	4b8b      	ldr	r3, [pc, #556]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10d      	bne.n	8002e56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	4b88      	ldr	r3, [pc, #544]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4a87      	ldr	r2, [pc, #540]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e44:	61d3      	str	r3, [r2, #28]
 8002e46:	4b85      	ldr	r3, [pc, #532]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e52:	2301      	movs	r3, #1
 8002e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e56:	4b82      	ldr	r3, [pc, #520]	@ (8003060 <HAL_RCC_OscConfig+0x4c8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d118      	bne.n	8002e94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e62:	4b7f      	ldr	r3, [pc, #508]	@ (8003060 <HAL_RCC_OscConfig+0x4c8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a7e      	ldr	r2, [pc, #504]	@ (8003060 <HAL_RCC_OscConfig+0x4c8>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6e:	f7ff fa21 	bl	80022b4 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e76:	f7ff fa1d 	bl	80022b4 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b64      	cmp	r3, #100	@ 0x64
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e103      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	4b75      	ldr	r3, [pc, #468]	@ (8003060 <HAL_RCC_OscConfig+0x4c8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCC_OscConfig+0x312>
 8002e9c:	4b6f      	ldr	r3, [pc, #444]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	4a6e      	ldr	r2, [pc, #440]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6213      	str	r3, [r2, #32]
 8002ea8:	e02d      	b.n	8002f06 <HAL_RCC_OscConfig+0x36e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x334>
 8002eb2:	4b6a      	ldr	r3, [pc, #424]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a69      	ldr	r2, [pc, #420]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	6213      	str	r3, [r2, #32]
 8002ebe:	4b67      	ldr	r3, [pc, #412]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4a66      	ldr	r2, [pc, #408]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	6213      	str	r3, [r2, #32]
 8002eca:	e01c      	b.n	8002f06 <HAL_RCC_OscConfig+0x36e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b05      	cmp	r3, #5
 8002ed2:	d10c      	bne.n	8002eee <HAL_RCC_OscConfig+0x356>
 8002ed4:	4b61      	ldr	r3, [pc, #388]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4a60      	ldr	r2, [pc, #384]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002eda:	f043 0304 	orr.w	r3, r3, #4
 8002ede:	6213      	str	r3, [r2, #32]
 8002ee0:	4b5e      	ldr	r3, [pc, #376]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4a5d      	ldr	r2, [pc, #372]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6213      	str	r3, [r2, #32]
 8002eec:	e00b      	b.n	8002f06 <HAL_RCC_OscConfig+0x36e>
 8002eee:	4b5b      	ldr	r3, [pc, #364]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4a5a      	ldr	r2, [pc, #360]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	6213      	str	r3, [r2, #32]
 8002efa:	4b58      	ldr	r3, [pc, #352]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a57      	ldr	r2, [pc, #348]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	f023 0304 	bic.w	r3, r3, #4
 8002f04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d015      	beq.n	8002f3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0e:	f7ff f9d1 	bl	80022b4 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f14:	e00a      	b.n	8002f2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7ff f9cd 	bl	80022b4 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e0b1      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2c:	4b4b      	ldr	r3, [pc, #300]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0ee      	beq.n	8002f16 <HAL_RCC_OscConfig+0x37e>
 8002f38:	e014      	b.n	8002f64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3a:	f7ff f9bb 	bl	80022b4 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7ff f9b7 	bl	80022b4 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e09b      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f58:	4b40      	ldr	r3, [pc, #256]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1ee      	bne.n	8002f42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d105      	bne.n	8002f76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6a:	4b3c      	ldr	r3, [pc, #240]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	4a3b      	ldr	r2, [pc, #236]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 8087 	beq.w	800308e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f80:	4b36      	ldr	r3, [pc, #216]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d061      	beq.n	8003050 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d146      	bne.n	8003022 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f94:	4b33      	ldr	r3, [pc, #204]	@ (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7ff f98b 	bl	80022b4 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7ff f987 	bl	80022b4 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e06d      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb4:	4b29      	ldr	r3, [pc, #164]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f0      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc8:	d108      	bne.n	8002fdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fca:	4b24      	ldr	r3, [pc, #144]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	4921      	ldr	r1, [pc, #132]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a19      	ldr	r1, [r3, #32]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fec:	430b      	orrs	r3, r1
 8002fee:	491b      	ldr	r1, [pc, #108]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7ff f95b 	bl	80022b4 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003002:	f7ff f957 	bl	80022b4 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e03d      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003014:	4b11      	ldr	r3, [pc, #68]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x46a>
 8003020:	e035      	b.n	800308e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003022:	4b10      	ldr	r3, [pc, #64]	@ (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7ff f944 	bl	80022b4 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003030:	f7ff f940 	bl	80022b4 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e026      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003042:	4b06      	ldr	r3, [pc, #24]	@ (800305c <HAL_RCC_OscConfig+0x4c4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x498>
 800304e:	e01e      	b.n	800308e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d107      	bne.n	8003068 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e019      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
 800305c:	40021000 	.word	0x40021000
 8003060:	40007000 	.word	0x40007000
 8003064:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003068:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <HAL_RCC_OscConfig+0x500>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	429a      	cmp	r2, r3
 800307a:	d106      	bne.n	800308a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d001      	beq.n	800308e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000

0800309c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0d0      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b0:	4b6a      	ldr	r3, [pc, #424]	@ (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d910      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b67      	ldr	r3, [pc, #412]	@ (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 0207 	bic.w	r2, r3, #7
 80030c6:	4965      	ldr	r1, [pc, #404]	@ (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b63      	ldr	r3, [pc, #396]	@ (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0b8      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f8:	4b59      	ldr	r3, [pc, #356]	@ (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a58      	ldr	r2, [pc, #352]	@ (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003102:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003110:	4b53      	ldr	r3, [pc, #332]	@ (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4a52      	ldr	r2, [pc, #328]	@ (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800311a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311c:	4b50      	ldr	r3, [pc, #320]	@ (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	494d      	ldr	r1, [pc, #308]	@ (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d040      	beq.n	80031bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	4b47      	ldr	r3, [pc, #284]	@ (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d115      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e07f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d107      	bne.n	800316a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315a:	4b41      	ldr	r3, [pc, #260]	@ (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e073      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316a:	4b3d      	ldr	r3, [pc, #244]	@ (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e06b      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317a:	4b39      	ldr	r3, [pc, #228]	@ (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f023 0203 	bic.w	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4936      	ldr	r1, [pc, #216]	@ (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800318c:	f7ff f892 	bl	80022b4 <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	e00a      	b.n	80031aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003194:	f7ff f88e 	bl	80022b4 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e053      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 020c 	and.w	r2, r3, #12
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d1eb      	bne.n	8003194 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031bc:	4b27      	ldr	r3, [pc, #156]	@ (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d210      	bcs.n	80031ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b24      	ldr	r3, [pc, #144]	@ (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 0207 	bic.w	r2, r3, #7
 80031d2:	4922      	ldr	r1, [pc, #136]	@ (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b20      	ldr	r3, [pc, #128]	@ (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e032      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f8:	4b19      	ldr	r3, [pc, #100]	@ (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4916      	ldr	r1, [pc, #88]	@ (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003216:	4b12      	ldr	r3, [pc, #72]	@ (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	490e      	ldr	r1, [pc, #56]	@ (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	4313      	orrs	r3, r2
 8003228:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800322a:	f000 f821 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 800322e:	4602      	mov	r2, r0
 8003230:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	490a      	ldr	r1, [pc, #40]	@ (8003264 <HAL_RCC_ClockConfig+0x1c8>)
 800323c:	5ccb      	ldrb	r3, [r1, r3]
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	4a09      	ldr	r2, [pc, #36]	@ (8003268 <HAL_RCC_ClockConfig+0x1cc>)
 8003244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003246:	4b09      	ldr	r3, [pc, #36]	@ (800326c <HAL_RCC_ClockConfig+0x1d0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe fff0 	bl	8002230 <HAL_InitTick>

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40022000 	.word	0x40022000
 8003260:	40021000 	.word	0x40021000
 8003264:	080050f8 	.word	0x080050f8
 8003268:	20000004 	.word	0x20000004
 800326c:	20000008 	.word	0x20000008

08003270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	2300      	movs	r3, #0
 8003284:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800328a:	4b1e      	ldr	r3, [pc, #120]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x94>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b04      	cmp	r3, #4
 8003298:	d002      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x30>
 800329a:	2b08      	cmp	r3, #8
 800329c:	d003      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x36>
 800329e:	e027      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032a0:	4b19      	ldr	r3, [pc, #100]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x98>)
 80032a2:	613b      	str	r3, [r7, #16]
      break;
 80032a4:	e027      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	0c9b      	lsrs	r3, r3, #18
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	4a17      	ldr	r2, [pc, #92]	@ (800330c <HAL_RCC_GetSysClockFreq+0x9c>)
 80032b0:	5cd3      	ldrb	r3, [r2, r3]
 80032b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d010      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032be:	4b11      	ldr	r3, [pc, #68]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x94>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	0c5b      	lsrs	r3, r3, #17
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	4a11      	ldr	r2, [pc, #68]	@ (8003310 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032ca:	5cd3      	ldrb	r3, [r2, r3]
 80032cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x98>)
 80032d2:	fb03 f202 	mul.w	r2, r3, r2
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	e004      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003314 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032e4:	fb02 f303 	mul.w	r3, r2, r3
 80032e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	613b      	str	r3, [r7, #16]
      break;
 80032ee:	e002      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032f0:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x98>)
 80032f2:	613b      	str	r3, [r7, #16]
      break;
 80032f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032f6:	693b      	ldr	r3, [r7, #16]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
 8003308:	007a1200 	.word	0x007a1200
 800330c:	08005110 	.word	0x08005110
 8003310:	08005120 	.word	0x08005120
 8003314:	003d0900 	.word	0x003d0900

08003318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800331c:	4b02      	ldr	r3, [pc, #8]	@ (8003328 <HAL_RCC_GetHCLKFreq+0x10>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	20000004 	.word	0x20000004

0800332c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003330:	f7ff fff2 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003334:	4602      	mov	r2, r0
 8003336:	4b05      	ldr	r3, [pc, #20]	@ (800334c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	0a1b      	lsrs	r3, r3, #8
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	4903      	ldr	r1, [pc, #12]	@ (8003350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000
 8003350:	08005108 	.word	0x08005108

08003354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003358:	f7ff ffde 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 800335c:	4602      	mov	r2, r0
 800335e:	4b05      	ldr	r3, [pc, #20]	@ (8003374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	0adb      	lsrs	r3, r3, #11
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	4903      	ldr	r1, [pc, #12]	@ (8003378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800336a:	5ccb      	ldrb	r3, [r1, r3]
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40021000 	.word	0x40021000
 8003378:	08005108 	.word	0x08005108

0800337c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003384:	4b0a      	ldr	r3, [pc, #40]	@ (80033b0 <RCC_Delay+0x34>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0a      	ldr	r2, [pc, #40]	@ (80033b4 <RCC_Delay+0x38>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	0a5b      	lsrs	r3, r3, #9
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003398:	bf00      	nop
  }
  while (Delay --);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1e5a      	subs	r2, r3, #1
 800339e:	60fa      	str	r2, [r7, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1f9      	bne.n	8003398 <RCC_Delay+0x1c>
}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	20000004 	.word	0x20000004
 80033b4:	10624dd3 	.word	0x10624dd3

080033b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e041      	b.n	800344e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7fe fbde 	bl	8001ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4619      	mov	r1, r3
 80033f6:	4610      	mov	r0, r2
 80033f8:	f000 fc64 	bl	8003cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	d001      	beq.n	8003470 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e03c      	b.n	80034ea <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1d      	ldr	r2, [pc, #116]	@ (80034f4 <HAL_TIM_Base_Start+0x9c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d018      	beq.n	80034b4 <HAL_TIM_Base_Start+0x5c>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a1c      	ldr	r2, [pc, #112]	@ (80034f8 <HAL_TIM_Base_Start+0xa0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d013      	beq.n	80034b4 <HAL_TIM_Base_Start+0x5c>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003494:	d00e      	beq.n	80034b4 <HAL_TIM_Base_Start+0x5c>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a18      	ldr	r2, [pc, #96]	@ (80034fc <HAL_TIM_Base_Start+0xa4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d009      	beq.n	80034b4 <HAL_TIM_Base_Start+0x5c>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a16      	ldr	r2, [pc, #88]	@ (8003500 <HAL_TIM_Base_Start+0xa8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d004      	beq.n	80034b4 <HAL_TIM_Base_Start+0x5c>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a15      	ldr	r2, [pc, #84]	@ (8003504 <HAL_TIM_Base_Start+0xac>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d111      	bne.n	80034d8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b06      	cmp	r3, #6
 80034c4:	d010      	beq.n	80034e8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d6:	e007      	b.n	80034e8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	40012c00 	.word	0x40012c00
 80034f8:	40013400 	.word	0x40013400
 80034fc:	40000400 	.word	0x40000400
 8003500:	40000800 	.word	0x40000800
 8003504:	40000c00 	.word	0x40000c00

08003508 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6a1a      	ldr	r2, [r3, #32]
 8003516:	f241 1311 	movw	r3, #4369	@ 0x1111
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10f      	bne.n	8003540 <HAL_TIM_Base_Stop+0x38>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6a1a      	ldr	r2, [r3, #32]
 8003526:	f240 4344 	movw	r3, #1092	@ 0x444
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d107      	bne.n	8003540 <HAL_TIM_Base_Stop+0x38>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0201 	bic.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e041      	b.n	80035ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f839 	bl	80035f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3304      	adds	r3, #4
 8003590:	4619      	mov	r1, r3
 8003592:	4610      	mov	r0, r2
 8003594:	f000 fb96 	bl	8003cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d109      	bne.n	8003628 <HAL_TIM_PWM_Start+0x24>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	bf14      	ite	ne
 8003620:	2301      	movne	r3, #1
 8003622:	2300      	moveq	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	e022      	b.n	800366e <HAL_TIM_PWM_Start+0x6a>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b04      	cmp	r3, #4
 800362c:	d109      	bne.n	8003642 <HAL_TIM_PWM_Start+0x3e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b01      	cmp	r3, #1
 8003638:	bf14      	ite	ne
 800363a:	2301      	movne	r3, #1
 800363c:	2300      	moveq	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	e015      	b.n	800366e <HAL_TIM_PWM_Start+0x6a>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d109      	bne.n	800365c <HAL_TIM_PWM_Start+0x58>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	bf14      	ite	ne
 8003654:	2301      	movne	r3, #1
 8003656:	2300      	moveq	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	e008      	b.n	800366e <HAL_TIM_PWM_Start+0x6a>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b01      	cmp	r3, #1
 8003666:	bf14      	ite	ne
 8003668:	2301      	movne	r3, #1
 800366a:	2300      	moveq	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e072      	b.n	800375c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d104      	bne.n	8003686 <HAL_TIM_PWM_Start+0x82>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003684:	e013      	b.n	80036ae <HAL_TIM_PWM_Start+0xaa>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b04      	cmp	r3, #4
 800368a:	d104      	bne.n	8003696 <HAL_TIM_PWM_Start+0x92>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003694:	e00b      	b.n	80036ae <HAL_TIM_PWM_Start+0xaa>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d104      	bne.n	80036a6 <HAL_TIM_PWM_Start+0xa2>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036a4:	e003      	b.n	80036ae <HAL_TIM_PWM_Start+0xaa>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2202      	movs	r2, #2
 80036aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2201      	movs	r2, #1
 80036b4:	6839      	ldr	r1, [r7, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fdcc 	bl	8004254 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a28      	ldr	r2, [pc, #160]	@ (8003764 <HAL_TIM_PWM_Start+0x160>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d004      	beq.n	80036d0 <HAL_TIM_PWM_Start+0xcc>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a27      	ldr	r2, [pc, #156]	@ (8003768 <HAL_TIM_PWM_Start+0x164>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d101      	bne.n	80036d4 <HAL_TIM_PWM_Start+0xd0>
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <HAL_TIM_PWM_Start+0xd2>
 80036d4:	2300      	movs	r3, #0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003764 <HAL_TIM_PWM_Start+0x160>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d018      	beq.n	8003726 <HAL_TIM_PWM_Start+0x122>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003768 <HAL_TIM_PWM_Start+0x164>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <HAL_TIM_PWM_Start+0x122>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003706:	d00e      	beq.n	8003726 <HAL_TIM_PWM_Start+0x122>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a17      	ldr	r2, [pc, #92]	@ (800376c <HAL_TIM_PWM_Start+0x168>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d009      	beq.n	8003726 <HAL_TIM_PWM_Start+0x122>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a16      	ldr	r2, [pc, #88]	@ (8003770 <HAL_TIM_PWM_Start+0x16c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d004      	beq.n	8003726 <HAL_TIM_PWM_Start+0x122>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a14      	ldr	r2, [pc, #80]	@ (8003774 <HAL_TIM_PWM_Start+0x170>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d111      	bne.n	800374a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b06      	cmp	r3, #6
 8003736:	d010      	beq.n	800375a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003748:	e007      	b.n	800375a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40012c00 	.word	0x40012c00
 8003768:	40013400 	.word	0x40013400
 800376c:	40000400 	.word	0x40000400
 8003770:	40000800 	.word	0x40000800
 8003774:	40000c00 	.word	0x40000c00

08003778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d020      	beq.n	80037dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01b      	beq.n	80037dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0202 	mvn.w	r2, #2
 80037ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa63 	bl	8003c8e <HAL_TIM_IC_CaptureCallback>
 80037c8:	e005      	b.n	80037d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fa56 	bl	8003c7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fa65 	bl	8003ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d020      	beq.n	8003828 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01b      	beq.n	8003828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0204 	mvn.w	r2, #4
 80037f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2202      	movs	r2, #2
 80037fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fa3d 	bl	8003c8e <HAL_TIM_IC_CaptureCallback>
 8003814:	e005      	b.n	8003822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fa30 	bl	8003c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 fa3f 	bl	8003ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d020      	beq.n	8003874 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01b      	beq.n	8003874 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0208 	mvn.w	r2, #8
 8003844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2204      	movs	r2, #4
 800384a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fa17 	bl	8003c8e <HAL_TIM_IC_CaptureCallback>
 8003860:	e005      	b.n	800386e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fa0a 	bl	8003c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fa19 	bl	8003ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b00      	cmp	r3, #0
 800387c:	d020      	beq.n	80038c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01b      	beq.n	80038c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0210 	mvn.w	r2, #16
 8003890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2208      	movs	r2, #8
 8003896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f9f1 	bl	8003c8e <HAL_TIM_IC_CaptureCallback>
 80038ac:	e005      	b.n	80038ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f9e4 	bl	8003c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f9f3 	bl	8003ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00c      	beq.n	80038e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d007      	beq.n	80038e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0201 	mvn.w	r2, #1
 80038dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f9c3 	bl	8003c6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00c      	beq.n	8003908 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d007      	beq.n	8003908 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fd3f 	bl	8004386 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00c      	beq.n	800392c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d007      	beq.n	800392c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f9c3 	bl	8003cb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00c      	beq.n	8003950 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	d007      	beq.n	8003950 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0220 	mvn.w	r2, #32
 8003948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fd12 	bl	8004374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003950:	bf00      	nop
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003972:	2302      	movs	r3, #2
 8003974:	e0ae      	b.n	8003ad4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b0c      	cmp	r3, #12
 8003982:	f200 809f 	bhi.w	8003ac4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003986:	a201      	add	r2, pc, #4	@ (adr r2, 800398c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398c:	080039c1 	.word	0x080039c1
 8003990:	08003ac5 	.word	0x08003ac5
 8003994:	08003ac5 	.word	0x08003ac5
 8003998:	08003ac5 	.word	0x08003ac5
 800399c:	08003a01 	.word	0x08003a01
 80039a0:	08003ac5 	.word	0x08003ac5
 80039a4:	08003ac5 	.word	0x08003ac5
 80039a8:	08003ac5 	.word	0x08003ac5
 80039ac:	08003a43 	.word	0x08003a43
 80039b0:	08003ac5 	.word	0x08003ac5
 80039b4:	08003ac5 	.word	0x08003ac5
 80039b8:	08003ac5 	.word	0x08003ac5
 80039bc:	08003a83 	.word	0x08003a83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fa02 	bl	8003dd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0208 	orr.w	r2, r2, #8
 80039da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0204 	bic.w	r2, r2, #4
 80039ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6999      	ldr	r1, [r3, #24]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	619a      	str	r2, [r3, #24]
      break;
 80039fe:	e064      	b.n	8003aca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fa52 	bl	8003eb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6999      	ldr	r1, [r3, #24]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	021a      	lsls	r2, r3, #8
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	619a      	str	r2, [r3, #24]
      break;
 8003a40:	e043      	b.n	8003aca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68b9      	ldr	r1, [r7, #8]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 faa5 	bl	8003f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69da      	ldr	r2, [r3, #28]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0208 	orr.w	r2, r2, #8
 8003a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0204 	bic.w	r2, r2, #4
 8003a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69d9      	ldr	r1, [r3, #28]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	61da      	str	r2, [r3, #28]
      break;
 8003a80:	e023      	b.n	8003aca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 faf9 	bl	8004080 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69da      	ldr	r2, [r3, #28]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69da      	ldr	r2, [r3, #28]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69d9      	ldr	r1, [r3, #28]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	021a      	lsls	r2, r3, #8
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	61da      	str	r2, [r3, #28]
      break;
 8003ac2:	e002      	b.n	8003aca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ac8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_TIM_ConfigClockSource+0x1c>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e0b4      	b.n	8003c62 <HAL_TIM_ConfigClockSource+0x186>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b30:	d03e      	beq.n	8003bb0 <HAL_TIM_ConfigClockSource+0xd4>
 8003b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b36:	f200 8087 	bhi.w	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
 8003b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b3e:	f000 8086 	beq.w	8003c4e <HAL_TIM_ConfigClockSource+0x172>
 8003b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b46:	d87f      	bhi.n	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
 8003b48:	2b70      	cmp	r3, #112	@ 0x70
 8003b4a:	d01a      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0xa6>
 8003b4c:	2b70      	cmp	r3, #112	@ 0x70
 8003b4e:	d87b      	bhi.n	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
 8003b50:	2b60      	cmp	r3, #96	@ 0x60
 8003b52:	d050      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x11a>
 8003b54:	2b60      	cmp	r3, #96	@ 0x60
 8003b56:	d877      	bhi.n	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
 8003b58:	2b50      	cmp	r3, #80	@ 0x50
 8003b5a:	d03c      	beq.n	8003bd6 <HAL_TIM_ConfigClockSource+0xfa>
 8003b5c:	2b50      	cmp	r3, #80	@ 0x50
 8003b5e:	d873      	bhi.n	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
 8003b60:	2b40      	cmp	r3, #64	@ 0x40
 8003b62:	d058      	beq.n	8003c16 <HAL_TIM_ConfigClockSource+0x13a>
 8003b64:	2b40      	cmp	r3, #64	@ 0x40
 8003b66:	d86f      	bhi.n	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b30      	cmp	r3, #48	@ 0x30
 8003b6a:	d064      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0x15a>
 8003b6c:	2b30      	cmp	r3, #48	@ 0x30
 8003b6e:	d86b      	bhi.n	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	d060      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0x15a>
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d867      	bhi.n	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d05c      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0x15a>
 8003b7c:	2b10      	cmp	r3, #16
 8003b7e:	d05a      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0x15a>
 8003b80:	e062      	b.n	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b92:	f000 fb40 	bl	8004216 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ba4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	609a      	str	r2, [r3, #8]
      break;
 8003bae:	e04f      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bc0:	f000 fb29 	bl	8004216 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bd2:	609a      	str	r2, [r3, #8]
      break;
 8003bd4:	e03c      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be2:	461a      	mov	r2, r3
 8003be4:	f000 faa0 	bl	8004128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2150      	movs	r1, #80	@ 0x50
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 faf7 	bl	80041e2 <TIM_ITRx_SetConfig>
      break;
 8003bf4:	e02c      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c02:	461a      	mov	r2, r3
 8003c04:	f000 fabe 	bl	8004184 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2160      	movs	r1, #96	@ 0x60
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fae7 	bl	80041e2 <TIM_ITRx_SetConfig>
      break;
 8003c14:	e01c      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c22:	461a      	mov	r2, r3
 8003c24:	f000 fa80 	bl	8004128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2140      	movs	r1, #64	@ 0x40
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fad7 	bl	80041e2 <TIM_ITRx_SetConfig>
      break;
 8003c34:	e00c      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4610      	mov	r0, r2
 8003c42:	f000 face 	bl	80041e2 <TIM_ITRx_SetConfig>
      break;
 8003c46:	e003      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c4c:	e000      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr

08003c8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a39      	ldr	r2, [pc, #228]	@ (8003dbc <TIM_Base_SetConfig+0xf8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d013      	beq.n	8003d04 <TIM_Base_SetConfig+0x40>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a38      	ldr	r2, [pc, #224]	@ (8003dc0 <TIM_Base_SetConfig+0xfc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00f      	beq.n	8003d04 <TIM_Base_SetConfig+0x40>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cea:	d00b      	beq.n	8003d04 <TIM_Base_SetConfig+0x40>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a35      	ldr	r2, [pc, #212]	@ (8003dc4 <TIM_Base_SetConfig+0x100>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d007      	beq.n	8003d04 <TIM_Base_SetConfig+0x40>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a34      	ldr	r2, [pc, #208]	@ (8003dc8 <TIM_Base_SetConfig+0x104>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d003      	beq.n	8003d04 <TIM_Base_SetConfig+0x40>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a33      	ldr	r2, [pc, #204]	@ (8003dcc <TIM_Base_SetConfig+0x108>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d108      	bne.n	8003d16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a28      	ldr	r2, [pc, #160]	@ (8003dbc <TIM_Base_SetConfig+0xf8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <TIM_Base_SetConfig+0x82>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a27      	ldr	r2, [pc, #156]	@ (8003dc0 <TIM_Base_SetConfig+0xfc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00f      	beq.n	8003d46 <TIM_Base_SetConfig+0x82>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d2c:	d00b      	beq.n	8003d46 <TIM_Base_SetConfig+0x82>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a24      	ldr	r2, [pc, #144]	@ (8003dc4 <TIM_Base_SetConfig+0x100>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d007      	beq.n	8003d46 <TIM_Base_SetConfig+0x82>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a23      	ldr	r2, [pc, #140]	@ (8003dc8 <TIM_Base_SetConfig+0x104>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d003      	beq.n	8003d46 <TIM_Base_SetConfig+0x82>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a22      	ldr	r2, [pc, #136]	@ (8003dcc <TIM_Base_SetConfig+0x108>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d108      	bne.n	8003d58 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8003dbc <TIM_Base_SetConfig+0xf8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_Base_SetConfig+0xc8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a0e      	ldr	r2, [pc, #56]	@ (8003dc0 <TIM_Base_SetConfig+0xfc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d103      	bne.n	8003d94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d005      	beq.n	8003db2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f023 0201 	bic.w	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	611a      	str	r2, [r3, #16]
  }
}
 8003db2:	bf00      	nop
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr
 8003dbc:	40012c00 	.word	0x40012c00
 8003dc0:	40013400 	.word	0x40013400
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	40000800 	.word	0x40000800
 8003dcc:	40000c00 	.word	0x40000c00

08003dd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	f023 0201 	bic.w	r2, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0303 	bic.w	r3, r3, #3
 8003e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f023 0302 	bic.w	r3, r3, #2
 8003e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a20      	ldr	r2, [pc, #128]	@ (8003ea8 <TIM_OC1_SetConfig+0xd8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_OC1_SetConfig+0x64>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8003eac <TIM_OC1_SetConfig+0xdc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d10c      	bne.n	8003e4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f023 0308 	bic.w	r3, r3, #8
 8003e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f023 0304 	bic.w	r3, r3, #4
 8003e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a15      	ldr	r2, [pc, #84]	@ (8003ea8 <TIM_OC1_SetConfig+0xd8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d003      	beq.n	8003e5e <TIM_OC1_SetConfig+0x8e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a14      	ldr	r2, [pc, #80]	@ (8003eac <TIM_OC1_SetConfig+0xdc>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d111      	bne.n	8003e82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	621a      	str	r2, [r3, #32]
}
 8003e9c:	bf00      	nop
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40012c00 	.word	0x40012c00
 8003eac:	40013400 	.word	0x40013400

08003eb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	f023 0210 	bic.w	r2, r3, #16
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	021b      	lsls	r3, r3, #8
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f023 0320 	bic.w	r3, r3, #32
 8003efa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a21      	ldr	r2, [pc, #132]	@ (8003f90 <TIM_OC2_SetConfig+0xe0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <TIM_OC2_SetConfig+0x68>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a20      	ldr	r2, [pc, #128]	@ (8003f94 <TIM_OC2_SetConfig+0xe4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d10d      	bne.n	8003f34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a16      	ldr	r2, [pc, #88]	@ (8003f90 <TIM_OC2_SetConfig+0xe0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d003      	beq.n	8003f44 <TIM_OC2_SetConfig+0x94>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a15      	ldr	r2, [pc, #84]	@ (8003f94 <TIM_OC2_SetConfig+0xe4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d113      	bne.n	8003f6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	621a      	str	r2, [r3, #32]
}
 8003f86:	bf00      	nop
 8003f88:	371c      	adds	r7, #28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40013400 	.word	0x40013400

08003f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0303 	bic.w	r3, r3, #3
 8003fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	021b      	lsls	r3, r3, #8
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a21      	ldr	r2, [pc, #132]	@ (8004078 <TIM_OC3_SetConfig+0xe0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d003      	beq.n	8003ffe <TIM_OC3_SetConfig+0x66>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a20      	ldr	r2, [pc, #128]	@ (800407c <TIM_OC3_SetConfig+0xe4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d10d      	bne.n	800401a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a16      	ldr	r2, [pc, #88]	@ (8004078 <TIM_OC3_SetConfig+0xe0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d003      	beq.n	800402a <TIM_OC3_SetConfig+0x92>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a15      	ldr	r2, [pc, #84]	@ (800407c <TIM_OC3_SetConfig+0xe4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d113      	bne.n	8004052 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	621a      	str	r2, [r3, #32]
}
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40012c00 	.word	0x40012c00
 800407c:	40013400 	.word	0x40013400

08004080 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	031b      	lsls	r3, r3, #12
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a11      	ldr	r2, [pc, #68]	@ (8004120 <TIM_OC4_SetConfig+0xa0>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_OC4_SetConfig+0x68>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a10      	ldr	r2, [pc, #64]	@ (8004124 <TIM_OC4_SetConfig+0xa4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d109      	bne.n	80040fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	019b      	lsls	r3, r3, #6
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	621a      	str	r2, [r3, #32]
}
 8004116:	bf00      	nop
 8004118:	371c      	adds	r7, #28
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr
 8004120:	40012c00 	.word	0x40012c00
 8004124:	40013400 	.word	0x40013400

08004128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	f023 0201 	bic.w	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f023 030a 	bic.w	r3, r3, #10
 8004164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	621a      	str	r2, [r3, #32]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f023 0210 	bic.w	r2, r3, #16
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	031b      	lsls	r3, r3, #12
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	621a      	str	r2, [r3, #32]
}
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr

080041e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b085      	sub	sp, #20
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	f043 0307 	orr.w	r3, r3, #7
 8004204:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	609a      	str	r2, [r3, #8]
}
 800420c:	bf00      	nop
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr

08004216 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004216:	b480      	push	{r7}
 8004218:	b087      	sub	sp, #28
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004230:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	021a      	lsls	r2, r3, #8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	431a      	orrs	r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4313      	orrs	r3, r2
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	609a      	str	r2, [r3, #8]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	2201      	movs	r2, #1
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a1a      	ldr	r2, [r3, #32]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	43db      	mvns	r3, r3
 8004276:	401a      	ands	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a1a      	ldr	r2, [r3, #32]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f003 031f 	and.w	r3, r3, #31
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	fa01 f303 	lsl.w	r3, r1, r3
 800428c:	431a      	orrs	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	621a      	str	r2, [r3, #32]
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr

0800429c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e050      	b.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d018      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a19      	ldr	r2, [pc, #100]	@ (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800430a:	d00e      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a15      	ldr	r2, [pc, #84]	@ (8004368 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d009      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a14      	ldr	r2, [pc, #80]	@ (800436c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d004      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a12      	ldr	r2, [pc, #72]	@ (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d10c      	bne.n	8004344 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004330:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	4313      	orrs	r3, r2
 800433a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr
 8004360:	40012c00 	.word	0x40012c00
 8004364:	40013400 	.word	0x40013400
 8004368:	40000400 	.word	0x40000400
 800436c:	40000800 	.word	0x40000800
 8004370:	40000c00 	.word	0x40000c00

08004374 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr

08004386 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr

08004398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e042      	b.n	8004430 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fd fcba 	bl	8001d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2224      	movs	r2, #36	@ 0x24
 80043c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fdb7 	bl	8004f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	@ 0x28
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b20      	cmp	r3, #32
 8004456:	d175      	bne.n	8004544 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_UART_Transmit+0x2c>
 800445e:	88fb      	ldrh	r3, [r7, #6]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e06e      	b.n	8004546 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2221      	movs	r2, #33	@ 0x21
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004476:	f7fd ff1d 	bl	80022b4 <HAL_GetTick>
 800447a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	88fa      	ldrh	r2, [r7, #6]
 8004480:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	88fa      	ldrh	r2, [r7, #6]
 8004486:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004490:	d108      	bne.n	80044a4 <HAL_UART_Transmit+0x6c>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d104      	bne.n	80044a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	e003      	b.n	80044ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044ac:	e02e      	b.n	800450c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2200      	movs	r2, #0
 80044b6:	2180      	movs	r1, #128	@ 0x80
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 fb1c 	bl	8004af6 <UART_WaitOnFlagUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e03a      	b.n	8004546 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10b      	bne.n	80044ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	3302      	adds	r3, #2
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	e007      	b.n	80044fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	781a      	ldrb	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	3301      	adds	r3, #1
 80044fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1cb      	bne.n	80044ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2200      	movs	r2, #0
 800451e:	2140      	movs	r1, #64	@ 0x40
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fae8 	bl	8004af6 <UART_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e006      	b.n	8004546 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	e000      	b.n	8004546 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004544:	2302      	movs	r3, #2
  }
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	4613      	mov	r3, r2
 800455a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b20      	cmp	r3, #32
 8004566:	d112      	bne.n	800458e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_UART_Receive_IT+0x26>
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e00b      	b.n	8004590 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	461a      	mov	r2, r3
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 fb0f 	bl	8004ba8 <UART_Start_Receive_IT>
 800458a:	4603      	mov	r3, r0
 800458c:	e000      	b.n	8004590 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b0ba      	sub	sp, #232	@ 0xe8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80045be:	2300      	movs	r3, #0
 80045c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80045d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10f      	bne.n	80045fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d009      	beq.n	80045fe <HAL_UART_IRQHandler+0x66>
 80045ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fbec 	bl	8004dd4 <UART_Receive_IT>
      return;
 80045fc:	e25b      	b.n	8004ab6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 80de 	beq.w	80047c4 <HAL_UART_IRQHandler+0x22c>
 8004608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d106      	bne.n	8004622 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004618:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 80d1 	beq.w	80047c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <HAL_UART_IRQHandler+0xae>
 800462e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463e:	f043 0201 	orr.w	r2, r3, #1
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00b      	beq.n	800466a <HAL_UART_IRQHandler+0xd2>
 8004652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d005      	beq.n	800466a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004662:	f043 0202 	orr.w	r2, r3, #2
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800466a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00b      	beq.n	800468e <HAL_UART_IRQHandler+0xf6>
 8004676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d005      	beq.n	800468e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004686:	f043 0204 	orr.w	r2, r3, #4
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800468e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d011      	beq.n	80046be <HAL_UART_IRQHandler+0x126>
 800469a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d105      	bne.n	80046b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b6:	f043 0208 	orr.w	r2, r3, #8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 81f2 	beq.w	8004aac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <HAL_UART_IRQHandler+0x14e>
 80046d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fb77 	bl	8004dd4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d103      	bne.n	8004712 <HAL_UART_IRQHandler+0x17a>
 800470a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d04f      	beq.n	80047b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fa81 	bl	8004c1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d041      	beq.n	80047aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3314      	adds	r3, #20
 800472c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800473c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004744:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3314      	adds	r3, #20
 800474e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004752:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004756:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800475e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004762:	e841 2300 	strex	r3, r2, [r1]
 8004766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800476a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1d9      	bne.n	8004726 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004776:	2b00      	cmp	r3, #0
 8004778:	d013      	beq.n	80047a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477e:	4a7e      	ldr	r2, [pc, #504]	@ (8004978 <HAL_UART_IRQHandler+0x3e0>)
 8004780:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004786:	4618      	mov	r0, r3
 8004788:	f7fd ff0a 	bl	80025a0 <HAL_DMA_Abort_IT>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d016      	beq.n	80047c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800479c:	4610      	mov	r0, r2
 800479e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a0:	e00e      	b.n	80047c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f993 	bl	8004ace <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a8:	e00a      	b.n	80047c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f98f 	bl	8004ace <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b0:	e006      	b.n	80047c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f98b 	bl	8004ace <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80047be:	e175      	b.n	8004aac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c0:	bf00      	nop
    return;
 80047c2:	e173      	b.n	8004aac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	f040 814f 	bne.w	8004a6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 8148 	beq.w	8004a6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8141 	beq.w	8004a6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047ea:	2300      	movs	r3, #0
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80b6 	beq.w	800497c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800481c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8145 	beq.w	8004ab0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800482a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800482e:	429a      	cmp	r2, r3
 8004830:	f080 813e 	bcs.w	8004ab0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800483a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	2b20      	cmp	r3, #32
 8004844:	f000 8088 	beq.w	8004958 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004852:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004856:	e853 3f00 	ldrex	r3, [r3]
 800485a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800485e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004862:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004866:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	330c      	adds	r3, #12
 8004870:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004874:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004878:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004880:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004884:	e841 2300 	strex	r3, r2, [r1]
 8004888:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800488c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1d9      	bne.n	8004848 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3314      	adds	r3, #20
 800489a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800489e:	e853 3f00 	ldrex	r3, [r3]
 80048a2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80048a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048a6:	f023 0301 	bic.w	r3, r3, #1
 80048aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3314      	adds	r3, #20
 80048b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048b8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80048bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80048c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80048ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e1      	bne.n	8004894 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3314      	adds	r3, #20
 80048d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048da:	e853 3f00 	ldrex	r3, [r3]
 80048de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80048e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3314      	adds	r3, #20
 80048f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80048f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80048fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004902:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e3      	bne.n	80048d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	330c      	adds	r3, #12
 800491c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004928:	f023 0310 	bic.w	r3, r3, #16
 800492c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800493a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800493c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004940:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004942:	e841 2300 	strex	r3, r2, [r1]
 8004946:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1e3      	bne.n	8004916 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004952:	4618      	mov	r0, r3
 8004954:	f7fd fde9 	bl	800252a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004966:	b29b      	uxth	r3, r3
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	b29b      	uxth	r3, r3
 800496c:	4619      	mov	r1, r3
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f8b6 	bl	8004ae0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004974:	e09c      	b.n	8004ab0 <HAL_UART_IRQHandler+0x518>
 8004976:	bf00      	nop
 8004978:	08004cdf 	.word	0x08004cdf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004984:	b29b      	uxth	r3, r3
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 808e 	beq.w	8004ab4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8089 	beq.w	8004ab4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	330c      	adds	r3, #12
 80049c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80049c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80049c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e3      	bne.n	80049a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3314      	adds	r3, #20
 80049e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	623b      	str	r3, [r7, #32]
   return(result);
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	f023 0301 	bic.w	r3, r3, #1
 80049f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3314      	adds	r3, #20
 80049fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80049fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e3      	bne.n	80049da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	330c      	adds	r3, #12
 8004a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0310 	bic.w	r3, r3, #16
 8004a36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	330c      	adds	r3, #12
 8004a40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a44:	61fa      	str	r2, [r7, #28]
 8004a46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	69b9      	ldr	r1, [r7, #24]
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	617b      	str	r3, [r7, #20]
   return(result);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e3      	bne.n	8004a20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a62:	4619      	mov	r1, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f83b 	bl	8004ae0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a6a:	e023      	b.n	8004ab4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d009      	beq.n	8004a8c <HAL_UART_IRQHandler+0x4f4>
 8004a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f93e 	bl	8004d06 <UART_Transmit_IT>
    return;
 8004a8a:	e014      	b.n	8004ab6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00e      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x51e>
 8004a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d008      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f97d 	bl	8004da4 <UART_EndTransmit_IT>
    return;
 8004aaa:	e004      	b.n	8004ab6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004aac:	bf00      	nop
 8004aae:	e002      	b.n	8004ab6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ab0:	bf00      	nop
 8004ab2:	e000      	b.n	8004ab6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ab4:	bf00      	nop
  }
}
 8004ab6:	37e8      	adds	r7, #232	@ 0xe8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bc80      	pop	{r7}
 8004acc:	4770      	bx	lr

08004ace <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr

08004ae0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr

08004af6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b086      	sub	sp, #24
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	603b      	str	r3, [r7, #0]
 8004b02:	4613      	mov	r3, r2
 8004b04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b06:	e03b      	b.n	8004b80 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0e:	d037      	beq.n	8004b80 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b10:	f7fd fbd0 	bl	80022b4 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	6a3a      	ldr	r2, [r7, #32]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d302      	bcc.n	8004b26 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e03a      	b.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d023      	beq.n	8004b80 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b80      	cmp	r3, #128	@ 0x80
 8004b3c:	d020      	beq.n	8004b80 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b40      	cmp	r3, #64	@ 0x40
 8004b42:	d01d      	beq.n	8004b80 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d116      	bne.n	8004b80 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 f856 	bl	8004c1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2208      	movs	r2, #8
 8004b72:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e00f      	b.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	bf0c      	ite	eq
 8004b90:	2301      	moveq	r3, #1
 8004b92:	2300      	movne	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d0b4      	beq.n	8004b08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	88fa      	ldrh	r2, [r7, #6]
 8004bc0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	88fa      	ldrh	r2, [r7, #6]
 8004bc6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2222      	movs	r2, #34	@ 0x22
 8004bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d007      	beq.n	8004bee <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695a      	ldr	r2, [r3, #20]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f042 0201 	orr.w	r2, r2, #1
 8004bfc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0220 	orr.w	r2, r2, #32
 8004c0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr

08004c1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b095      	sub	sp, #84	@ 0x54
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	330c      	adds	r3, #12
 8004c28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	330c      	adds	r3, #12
 8004c40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c42:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c4a:	e841 2300 	strex	r3, r2, [r1]
 8004c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1e5      	bne.n	8004c22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3314      	adds	r3, #20
 8004c5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f023 0301 	bic.w	r3, r3, #1
 8004c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3314      	adds	r3, #20
 8004c74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e5      	bne.n	8004c56 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d119      	bne.n	8004cc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	330c      	adds	r3, #12
 8004c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f023 0310 	bic.w	r3, r3, #16
 8004ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	330c      	adds	r3, #12
 8004cb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cb2:	61ba      	str	r2, [r7, #24]
 8004cb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6979      	ldr	r1, [r7, #20]
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e5      	bne.n	8004c92 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004cd4:	bf00      	nop
 8004cd6:	3754      	adds	r7, #84	@ 0x54
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr

08004cde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b084      	sub	sp, #16
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f7ff fee8 	bl	8004ace <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cfe:	bf00      	nop
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b085      	sub	sp, #20
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b21      	cmp	r3, #33	@ 0x21
 8004d18:	d13e      	bne.n	8004d98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d22:	d114      	bne.n	8004d4e <UART_Transmit_IT+0x48>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d110      	bne.n	8004d4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	1c9a      	adds	r2, r3, #2
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	621a      	str	r2, [r3, #32]
 8004d4c:	e008      	b.n	8004d60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	1c59      	adds	r1, r3, #1
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6211      	str	r1, [r2, #32]
 8004d58:	781a      	ldrb	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10f      	bne.n	8004d94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	e000      	b.n	8004d9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d98:	2302      	movs	r3, #2
  }
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr

08004da4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff fe79 	bl	8004abc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08c      	sub	sp, #48	@ 0x30
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b22      	cmp	r3, #34	@ 0x22
 8004de6:	f040 80ae 	bne.w	8004f46 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004df2:	d117      	bne.n	8004e24 <UART_Receive_IT+0x50>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d113      	bne.n	8004e24 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e04:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1c:	1c9a      	adds	r2, r3, #2
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e22:	e026      	b.n	8004e72 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e36:	d007      	beq.n	8004e48 <UART_Receive_IT+0x74>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <UART_Receive_IT+0x82>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d106      	bne.n	8004e56 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	e008      	b.n	8004e68 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d15d      	bne.n	8004f42 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0220 	bic.w	r2, r2, #32
 8004e94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ea4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d135      	bne.n	8004f38 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	330c      	adds	r3, #12
 8004ed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f023 0310 	bic.w	r3, r3, #16
 8004ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	330c      	adds	r3, #12
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef2:	623a      	str	r2, [r7, #32]
 8004ef4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	69f9      	ldr	r1, [r7, #28]
 8004ef8:	6a3a      	ldr	r2, [r7, #32]
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e5      	bne.n	8004ed2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d10a      	bne.n	8004f2a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff fdd5 	bl	8004ae0 <HAL_UARTEx_RxEventCallback>
 8004f36:	e002      	b.n	8004f3e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7fc fc2b 	bl	8001794 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e002      	b.n	8004f48 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	e000      	b.n	8004f48 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f46:	2302      	movs	r3, #2
  }
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3730      	adds	r7, #48	@ 0x30
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004f8a:	f023 030c 	bic.w	r3, r3, #12
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6812      	ldr	r2, [r2, #0]
 8004f92:	68b9      	ldr	r1, [r7, #8]
 8004f94:	430b      	orrs	r3, r1
 8004f96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8005064 <UART_SetConfig+0x114>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d103      	bne.n	8004fc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004fb8:	f7fe f9cc 	bl	8003354 <HAL_RCC_GetPCLK2Freq>
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	e002      	b.n	8004fc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004fc0:	f7fe f9b4 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8004fc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	009a      	lsls	r2, r3, #2
 8004fd0:	441a      	add	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fdc:	4a22      	ldr	r2, [pc, #136]	@ (8005068 <UART_SetConfig+0x118>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	0119      	lsls	r1, r3, #4
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	009a      	lsls	r2, r3, #2
 8004ff0:	441a      	add	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8005068 <UART_SetConfig+0x118>)
 8004ffe:	fba3 0302 	umull	r0, r3, r3, r2
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	2064      	movs	r0, #100	@ 0x64
 8005006:	fb00 f303 	mul.w	r3, r0, r3
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	3332      	adds	r3, #50	@ 0x32
 8005010:	4a15      	ldr	r2, [pc, #84]	@ (8005068 <UART_SetConfig+0x118>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800501c:	4419      	add	r1, r3
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	009a      	lsls	r2, r3, #2
 8005028:	441a      	add	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	fbb2 f2f3 	udiv	r2, r2, r3
 8005034:	4b0c      	ldr	r3, [pc, #48]	@ (8005068 <UART_SetConfig+0x118>)
 8005036:	fba3 0302 	umull	r0, r3, r3, r2
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	2064      	movs	r0, #100	@ 0x64
 800503e:	fb00 f303 	mul.w	r3, r0, r3
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	3332      	adds	r3, #50	@ 0x32
 8005048:	4a07      	ldr	r2, [pc, #28]	@ (8005068 <UART_SetConfig+0x118>)
 800504a:	fba2 2303 	umull	r2, r3, r2, r3
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	f003 020f 	and.w	r2, r3, #15
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	440a      	add	r2, r1
 800505a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800505c:	bf00      	nop
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40013800 	.word	0x40013800
 8005068:	51eb851f 	.word	0x51eb851f

0800506c <memset>:
 800506c:	4603      	mov	r3, r0
 800506e:	4402      	add	r2, r0
 8005070:	4293      	cmp	r3, r2
 8005072:	d100      	bne.n	8005076 <memset+0xa>
 8005074:	4770      	bx	lr
 8005076:	f803 1b01 	strb.w	r1, [r3], #1
 800507a:	e7f9      	b.n	8005070 <memset+0x4>

0800507c <__libc_init_array>:
 800507c:	b570      	push	{r4, r5, r6, lr}
 800507e:	2600      	movs	r6, #0
 8005080:	4d0c      	ldr	r5, [pc, #48]	@ (80050b4 <__libc_init_array+0x38>)
 8005082:	4c0d      	ldr	r4, [pc, #52]	@ (80050b8 <__libc_init_array+0x3c>)
 8005084:	1b64      	subs	r4, r4, r5
 8005086:	10a4      	asrs	r4, r4, #2
 8005088:	42a6      	cmp	r6, r4
 800508a:	d109      	bne.n	80050a0 <__libc_init_array+0x24>
 800508c:	f000 f828 	bl	80050e0 <_init>
 8005090:	2600      	movs	r6, #0
 8005092:	4d0a      	ldr	r5, [pc, #40]	@ (80050bc <__libc_init_array+0x40>)
 8005094:	4c0a      	ldr	r4, [pc, #40]	@ (80050c0 <__libc_init_array+0x44>)
 8005096:	1b64      	subs	r4, r4, r5
 8005098:	10a4      	asrs	r4, r4, #2
 800509a:	42a6      	cmp	r6, r4
 800509c:	d105      	bne.n	80050aa <__libc_init_array+0x2e>
 800509e:	bd70      	pop	{r4, r5, r6, pc}
 80050a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a4:	4798      	blx	r3
 80050a6:	3601      	adds	r6, #1
 80050a8:	e7ee      	b.n	8005088 <__libc_init_array+0xc>
 80050aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ae:	4798      	blx	r3
 80050b0:	3601      	adds	r6, #1
 80050b2:	e7f2      	b.n	800509a <__libc_init_array+0x1e>
 80050b4:	08005124 	.word	0x08005124
 80050b8:	08005124 	.word	0x08005124
 80050bc:	08005124 	.word	0x08005124
 80050c0:	08005128 	.word	0x08005128

080050c4 <memcpy>:
 80050c4:	440a      	add	r2, r1
 80050c6:	4291      	cmp	r1, r2
 80050c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80050cc:	d100      	bne.n	80050d0 <memcpy+0xc>
 80050ce:	4770      	bx	lr
 80050d0:	b510      	push	{r4, lr}
 80050d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050d6:	4291      	cmp	r1, r2
 80050d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050dc:	d1f9      	bne.n	80050d2 <memcpy+0xe>
 80050de:	bd10      	pop	{r4, pc}

080050e0 <_init>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	bf00      	nop
 80050e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e6:	bc08      	pop	{r3}
 80050e8:	469e      	mov	lr, r3
 80050ea:	4770      	bx	lr

080050ec <_fini>:
 80050ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ee:	bf00      	nop
 80050f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f2:	bc08      	pop	{r3}
 80050f4:	469e      	mov	lr, r3
 80050f6:	4770      	bx	lr
